From 5f2e4371e8e3e5d376029e29ab242c015bc0f056 Mon Sep 17 00:00:00 2001
From: Dmitry Rogozhkin <dmitry.v.rogozhkin@intel.com>
Date: Tue, 16 Oct 2018 15:48:54 -0700
Subject: [PATCH 13/15] safec: remove the library in the preference of glibc

As of now we use safec only for memcpy_s which we plan to substituite
with std::copy/operator= going forward.

Signed-off-by: Dmitry Rogozhkin <dmitry.v.rogozhkin@intel.com>

Conflicts:

ClearLinux needs license files to be in the repo at build time in the same
way they came from the original tarball.

Applied this patch by excluding contrib/SafeString* to keep license
and code associated with such license

Signed-off-by: Daniel Charles <daniel.charles@intel.com>
---
 CMakeLists.txt                                |  1 -
 _studio/mfx_lib/Android.mk                    |  3 +--
 _studio/shared/mfx_trace/Android.mk           |  2 --
 .../shared/umc/core/umc/include/umc_defs.h    | 17 ++++++++++++++
 .../shared/umc/core/vm/include/vm_strings.h   | 20 ----------------
 android/mfx_defs_internal.mk                  |  3 +--
 builder/FindFunctions.cmake                   | 23 ++-----------------
 builder/FindInternals.cmake                   |  1 -
 samples/metrics_monitor/CMakeLists.txt        |  8 +++----
 samples/sample_common/CMakeLists.txt          |  2 +-
 samples/sample_decode/CMakeLists.txt          |  2 +-
 samples/sample_encode/CMakeLists.txt          |  2 +-
 samples/sample_fei/CMakeLists.txt             |  2 +-
 samples/sample_hevc_fei/CMakeLists.txt        |  2 +-
 samples/sample_hevc_fei_abr/CMakeLists.txt    |  2 +-
 samples/sample_misc/wayland/CMakeLists.txt    |  2 +-
 samples/sample_multi_transcode/CMakeLists.txt |  2 +-
 .../sample_plugins/rotate_cpu/CMakeLists.txt  |  2 +-
 .../rotate_opencl/CMakeLists.txt              |  2 +-
 .../sample_plugins/vpp_plugin/CMakeLists.txt  |  2 +-
 samples/sample_vpp/CMakeLists.txt             |  2 +-
 tools/asg-hevc/CMakeLists.txt                 |  2 +-
 .../tools/hevc_fei_extractor/CMakeLists.txt   |  2 +-
 23 files changed, 39 insertions(+), 67 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 43a6dcb..f988098 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -96,7 +96,6 @@ if (BUILD_SAMPLES)
 endif()
 
 if (BUILD_RUNTIME)
-  add_subdirectory(${CMAKE_HOME_DIRECTORY}/contrib/SafeStringStaticLibrary/)
   add_subdirectory(${CMAKE_HOME_DIRECTORY}/_studio)
 endif()
 
diff --git a/_studio/mfx_lib/Android.mk b/_studio/mfx_lib/Android.mk
index 3572b50..78ed6fd 100644
--- a/_studio/mfx_lib/Android.mk
+++ b/_studio/mfx_lib/Android.mk
@@ -52,8 +52,7 @@ MFX_LOCAL_STATIC_LIBRARIES_HW := \
     libumc_io_merged_hw \
     libumc_core_merged_hw \
     libmfx_trace_hw \
-    libasc \
-    libsafec
+    libasc
 
 MFX_LOCAL_LDFLAGS_HW := \
     $(MFX_LDFLAGS) \
diff --git a/_studio/shared/mfx_trace/Android.mk b/_studio/shared/mfx_trace/Android.mk
index 303196e..c84c67f 100644
--- a/_studio/shared/mfx_trace/Android.mk
+++ b/_studio/shared/mfx_trace/Android.mk
@@ -13,8 +13,6 @@ LOCAL_CFLAGS := $(MFX_CFLAGS_INTERNAL_HW)
 LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
 LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
 
-LOCAL_STATIC_LIBRARIES := libsafec
-
 ifeq ($(MFX_ENABLE_ITT_TRACES),true)
   LOCAL_STATIC_LIBRARIES += libittnotify
   LOCAL_HEADER_LIBRARIES := llibittnotify_headers
diff --git a/_studio/shared/umc/core/umc/include/umc_defs.h b/_studio/shared/umc/core/umc/include/umc_defs.h
index bcf1c8b..45d6cad 100644
--- a/_studio/shared/umc/core/umc/include/umc_defs.h
+++ b/_studio/shared/umc/core/umc/include/umc_defs.h
@@ -45,9 +45,26 @@ namespace UMC
 #endif //__cplusplus
 
 #include <stdint.h>
+#include <errno.h>
 
 #ifdef __cplusplus
+#include <cstring>
 #include <algorithm>
+
+inline int memcpy_s(void *dest, size_t destsz, const void *src, size_t count)
+{
+    if ((dest == nullptr) || (src == nullptr))
+    {
+        return EINVAL;
+    }
+    if (destsz < count)
+    {
+        return ERANGE;
+    }
+    std::memcpy(dest, src, count);
+    return 0;
+}
+
 #endif //__cplusplus
 
 #define MFX_INTERNAL_CPY_S(dst, dstsize, src, src_size) memcpy_s((uint8_t *)(dst), (size_t)(dstsize), (const uint8_t *)(src), (size_t)src_size)
diff --git a/_studio/shared/umc/core/vm/include/vm_strings.h b/_studio/shared/umc/core/vm/include/vm_strings.h
index 60a69dd..e94cf83 100644
--- a/_studio/shared/umc/core/vm/include/vm_strings.h
+++ b/_studio/shared/umc/core/vm/include/vm_strings.h
@@ -33,26 +33,6 @@
 # include <dirent.h>
 # include <errno.h>
 
-#if !defined(ANDROID)
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif /* __cplusplus */
-
-#include <safe_lib.h>
-#include <snprintf_s.h>
-
-#ifdef __cplusplus
-}
-#endif /* __cplusplus */
-
-#else // !defined(ANDROID)
-
-# include "safe_str_lib.h"
-
-#endif // !defined(ANDROID)
-
 typedef char vm_char;
 
 #define VM_STRING(x) x
diff --git a/android/mfx_defs_internal.mk b/android/mfx_defs_internal.mk
index 3584766..df79e65 100644
--- a/android/mfx_defs_internal.mk
+++ b/android/mfx_defs_internal.mk
@@ -20,8 +20,7 @@ MFX_INCLUDES_INTERNAL :=  \
     $(MFX_HOME)/_studio/shared/umc/core/vm/include \
     $(MFX_HOME)/_studio/shared/umc/core/vm_plus/include \
     $(MFX_HOME)/_studio/shared/umc/io/umc_va/include \
-    $(MFX_HOME)/_studio/mfx_lib/shared/include \
-    $(MFX_HOME)/contrib/SafeStringStaticLibrary/include
+    $(MFX_HOME)/_studio/mfx_lib/shared/include
 
 MFX_INCLUDES_INTERNAL_HW := \
     $(MFX_INCLUDES_INTERNAL) \
diff --git a/builder/FindFunctions.cmake b/builder/FindFunctions.cmake
index 53e28d5..e3cdba5 100644
--- a/builder/FindFunctions.cmake
+++ b/builder/FindFunctions.cmake
@@ -139,20 +139,15 @@ function( create_plugins_cfg directory )
 endfunction()
 
 # Usage:
-#  make_library(shortname|<name> none|<variant> static|shared nosafestring|<true|false>)
+#  make_library(shortname|<name> none|<variant> static|shared)
 #    - shortname|<name>: use folder name as library name or <name> specified by user
 #    - <variant>|none: build library in specified variant (with drm or x11 or wayland support, etc),
 #      universal - special variant which enables compilation flags required for all backends, but
 #      moves dependency to runtime instead of linktime
 #    or without variant if none was specified
 #    - static|shared: build static or shared library
-#    - nosafestring|<true|false>: any value evaluated as True by CMake to disable link against SafeString
 #
 function( make_library name variant type )
-  set( nosafestring ${ARGV3} )
-  if( Windows )
-    set( nosafestring TRUE )
-  endif()
   get_target( target ${ARGV0} ${ARGV1} )
   if( ${ARGV0} MATCHES shortname )
     get_folder( folder )
@@ -216,10 +211,6 @@ function( make_library name variant type )
 
   configure_build_variant( ${target} ${ARGV1} )
 
-  if( NOT nosafestring )
-    target_link_libraries( ${target} SafeString )
-  endif()
-
   if( defs )
     append_property( ${target} COMPILE_FLAGS ${defs} )
   endif()
@@ -235,19 +226,13 @@ function( make_library name variant type )
 endfunction()
 
 # Usage:
-#  make_executable(name|<name> none|<variant> nosafestring|<true|false>)
+#  make_executable(name|<name> none|<variant>)
 #    - name|<name>: use folder name as library name or <name> specified by user
 #    - <variant>|none: build library in specified variant (with drm or x11 or wayland support, etc),
 #      universal - special variant which enables compilation flags required for all backends, but
 #      moves dependency to runtime instead of linktime
-#    or without variant if none was specified
-#    - nosafestring|<true|false>: any value evaluated as True by CMake to disable link against SafeString
 #
 function( make_executable name variant )
-  set( nosafestring ${ARGV2} )
-  if( Windows )
-    set( nosafestring TRUE )
-  endif()
   get_target( target ${ARGV0} ${ARGV1} )
   get_folder( folder )
 
@@ -310,10 +295,6 @@ function( make_executable name variant )
     target_link_libraries( ${target} ${lib} )
   endforeach()
 
-  if( NOT nosafestring )
-    target_link_libraries( ${target} SafeString )
-  endif()
-
   if( Linux )
     target_link_libraries( ${target} "-Xlinker --end-group -lgcc" )
   endif()
diff --git a/builder/FindInternals.cmake b/builder/FindInternals.cmake
index 58927a2..daf0c7d 100644
--- a/builder/FindInternals.cmake
+++ b/builder/FindInternals.cmake
@@ -33,7 +33,6 @@ function( mfx_include_dirs )
     ${CMAKE_HOME_DIRECTORY}/_studio/mfx_lib/shared/include
     ${CMAKE_HOME_DIRECTORY}/_studio/mfx_lib/fei/include
     ${CMAKE_HOME_DIRECTORY}/_studio/mfx_lib/fei/h264_la
-    ${CMAKE_HOME_DIRECTORY}/contrib/SafeStringStaticLibrary/include
     ${CMAKE_HOME_DIRECTORY}/contrib/cm/include
   )
 
diff --git a/samples/metrics_monitor/CMakeLists.txt b/samples/metrics_monitor/CMakeLists.txt
index 30b2d52..152989d 100755
--- a/samples/metrics_monitor/CMakeLists.txt
+++ b/samples/metrics_monitor/CMakeLists.txt
@@ -9,8 +9,8 @@ set( sources "" )
 file( GLOB_RECURSE srcs "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp" )
 list( APPEND sources ${srcs})
 
-make_library( cttmetrics none shared "nosafestring" )
-make_library( cttmetrics_static none static "nosafestring" )
+make_library( cttmetrics none shared )
+make_library( cttmetrics_static none static )
 
 # metrics_monitor sample
 
@@ -20,7 +20,7 @@ file( GLOB_RECURSE srcs "${CMAKE_CURRENT_SOURCE_DIR}/sample/*.cpp" )
 list( APPEND sources ${srcs})
 list( APPEND LIBS cttmetrics)
 
-make_executable( metrics_monitor none "nosafestring" )
+make_executable( metrics_monitor none )
 
 # test_monitor
 
@@ -51,7 +51,7 @@ if( PKG_LIBDRM_FOUND AND
 
     set(DEPENDENCIES libdrm)
 
-    make_executable( test_monitor none "nosafestring" )
+    make_executable( test_monitor none )
 
 else()
 
diff --git a/samples/sample_common/CMakeLists.txt b/samples/sample_common/CMakeLists.txt
index 6d8f093..3b6a619 100644
--- a/samples/sample_common/CMakeLists.txt
+++ b/samples/sample_common/CMakeLists.txt
@@ -3,5 +3,5 @@ include_directories (
   ${CMAKE_CURRENT_SOURCE_DIR}/../sample_misc/wayland/include
 )
 
-make_library( shortname universal static "nosafestring" )
+make_library( shortname universal static )
 set( defs "" )
diff --git a/samples/sample_decode/CMakeLists.txt b/samples/sample_decode/CMakeLists.txt
index 8e2e40b..e114cbc 100644
--- a/samples/sample_decode/CMakeLists.txt
+++ b/samples/sample_decode/CMakeLists.txt
@@ -7,6 +7,6 @@ include_directories (
 list( APPEND LIBS_VARIANT sample_common )
 
 set(DEPENDENCIES libmfx dl pthread)
-make_executable( shortname universal "nosafestring" )
+make_executable( shortname universal )
 
 install( TARGETS ${target} RUNTIME DESTINATION ${MFX_SAMPLES_INSTALL_BIN_DIR} )
diff --git a/samples/sample_encode/CMakeLists.txt b/samples/sample_encode/CMakeLists.txt
index 5d3ef19..1c3bfe0 100644
--- a/samples/sample_encode/CMakeLists.txt
+++ b/samples/sample_encode/CMakeLists.txt
@@ -7,6 +7,6 @@ include_directories (
 list( APPEND LIBS_VARIANT sample_common )
 
 set(DEPENDENCIES libmfx dl pthread)
-make_executable( shortname universal "nosafestring" )
+make_executable( shortname universal )
 
 install( TARGETS ${target} RUNTIME DESTINATION ${MFX_SAMPLES_INSTALL_BIN_DIR} )
diff --git a/samples/sample_fei/CMakeLists.txt b/samples/sample_fei/CMakeLists.txt
index 1d34e1c..6aacaf6 100644
--- a/samples/sample_fei/CMakeLists.txt
+++ b/samples/sample_fei/CMakeLists.txt
@@ -12,6 +12,6 @@ include_directories (
 list( APPEND LIBS_VARIANT sample_common )
 
 set(DEPENDENCIES ${skipping} itt libmfx dl pthread)
-make_executable( shortname universal "nosafestring" )
+make_executable( shortname universal )
 
 install( TARGETS ${target} RUNTIME DESTINATION ${MFX_SAMPLES_INSTALL_BIN_DIR} )
diff --git a/samples/sample_hevc_fei/CMakeLists.txt b/samples/sample_hevc_fei/CMakeLists.txt
index 1529837..f433c79 100644
--- a/samples/sample_hevc_fei/CMakeLists.txt
+++ b/samples/sample_hevc_fei/CMakeLists.txt
@@ -21,7 +21,7 @@ include_directories (
 list( APPEND LIBS_VARIANT sample_common )
 
 set(DEPENDENCIES ${skipping} itt libmfx dl pthread)
-make_executable( shortname universal "nosafestring" )
+make_executable( shortname universal )
 
 install( TARGETS ${target} RUNTIME DESTINATION ${MFX_SAMPLES_INSTALL_BIN_DIR} )
 set( defs "" )
diff --git a/samples/sample_hevc_fei_abr/CMakeLists.txt b/samples/sample_hevc_fei_abr/CMakeLists.txt
index 73b8c20..cbd8ccd 100644
--- a/samples/sample_hevc_fei_abr/CMakeLists.txt
+++ b/samples/sample_hevc_fei_abr/CMakeLists.txt
@@ -23,7 +23,7 @@ list( APPEND LIBS_VARIANT sample_common )
 
 set(DEPENDENCIES ${skipping} itt libmfx dl pthread)
 set( defs "${API_FLAGS}" )
-make_executable( shortname universal "nosafestring" )
+make_executable( shortname universal )
 
 install( TARGETS ${target} RUNTIME DESTINATION ${MFX_SAMPLES_INSTALL_BIN_DIR} )
 set( defs "" )
diff --git a/samples/sample_misc/wayland/CMakeLists.txt b/samples/sample_misc/wayland/CMakeLists.txt
index cef549d..a6f22f6 100644
--- a/samples/sample_misc/wayland/CMakeLists.txt
+++ b/samples/sample_misc/wayland/CMakeLists.txt
@@ -10,6 +10,6 @@ list(APPEND LIBS sample_common)
 
 set(DEPENDENCIES  libva libdrm wayland-client)
 
-make_library(mfx_wayland none shared "nosafestring" )
+make_library(mfx_wayland none shared )
 
 install( TARGETS ${target} LIBRARY DESTINATION ${MFX_SAMPLES_INSTALL_LIB_DIR} )
diff --git a/samples/sample_multi_transcode/CMakeLists.txt b/samples/sample_multi_transcode/CMakeLists.txt
index f652462..a21c7b5 100644
--- a/samples/sample_multi_transcode/CMakeLists.txt
+++ b/samples/sample_multi_transcode/CMakeLists.txt
@@ -11,6 +11,6 @@ list( APPEND LIBS_NOVARIANT vpp_plugin )
 
 set(DEPENDENCIES itt libmfx dl pthread)
 
-make_executable( shortname universal "nosafestring" )
+make_executable( shortname universal )
 
 install( TARGETS ${target} RUNTIME DESTINATION ${MFX_SAMPLES_INSTALL_BIN_DIR} )
diff --git a/samples/sample_plugins/rotate_cpu/CMakeLists.txt b/samples/sample_plugins/rotate_cpu/CMakeLists.txt
index 11df4c1..db8eb90 100644
--- a/samples/sample_plugins/rotate_cpu/CMakeLists.txt
+++ b/samples/sample_plugins/rotate_cpu/CMakeLists.txt
@@ -11,6 +11,6 @@ list(APPEND sources.plus "${PLUGINS_COMMON_PATH}/mfx_plugin_module.cpp")
 list( APPEND LIBS sample_common)
 
 set(DEPENDENCIES libmfx dl pthread)
-make_library(sample_rotate_plugin none shared "nosafestring")
+make_library(sample_rotate_plugin none shared )
 
 install( TARGETS ${target} LIBRARY DESTINATION ${MFX_SAMPLES_INSTALL_LIB_DIR} )
diff --git a/samples/sample_plugins/rotate_opencl/CMakeLists.txt b/samples/sample_plugins/rotate_opencl/CMakeLists.txt
index d06400c..d8c4aeb 100644
--- a/samples/sample_plugins/rotate_opencl/CMakeLists.txt
+++ b/samples/sample_plugins/rotate_opencl/CMakeLists.txt
@@ -17,7 +17,7 @@ list( APPEND LIBS_VARIANT sample_common )
 list(APPEND sources.plus "${PLUGINS_COMMON_PATH}/mfx_plugin_module.cpp")
 
 set(DEPENDENCIES opencl libva libmfx dl)
-make_library( sample_plugin_opencl none shared "nosafestring" )
+make_library( sample_plugin_opencl none shared )
 
 install( TARGETS ${target} LIBRARY DESTINATION ${MFX_SAMPLES_INSTALL_LIB_DIR} )
 
diff --git a/samples/sample_plugins/vpp_plugin/CMakeLists.txt b/samples/sample_plugins/vpp_plugin/CMakeLists.txt
index 6203fde..8701a81 100644
--- a/samples/sample_plugins/vpp_plugin/CMakeLists.txt
+++ b/samples/sample_plugins/vpp_plugin/CMakeLists.txt
@@ -3,6 +3,6 @@ include_directories (
   ${CMAKE_CURRENT_SOURCE_DIR}/include
 )
 
-make_library( shortname none static "nosafestring" )
+make_library( shortname none static )
 
 install( TARGETS ${target} ARCHIVE DESTINATION ${MFX_SAMPLES_INSTALL_LIB_DIR} )
diff --git a/samples/sample_vpp/CMakeLists.txt b/samples/sample_vpp/CMakeLists.txt
index 2042855..324ee46 100644
--- a/samples/sample_vpp/CMakeLists.txt
+++ b/samples/sample_vpp/CMakeLists.txt
@@ -6,6 +6,6 @@ include_directories (
 list( APPEND LIBS_VARIANT sample_common )
 
 set(DEPENDENCIES libmfx dl pthread)
-make_executable( shortname universal "nosafestring" )
+make_executable( shortname universal )
 
 install( TARGETS ${target} RUNTIME DESTINATION ${MFX_SAMPLES_INSTALL_BIN_DIR} )
diff --git a/tools/asg-hevc/CMakeLists.txt b/tools/asg-hevc/CMakeLists.txt
index 8dfeddf..1322ac2 100644
--- a/tools/asg-hevc/CMakeLists.txt
+++ b/tools/asg-hevc/CMakeLists.txt
@@ -10,7 +10,7 @@ list( APPEND LIBS sample_common )
 set( defs " -DMFX_VERSION_USE_LATEST " )
 set(DEPENDENCIES libmfx)
 
-make_executable( shortname universal "nosafestring" )
+make_executable( shortname universal )
 
 install( TARGETS ${target} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )
 set( defs "" )
diff --git a/tools/bs_parser_hevc/tools/hevc_fei_extractor/CMakeLists.txt b/tools/bs_parser_hevc/tools/hevc_fei_extractor/CMakeLists.txt
index 8666b06..2926bc0 100644
--- a/tools/bs_parser_hevc/tools/hevc_fei_extractor/CMakeLists.txt
+++ b/tools/bs_parser_hevc/tools/hevc_fei_extractor/CMakeLists.txt
@@ -9,7 +9,7 @@ list( APPEND LIBS bs_parser_hevc_static )
 set( defs " -DMFX_VERSION_USE_LATEST " )
 set(DEPENDENCIES pthread)
 
-make_executable( shortname universal "nosafestring" )
+make_executable( shortname universal )
 
 install( TARGETS ${target} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )
 set( defs "" )
-- 
2.17.2

