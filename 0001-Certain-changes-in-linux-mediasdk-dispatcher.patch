From 29233df84c35a85c5082c2b9544bd337fa17d380 Mon Sep 17 00:00:00 2001
From: Dmitry Rogozhkin <dmitry.v.rogozhkin@intel.com>
Date: Thu, 19 Jul 2018 04:41:49 -0700
Subject: [PATCH 01/15] Certain changes in linux mediasdk dispatcher

This change refactors mediasdk dispatcher. Dispatcher for Linux is
separated out. Linux operating system implies certain things which
can and can not be done. Previous  version of the dispatcher did not
quite satisfy Linux requirements for integration into the OS.

Key changes to pay attention on:
 * Audio support is dropped, user will get MFX_ERR_UNSUPPORTED or
 MFX_ERR_NOT_FOUND depending on the uAPI
 * Video library is loaded by either libmfxhw64.so.1 or libmfxsw64.so.1
 depending on requested implementation
 * Search for the libraries is done in this order: first libraries are
 searched in system paths, the MFX_MODULES_DIR passed during compilation
 time is favored
 * All plugins, including developer plugins, should be centrally
 registered in MFX_PLUGINS_DIR/plugins.cfg. MFX_PLUGINS_DIR is passed
 during compilation time.
 * Having custom plugins side-by-side to applicaiton is not allowed.

Signed-off-by: Dmitry Rogozhkin <dmitry.v.rogozhkin@intel.com>
---
 CMakeLists.txt                                |    2 +-
 api/{opensource => mfx_dispatch}/Android.mk   |    0
 .../linux}/Android.mk                         |   16 +-
 .../linux}/CMakeLists.txt                     |  109 +-
 .../linux/mfxaudio_functions.h}               |    6 +-
 api/mfx_dispatch/linux/mfxloader.cpp          |  576 +++++++++
 api/mfx_dispatch/linux/mfxloader.h            |  125 ++
 api/mfx_dispatch/linux/mfxparser.cpp          |  175 +++
 .../linux/mfxvideo_functions.h}               |   15 +-
 .../linux}/pkg-config-shared.pc.cmake         |    0
 .../linux}/pkg-config.pc.cmake                |    0
 .../mfx_dispatch/include/intel_api_factory.h  |   33 -
 .../include/mfx_critical_section.h            |   66 --
 .../mfx_dispatch/include/mfx_dispatcher.h     |  219 ----
 .../include/mfx_dispatcher_defs.h             |   64 -
 .../mfx_dispatch/include/mfx_dispatcher_log.h |  240 ----
 .../mfx_dispatch/include/mfx_dxva2_device.h   |  142 ---
 .../include/mfx_library_iterator.h            |  130 ---
 .../mfx_dispatch/include/mfx_load_dll.h       |   49 -
 .../mfx_dispatch/include/mfx_load_plugin.h    |   85 --
 .../include/mfx_plugin_cfg_parser.h           |   83 --
 .../mfx_dispatch/include/mfx_plugin_hive.h    |  109 --
 .../mfx_dispatch/include/mfx_vector.h         |  210 ----
 .../mfx_dispatch/include/mfx_win_reg_key.h    |   25 -
 api/opensource/mfx_dispatch/src/main.cpp      | 1030 -----------------
 .../mfx_dispatch/src/mfx_critical_section.cpp |   22 -
 .../src/mfx_critical_section_linux.cpp        |   79 --
 .../mfx_dispatch/src/mfx_dispatcher.cpp       |  328 ------
 .../mfx_dispatch/src/mfx_dispatcher_log.cpp   |  424 -------
 .../mfx_dispatch/src/mfx_dxva2_device.cpp     |   20 -
 .../mfx_dispatch/src/mfx_function_table.cpp   |  133 ---
 .../mfx_dispatch/src/mfx_library_iterator.cpp |   21 -
 .../src/mfx_library_iterator_linux.cpp        |  373 ------
 .../mfx_dispatch/src/mfx_load_dll.cpp         |   20 -
 .../mfx_dispatch/src/mfx_load_dll_linux.cpp   |  121 --
 .../mfx_dispatch/src/mfx_load_plugin.cpp      |  453 --------
 .../src/mfx_plugin_cfg_parser.cpp             |  374 ------
 .../mfx_dispatch/src/mfx_plugin_hive.cpp      |   20 -
 .../src/mfx_plugin_hive_linux.cpp             |  391 -------
 .../mfx_dispatch/src/mfx_win_reg_key.cpp      |   20 -
 40 files changed, 934 insertions(+), 5374 deletions(-)
 rename api/{opensource => mfx_dispatch}/Android.mk (100%)
 rename api/{opensource/mfx_dispatch => mfx_dispatch/linux}/Android.mk (59%)
 rename api/{opensource/mfx_dispatch => mfx_dispatch/linux}/CMakeLists.txt (61%)
 rename api/{opensource/mfx_dispatch/include/mfxaudio_exposed_functions_list.h => mfx_dispatch/linux/mfxaudio_functions.h} (99%)
 create mode 100644 api/mfx_dispatch/linux/mfxloader.cpp
 create mode 100644 api/mfx_dispatch/linux/mfxloader.h
 create mode 100644 api/mfx_dispatch/linux/mfxparser.cpp
 rename api/{opensource/mfx_dispatch/include/mfx_exposed_functions_list.h => mfx_dispatch/linux/mfxvideo_functions.h} (94%)
 rename api/{opensource/mfx_dispatch => mfx_dispatch/linux}/pkg-config-shared.pc.cmake (100%)
 rename api/{opensource/mfx_dispatch => mfx_dispatch/linux}/pkg-config.pc.cmake (100%)
 delete mode 100644 api/opensource/mfx_dispatch/include/intel_api_factory.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_critical_section.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_dispatcher.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_dispatcher_defs.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_dispatcher_log.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_dxva2_device.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_library_iterator.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_load_dll.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_load_plugin.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_plugin_cfg_parser.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_plugin_hive.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_vector.h
 delete mode 100644 api/opensource/mfx_dispatch/include/mfx_win_reg_key.h
 delete mode 100644 api/opensource/mfx_dispatch/src/main.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_critical_section.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_critical_section_linux.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_dispatcher.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_dispatcher_log.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_dxva2_device.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_function_table.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_library_iterator.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_library_iterator_linux.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_load_dll.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_load_dll_linux.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_load_plugin.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_plugin_cfg_parser.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_plugin_hive.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_plugin_hive_linux.cpp
 delete mode 100644 api/opensource/mfx_dispatch/src/mfx_win_reg_key.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9b9c042..43a6dcb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -101,7 +101,7 @@ if (BUILD_RUNTIME)
 endif()
 
 if (BUILD_DISPATCHER)
-  add_subdirectory(api/opensource/mfx_dispatch)
+  add_subdirectory(api/mfx_dispatch/linux)
 endif()
 
 create_plugins_cfg(${CMAKE_BINARY_DIR})
diff --git a/api/opensource/Android.mk b/api/mfx_dispatch/Android.mk
similarity index 100%
rename from api/opensource/Android.mk
rename to api/mfx_dispatch/Android.mk
diff --git a/api/opensource/mfx_dispatch/Android.mk b/api/mfx_dispatch/linux/Android.mk
similarity index 59%
rename from api/opensource/mfx_dispatch/Android.mk
rename to api/mfx_dispatch/linux/Android.mk
index 395fc4a..23bfaf6 100644
--- a/api/opensource/mfx_dispatch/Android.mk
+++ b/api/mfx_dispatch/linux/Android.mk
@@ -6,20 +6,8 @@ include $(CLEAR_VARS)
 include $(MFX_HOME)/android/mfx_defs.mk
 
 LOCAL_SRC_FILES := $(addprefix src/, \
-    main.cpp \
-    mfx_critical_section.cpp \
-    mfx_critical_section_linux.cpp \
-    mfx_dispatcher.cpp \
-    mfx_function_table.cpp \
-    mfx_library_iterator.cpp \
-    mfx_library_iterator_linux.cpp \
-    mfx_load_dll.cpp \
-    mfx_load_dll_linux.cpp \
-    mfx_win_reg_key.cpp \
-    mfx_dxva2_device.cpp \
-    mfx_plugin_hive_linux.cpp \
-    mfx_plugin_cfg_parser.cpp \
-    mfx_load_plugin.cpp)
+    mfxloader.cpp \
+    mfxparser.cpp)
 
 LOCAL_C_INCLUDES := $(MFX_INCLUDES)
 
diff --git a/api/opensource/mfx_dispatch/CMakeLists.txt b/api/mfx_dispatch/linux/CMakeLists.txt
similarity index 61%
rename from api/opensource/mfx_dispatch/CMakeLists.txt
rename to api/mfx_dispatch/linux/CMakeLists.txt
index 59a867e..050aeed 100644
--- a/api/opensource/mfx_dispatch/CMakeLists.txt
+++ b/api/mfx_dispatch/linux/CMakeLists.txt
@@ -35,88 +35,65 @@ endfunction()
 
 set( CMAKE_LIB_DIR ${CMAKE_BINARY_DIR}/__lib )
 
-if( CMAKE_SYSTEM_NAME MATCHES Windows )
-  add_definitions(-DMINGW_HAS_SECURE_API -DWIN32)
-
-  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
-    add_definitions(-DWIN64)
-  endif( )
-else( )
-
-  # If user did not override CMAKE_INSTALL_PREFIX, then set the default prefix
-  # to /opt/intel/mediasdk instead of cmake's default
-  if( CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT )
-    set( CMAKE_INSTALL_PREFIX /opt/intel/mediasdk CACHE PATH "Install Path Prefix" FORCE )
-  endif( )
-  message( STATUS "CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}" )
+# If user did not override CMAKE_INSTALL_PREFIX, then set the default prefix
+# to /opt/intel/mediasdk instead of cmake's default
+if( CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT )
+  set( CMAKE_INSTALL_PREFIX /opt/intel/mediasdk CACHE PATH "Install Path Prefix" FORCE )
+endif( )
+message( STATUS "CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}" )
 
-  include( GNUInstallDirs )
+include( GNUInstallDirs )
 
-  if( NOT DEFINED MFX_PLUGINS_DIR )
-    set( MFX_PLUGINS_DIR ${CMAKE_INSTALL_FULL_LIBDIR}/mfx )
-  endif( )
-  add_definitions( -DMFX_PLUGINS_DIR="${MFX_PLUGINS_DIR}" )
-  message( STATUS "MFX_PLUGINS_DIR=${MFX_PLUGINS_DIR}" )
+if( NOT DEFINED MFX_PLUGINS_DIR )
+  set( MFX_PLUGINS_DIR ${CMAKE_INSTALL_FULL_LIBDIR}/mfx )
+endif( )
+add_definitions( -DMFX_PLUGINS_DIR="${MFX_PLUGINS_DIR}" )
+message( STATUS "MFX_PLUGINS_DIR=${MFX_PLUGINS_DIR}" )
 
-  if( NOT DEFINED MFX_MODULES_DIR )
-    set( MFX_MODULES_DIR ${CMAKE_INSTALL_FULL_LIBDIR} )
-  endif( )
-  add_definitions( -DMFX_MODULES_DIR="${MFX_MODULES_DIR}" )
-  message( STATUS "MFX_MODULES_DIR=${MFX_MODULES_DIR}" )
+if( NOT DEFINED MFX_MODULES_DIR )
+  set( MFX_MODULES_DIR ${CMAKE_INSTALL_FULL_LIBDIR} )
+endif( )
+add_definitions( -DMFX_MODULES_DIR="${MFX_MODULES_DIR}" )
+message( STATUS "MFX_MODULES_DIR=${MFX_MODULES_DIR}" )
 
-  add_definitions(-DUNIX)
+add_definitions(-DUNIX)
 
-  if( CMAKE_SYSTEM_NAME MATCHES Linux )
-    add_definitions(-D__USE_LARGEFILE64 -D_FILE_OFFSET_BITS=64 -DLINUX -DLINUX32)
+if( CMAKE_SYSTEM_NAME MATCHES Linux )
+  add_definitions(-D__USE_LARGEFILE64 -D_FILE_OFFSET_BITS=64 -DLINUX -DLINUX32)
 
-    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
-      add_definitions(-DLINUX64)
-    endif( )
+  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
+    add_definitions(-DLINUX64)
   endif( )
+endif( )
 
-  if( CMAKE_SYSTEM_NAME MATCHES Darwin )
-    add_definitions(-DOSX)
-    add_definitions(-DOSX32)
+if( CMAKE_SYSTEM_NAME MATCHES Darwin )
+  add_definitions(-DOSX)
+  add_definitions(-DOSX32)
 
-    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
-      add_definitions(-DOSX64)
-    endif( )
+  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
+    add_definitions(-DOSX64)
   endif( )
+endif( )
 
-  set(no_warnings "-Wno-unknown-pragmas -Wno-unused")
-  set(warnings "-Wall -Wformat -Wformat-security")
+set(no_warnings "-Wno-unknown-pragmas -Wno-unused")
+set(warnings "-Wall -Wformat -Wformat-security")
 
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pipe -fPIC -std=c++11 ${warnings} ${no_warnings}")
-  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pipe -fPIC -std=c++11 ${warnings} ${no_warnings}")
+set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")
 
-  if (DEFINED CMAKE_FIND_ROOT_PATH)
-    append("--sysroot=${CMAKE_FIND_ROOT_PATH} " LINK_FLAGS)
-  endif (DEFINED CMAKE_FIND_ROOT_PATH)
-endif( )
+if (DEFINED CMAKE_FIND_ROOT_PATH)
+  append("--sysroot=${CMAKE_FIND_ROOT_PATH} " LINK_FLAGS)
+endif (DEFINED CMAKE_FIND_ROOT_PATH)
+
+list(APPEND sources
+  ${CMAKE_CURRENT_SOURCE_DIR}/mfxloader.cpp
+  ${CMAKE_CURRENT_SOURCE_DIR}/mfxparser.cpp
+)
 
 include_directories (
   ${MFX_API_FOLDER}
-  ${CMAKE_CURRENT_SOURCE_DIR}/include
 )
 
-list(APPEND sources
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_critical_section.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_critical_section_linux.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_dispatcher.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_function_table.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_library_iterator.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_library_iterator_linux.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_load_dll.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_load_dll_linux.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_win_reg_key.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_dxva2_device.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_plugin_hive.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_plugin_hive_linux.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_plugin_cfg_parser.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_load_plugin.cpp
-  )
-
 function( append_property target property_name property )
   get_target_property( property ${ARGV0} ${ARGV1} )
   if( property MATCHES NOTFOUND)
@@ -151,10 +128,6 @@ make_static_library( mfx )
 set( defs "-DMFX_DISPATCHER_EXPOSED_PREFIX" )
 make_static_library( dispatch_shared )
 
-list(APPEND sources.plus
-  ${CMAKE_CURRENT_SOURCE_DIR}/src/mfx_dispatcher_log.cpp
-  )
-
 set( defs "-DMFX_DISPATCHER_LOG -DDXVA2DEVICE_LOG" )
 make_static_library( dispatch_trace )
 
diff --git a/api/opensource/mfx_dispatch/include/mfxaudio_exposed_functions_list.h b/api/mfx_dispatch/linux/mfxaudio_functions.h
similarity index 99%
rename from api/opensource/mfx_dispatch/include/mfxaudio_exposed_functions_list.h
rename to api/mfx_dispatch/linux/mfxaudio_functions.h
index 4370ae3..a178f26 100644
--- a/api/opensource/mfx_dispatch/include/mfxaudio_exposed_functions_list.h
+++ b/api/mfx_dispatch/linux/mfxaudio_functions.h
@@ -1,15 +1,15 @@
 // Copyright (c) 2017 Intel Corporation
-// 
+//
 // Permission is hereby granted, free of charge, to any person obtaining a copy
 // of this software and associated documentation files (the "Software"), to deal
 // in the Software without restriction, including without limitation the rights
 // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 // copies of the Software, and to permit persons to whom the Software is
 // furnished to do so, subject to the following conditions:
-// 
+//
 // The above copyright notice and this permission notice shall be included in all
 // copies or substantial portions of the Software.
-// 
+//
 // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
diff --git a/api/mfx_dispatch/linux/mfxloader.cpp b/api/mfx_dispatch/linux/mfxloader.cpp
new file mode 100644
index 0000000..3d1dab0
--- /dev/null
+++ b/api/mfx_dispatch/linux/mfxloader.cpp
@@ -0,0 +1,576 @@
+// Copyright (c) 2017-2018 Intel Corporation
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in all
+// copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+// SOFTWARE.
+
+#include <assert.h>
+#include <dlfcn.h>
+#include <string.h>
+#include <unistd.h>
+
+#include <algorithm>
+#include <list>
+#include <memory>
+#include <mutex>
+#include <vector>
+
+#include "mfxvideo.h"
+#include "mfxplugin.h"
+#include "mfxpak.h"
+
+#include "mfxloader.h"
+
+namespace MFX {
+
+#if defined(__i386__)
+#define LIBMFXSW "libmfxsw32.so.1"
+#define LIBMFXHW "libmfxhw32.so.1"
+#elif defined(__x86_64__)
+#define LIBMFXSW "libmfxsw64.so.1"
+#define LIBMFXHW "libmfxhw64.so.1"
+#else
+#error Unsupported architecture
+#endif
+
+#undef FUNCTION
+#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list) \
+  e##func_name,
+
+enum Function
+{
+  eMFXInit,
+  eMFXInitEx,
+  eMFXClose,
+  eMFXJoinSession,
+#include "mfxvideo_functions.h"
+  eFunctionsNum,
+  eNoMoreFunctions = eFunctionsNum
+};
+
+struct FunctionsTable
+{
+  Function id;
+  const char* name;
+  mfxVersion version;
+};
+
+#define VERSION(major, minor) {{minor, major}}
+
+#undef FUNCTION
+#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list) \
+    { e##func_name, #func_name, API_VERSION },
+
+static const FunctionsTable g_mfxFuncTable[] =
+{
+    { eMFXInit, "MFXInit", VERSION(1, 0) },
+    { eMFXInitEx, "MFXInitEx", VERSION(1, 14) },
+    { eMFXClose, "MFXClose", VERSION(1, 0) },
+    { eMFXJoinSession, "MFXJoinSession", VERSION(1, 1) },
+#include "mfxvideo_functions.h"
+    { eNoMoreFunctions }
+};
+
+typedef mfxStatus (MFX_CDECL *CreatePluginPtr)(mfxPluginUID, mfxPlugin*);
+
+class LoaderCtx;
+
+class PluginCtx
+{
+public:
+  PluginCtx(LoaderCtx& loader)
+    : m_loader(loader)
+  {}
+
+  mfxStatus Load(const mfxPluginUID& uid, mfxU32 version, const char *path);
+  mfxStatus Unload();
+
+  inline mfxPluginUID getUID() const { return m_uid; }
+
+private:
+  LoaderCtx& m_loader;
+  std::shared_ptr<void> m_dlh;
+  CreatePluginPtr m_create_plugin = nullptr;
+  mfxPluginUID m_uid{};
+  mfxPlugin m_plugin{};
+  mfxPluginParam m_plugin_param{};
+};
+
+class LoaderCtx
+{
+public:
+  mfxStatus Init(mfxInitParam& par);
+  mfxStatus Close();
+
+  mfxStatus LoadPlugin(const mfxPluginUID& uid, mfxU32 version, const char *path);
+  mfxStatus UnloadPlugin(const mfxPluginUID& uid);
+
+  inline void* getFunction(Function func) const {
+    return m_table[func];
+  }
+
+  inline mfxSession getSession() const {
+    return m_session;
+  }
+
+  inline mfxIMPL getImpl() const {
+    return m_implementation;
+  }
+
+  inline mfxVersion getVersion() const {
+    return m_version;
+  }
+
+private:
+  std::shared_ptr<void> m_dlh;
+  mfxVersion m_version{};
+  mfxIMPL m_implementation{};
+  mfxSession m_session = nullptr;
+  void* m_table[eFunctionsNum]{};
+
+  std::mutex m_guard;
+  std::list<PluginCtx> m_plugins;
+};
+
+struct GlobalCtx
+{
+  std::mutex m_mutex;
+  std::list<PluginInfo> m_plugins;
+};
+
+static GlobalCtx g_GlobalCtx;
+
+std::shared_ptr<void> make_dlopen(const char* filename, int flags)
+{
+  return std::shared_ptr<void>(
+    dlopen(filename, flags),
+    [] (void* handle) { if (handle) dlclose(handle); });
+}
+
+mfxStatus LoaderCtx::Init(mfxInitParam& par)
+{
+  if (!MFX_IMPL_BASETYPE(par.Implementation) &&
+      !(par.Implementation & MFX_IMPL_VIA_VAAPI)) {
+    return MFX_ERR_UNSUPPORTED;
+  }
+  if (par.Implementation & MFX_IMPL_AUDIO) {
+    return MFX_ERR_UNSUPPORTED;
+  }
+
+  std::vector<std::string> libs;
+
+  if (MFX_IMPL_BASETYPE(par.Implementation) == MFX_IMPL_AUTO ||
+      MFX_IMPL_BASETYPE(par.Implementation) == MFX_IMPL_AUTO_ANY) {
+    libs.emplace_back(LIBMFXHW);
+    libs.emplace_back(MFX_MODULES_DIR "/" LIBMFXHW);
+    libs.emplace_back(LIBMFXSW);
+    libs.emplace_back(MFX_MODULES_DIR "/" LIBMFXSW);
+  } else if (par.Implementation & MFX_IMPL_HARDWARE ||
+             par.Implementation & MFX_IMPL_HARDWARE_ANY) {
+    libs.emplace_back(LIBMFXHW);
+    libs.emplace_back(MFX_MODULES_DIR "/" LIBMFXHW);
+  } else if (par.Implementation & MFX_IMPL_SOFTWARE) {
+    libs.emplace_back(LIBMFXSW);
+    libs.emplace_back(MFX_MODULES_DIR "/" LIBMFXSW);
+  } else {
+    return MFX_ERR_UNSUPPORTED;
+  }
+
+  mfxStatus mfx_res = MFX_ERR_UNSUPPORTED;
+
+  for (auto& lib: libs) {
+    std::shared_ptr<void> hdl = make_dlopen(lib.c_str(), RTLD_LOCAL|RTLD_NOW);
+    if (hdl) {
+      do {
+        /* Loading functions table */
+        bool wrong_version = false;
+        for (int i = 0; i < eFunctionsNum; ++i) {
+          assert(i == g_mfxFuncTable[i].id);
+          m_table[i] = dlsym(hdl.get(), g_mfxFuncTable[i].name);
+          if (!m_table[i] && ((par.Version <= g_mfxFuncTable[i].version) ||
+                (g_mfxFuncTable[i].version <= mfxVersion(VERSION(1, 14))))) {
+            // this version of dispatcher requires MFXInitEx which appeared
+            // in Media SDK API 1.14
+            wrong_version = true;
+            break;
+          }
+        }
+        if (wrong_version) {
+          mfx_res = MFX_ERR_UNSUPPORTED;
+          break;
+        }
+
+        /* Initializing loaded library */
+        mfx_res = ((decltype(MFXInitEx)*)m_table[eMFXInitEx])(par, &m_session);
+        if (MFX_ERR_NONE != mfx_res) {
+          break;
+        }
+
+        // Below we just get some data and double check that we got what we have expected
+        // to get. Some of these checks are done inside mediasdk init function
+        mfx_res = ((decltype(MFXQueryVersion)*)m_table[eMFXQueryVersion])(m_session, &m_version);
+        if (MFX_ERR_NONE != mfx_res) {
+          break;
+        }
+
+        if (m_version < par.Version) {
+          mfx_res = MFX_ERR_UNSUPPORTED;
+          break;
+        }
+
+        mfx_res = ((decltype(MFXQueryIMPL)*)m_table[eMFXQueryIMPL])(m_session, &m_implementation);
+        if (MFX_ERR_NONE != mfx_res) {
+          mfx_res = MFX_ERR_UNSUPPORTED;
+          break;
+        }
+      } while(false);
+
+      if (MFX_ERR_NONE == mfx_res) {
+        m_dlh = std::move(hdl);
+        break;
+      } else {
+        Close();
+      }
+    }
+  }
+
+  return mfx_res;
+}
+
+mfxStatus LoaderCtx::Close()
+{
+  auto proc = (decltype(MFXClose)*)m_table[eMFXClose];
+  mfxStatus mfx_res = (proc)? (*proc)(m_session): MFX_ERR_NONE;
+
+  m_implementation = {};
+  m_version = {};
+  m_session = nullptr;
+  std::fill(std::begin(m_table), std::end(m_table), nullptr);
+  return mfx_res;
+}
+
+mfxStatus PluginCtx::Load(const mfxPluginUID& uid, mfxU32 version, const char *path)
+{
+  if (!path) {
+    return MFX_ERR_NULL_PTR;
+  }
+
+  mfxStatus mfx_res = MFX_ERR_NONE;
+  std::shared_ptr<void> hdl = make_dlopen(path, RTLD_LOCAL|RTLD_NOW);
+
+  if (!hdl) {
+    return MFX_ERR_NOT_FOUND;
+  }
+
+  do {
+    m_uid = uid;
+    m_create_plugin = (CreatePluginPtr)dlsym(hdl.get(), "CreatePlugin");
+    if (!m_create_plugin) {
+      mfx_res = MFX_ERR_NOT_FOUND;
+      break;
+    }
+
+    mfx_res = m_create_plugin(m_uid, &m_plugin);
+    if (MFX_ERR_NONE != mfx_res) {
+      break;
+    }
+
+    mfx_res = m_plugin.GetPluginParam(m_plugin.pthis, &m_plugin_param);
+    if (MFX_ERR_NONE != mfx_res) {
+      break;
+    }
+
+    mfx_res = MFXVideoUSER_Register((mfxSession)&m_loader, m_plugin_param.Type, &m_plugin);
+    if (MFX_ERR_NONE != mfx_res) {
+      break;
+    }
+  } while(false);
+
+  if (MFX_ERR_NONE == mfx_res) {
+    m_dlh = std::move(hdl);
+  } else {
+    m_uid = {};
+    m_create_plugin = nullptr;
+    m_plugin = {};
+    m_plugin_param = {};
+  }
+  return mfx_res;
+}
+
+mfxStatus PluginCtx::Unload()
+{
+  return MFXVideoUSER_Unregister((mfxSession)&m_loader, m_plugin_param.Type);
+}
+
+mfxStatus LoaderCtx::LoadPlugin(const mfxPluginUID &uid, mfxU32 version, const char *path)
+{
+  if (!path) return MFX_ERR_NULL_PTR;
+
+  std::lock_guard<std::mutex> lock(m_guard);
+
+  for (auto& it: m_plugins) {
+    if (it.getUID() == uid) return MFX_ERR_UNDEFINED_BEHAVIOR;
+  }
+
+  PluginCtx ctx(*this);
+
+  mfxStatus mfx_res = ctx.Load(uid, version, path);
+  if (MFX_ERR_NONE != mfx_res) {
+    return mfx_res;
+  }
+
+  m_plugins.emplace_back(std::move(ctx));
+
+  return MFX_ERR_NONE;
+}
+
+mfxStatus LoaderCtx::UnloadPlugin(const mfxPluginUID& uid)
+{
+  std::list<PluginCtx> ctx;
+  {
+    // We will move plugin ctx which we are going to delete to the
+    // array allocated on stack. In this way we will move bottom half
+    // of plugin ctx destroy, including potentially long dlclose, out
+    // of the mutex.
+    std::lock_guard<std::mutex> lock(m_guard);
+    auto it = std::find_if(std::begin(m_plugins), std::end(m_plugins),
+      [&uid](const PluginCtx& cur_ctx){ return cur_ctx.getUID() == uid; });
+
+    if (it != std::end(m_plugins)) {
+        mfxStatus mfx_res = it->Unload();
+        if (MFX_ERR_NONE != mfx_res) {
+          return mfx_res;
+        }
+        ctx.splice(ctx.end(), m_plugins, it);
+    }
+  }
+  return MFX_ERR_NONE;
+}
+
+} // namespace MFX
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+mfxStatus MFXInit(mfxIMPL impl, mfxVersion *ver, mfxSession *session)
+{
+    mfxInitParam par{};
+
+    par.Implementation = impl;
+    if (ver) {
+        par.Version = *ver;
+    } else {
+        par.Version = VERSION(MFX_VERSION_MAJOR, MFX_VERSION_MINOR);
+    }
+
+    return MFXInitEx(par, session);
+}
+
+mfxStatus MFXInitEx(mfxInitParam par, mfxSession *session)
+{
+  if (!session) return MFX_ERR_NULL_PTR;
+
+  try {
+    std::unique_ptr<MFX::LoaderCtx> loader;
+
+    loader.reset(new MFX::LoaderCtx{});
+
+    mfxStatus mfx_res = loader->Init(par);
+    if (MFX_ERR_NONE == mfx_res) {
+      *session = (mfxSession)loader.release();
+    } else {
+      *session = nullptr;
+    }
+
+    return mfx_res;
+  } catch(...) {
+    return MFX_ERR_MEMORY_ALLOC;
+  }
+}
+
+mfxStatus MFXClose(mfxSession session)
+{
+  if (!session) return MFX_ERR_INVALID_HANDLE;
+
+  try {
+    std::unique_ptr<MFX::LoaderCtx> loader((MFX::LoaderCtx*)session);
+    mfxStatus mfx_res = loader->Close();
+
+    if (mfx_res == MFX_ERR_UNDEFINED_BEHAVIOR) {
+      // It is possible, that there is an active child session.
+      // Can't unload library in this case.
+      loader.release();
+    }
+    return mfx_res;
+  } catch(...) {
+    return MFX_ERR_MEMORY_ALLOC;
+  }
+}
+
+mfxStatus MFXVideoUSER_Load(mfxSession session, const mfxPluginUID *uid, mfxU32 version)
+{
+  if (!session) return MFX_ERR_INVALID_HANDLE;
+  if (!uid) return MFX_ERR_NULL_PTR;
+
+  try {
+    MFX::LoaderCtx* loader = (MFX::LoaderCtx*)session;
+    std::string path;
+
+    {
+      std::lock_guard<std::mutex> lock(MFX::g_GlobalCtx.m_mutex);
+
+      auto find_uid = [](const mfxPluginUID& puid) {
+        return std::find_if(
+          MFX::g_GlobalCtx.m_plugins.begin(),
+          MFX::g_GlobalCtx.m_plugins.end(),
+          [&puid](MFX::PluginInfo& item){ return item.getUID() == puid; }
+          );
+      };
+
+      if (MFX::g_GlobalCtx.m_plugins.empty()) {
+        // Parsing plugin configuration file and loading information of
+        // _all_ plugins registered on the system.
+        parse(MFX_PLUGINS_DIR "/plugins.cfg", MFX::g_GlobalCtx.m_plugins);
+      }
+
+      // search for plugin description
+      auto it = find_uid(*uid);
+      if (it == MFX::g_GlobalCtx.m_plugins.end()) {
+        return MFX_ERR_NOT_FOUND;
+      }
+
+      path = it->getPath();
+    }
+
+    return loader->LoadPlugin(*uid, version, path.c_str());
+  } catch(...) {
+    return MFX_ERR_MEMORY_ALLOC;
+  }
+}
+
+mfxStatus MFXVideoUSER_LoadByPath(mfxSession session, const mfxPluginUID *uid, mfxU32 version, const mfxChar *path, mfxU32 /*len*/)
+{
+  if (!session) return MFX_ERR_INVALID_HANDLE;
+  if (!uid) return MFX_ERR_NULL_PTR;
+
+  try {
+    MFX::LoaderCtx* loader = (MFX::LoaderCtx*)session;
+    return loader->LoadPlugin(*uid, version, path);
+  } catch(...) {
+    return MFX_ERR_MEMORY_ALLOC;
+  }
+}
+
+mfxStatus MFXVideoUSER_UnLoad(mfxSession session, const mfxPluginUID *uid)
+{
+  if (!session) return MFX_ERR_INVALID_HANDLE;
+  if (!uid) return MFX_ERR_NULL_PTR;
+
+  try {
+    MFX::LoaderCtx* loader = (MFX::LoaderCtx*)session;
+    return loader->UnloadPlugin(*uid);
+  } catch(...) {
+    return MFX_ERR_MEMORY_ALLOC;
+  }
+}
+
+mfxStatus MFXAudioUSER_Load(mfxSession session, const mfxPluginUID *uid, mfxU32 version)
+{
+  return MFX_ERR_NOT_FOUND;
+}
+
+mfxStatus MFXAudioUSER_UnLoad(mfxSession session, const mfxPluginUID *uid)
+{
+  return MFX_ERR_NOT_FOUND;
+}
+
+mfxStatus MFXJoinSession(mfxSession session, mfxSession child_session)
+{
+  if (!session || !child_session) {
+    return MFX_ERR_INVALID_HANDLE;
+  }
+
+  MFX::LoaderCtx* loader = (MFX::LoaderCtx*)session;
+  MFX::LoaderCtx* child_loader = (MFX::LoaderCtx*)child_session;
+
+  if (loader->getVersion().Version != child_loader->getVersion().Version) {
+    return MFX_ERR_INVALID_HANDLE;
+  }
+
+  auto proc = (decltype(MFXJoinSession)*)loader->getFunction(MFX::eMFXJoinSession);
+  if (!proc) {
+    return MFX_ERR_INVALID_HANDLE;
+  }
+
+  return (*proc)(loader->getSession(), child_loader->getSession());
+}
+
+mfxStatus MFXCloneSession(mfxSession session, mfxSession *clone)
+{
+  if (!session) return MFX_ERR_INVALID_HANDLE;
+
+  MFX::LoaderCtx* loader = (MFX::LoaderCtx*)session;
+  // initialize the clone session
+  mfxVersion version = loader->getVersion();
+  mfxStatus mfx_res = MFXInit(loader->getImpl(), &version, clone);
+  if (MFX_ERR_NONE != mfx_res) {
+    return mfx_res;
+  }
+
+  // join the sessions
+  mfx_res = MFXJoinSession(session, *clone);
+  if (MFX_ERR_NONE != mfx_res) {
+    MFXClose(*clone);
+    *clone = nullptr;
+    return mfx_res;
+  }
+
+  return MFX_ERR_NONE;
+}
+
+#undef FUNCTION
+#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list) \
+return_value MFX_CDECL func_name formal_param_list \
+{ \
+    /* get the function's address and make a call */ \
+    if (!session) return MFX_ERR_INVALID_HANDLE; \
+    \
+    MFX::LoaderCtx *loader = (MFX::LoaderCtx*) session; \
+    \
+    auto proc = (decltype(func_name)*)loader->getFunction(MFX::e##func_name); \
+    if (!proc) return MFX_ERR_INVALID_HANDLE; \
+    \
+    /* get the real session pointer */ \
+    session = loader->getSession(); \
+    /* pass down the call */ \
+    return (*proc) actual_param_list; \
+}
+
+#include "mfxvideo_functions.h"
+
+#undef FUNCTION
+#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list)
+// as of now we don't expose audio support, but we still want to check certain
+// consistency of mfxaudio_functions.h file, so include it here
+
+#include "mfxaudio_functions.h"
+
+#ifdef __cplusplus
+}
+#endif
diff --git a/api/mfx_dispatch/linux/mfxloader.h b/api/mfx_dispatch/linux/mfxloader.h
new file mode 100644
index 0000000..1113347
--- /dev/null
+++ b/api/mfx_dispatch/linux/mfxloader.h
@@ -0,0 +1,125 @@
+// Copyright (c) 2017-2018 Intel Corporation
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in all
+// copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+// SOFTWARE.
+
+#ifndef __MFXLOADER_H__
+#define __MFXLOADER_H__
+
+#include <limits.h>
+
+#include <sstream>
+#include <string>
+
+#include "mfxdefs.h"
+#include "mfxplugin.h"
+
+inline bool operator == (const mfxPluginUID &lhs, const mfxPluginUID & rhs)
+{
+    return !memcmp(lhs.Data, rhs.Data, sizeof(mfxPluginUID));
+}
+
+inline bool operator != (const mfxPluginUID &lhs, const mfxPluginUID & rhs)
+{
+    return !(lhs == rhs);
+}
+
+inline bool operator < (const mfxVersion &lhs, const mfxVersion & rhs)
+{
+    return (lhs.Major == rhs.Major) && (lhs.Minor < rhs.Minor);
+}
+
+inline bool operator <= (const mfxVersion &lhs, const mfxVersion & rhs)
+{
+    return (lhs.Major == rhs.Major) && (lhs.Minor <= rhs.Minor);
+}
+
+namespace MFX {
+
+class PluginInfo : public mfxPluginParam
+{
+public:
+  PluginInfo()
+    : mfxPluginParam()
+    , m_parsed()
+    , m_path()
+    , m_default()
+  {}
+
+  inline bool isValid() {
+    return m_parsed;
+  }
+
+  inline mfxPluginUID getUID() {
+    return PluginUID;
+  }
+
+  inline std::string getPath() {
+    return std::string(m_path);
+  }
+
+  void Load(char* name, char* value);
+  void Print();
+
+private:
+  enum
+  {
+    PARSED_TYPE        = 0x1,
+    PARSED_CODEC_ID    = 0x2,
+    PARSED_UID         = 0x4,
+    PARSED_PATH        = 0x8,
+    PARSED_DEFAULT     = 0x10,
+    PARSED_VERSION     = 0x20,
+    PARSED_API_VERSION = 0x40,
+    PARSED_NAME        = 0x80,
+  };
+
+  mfxU32 m_parsed;
+
+  char m_path[PATH_MAX];
+  bool m_default;
+};
+
+void parse(const char* file_name, std::list<PluginInfo>& all_records);
+
+static std::string printUID(const mfxPluginUID& uid)
+{
+  std::stringstream ss;
+  ss << std::hex;
+  for (auto c: uid.Data) ss << static_cast<unsigned>(c);
+  return ss.str();
+}
+
+static std::string printCodecId(mfxU32 id)
+{
+  uint8_t* data = reinterpret_cast<uint8_t*>(&id);
+  std::stringstream ss;
+  for (size_t i=0; i < sizeof(id); ++i) ss << data[i];
+  return ss.str();
+}
+
+static void print(std::list<PluginInfo>& plugins)
+{
+  for (auto& plg: plugins) {
+    plg.Print();
+  }
+}
+
+} // namespace MFX
+
+#endif
diff --git a/api/mfx_dispatch/linux/mfxparser.cpp b/api/mfx_dispatch/linux/mfxparser.cpp
new file mode 100644
index 0000000..a17d0f6
--- /dev/null
+++ b/api/mfx_dispatch/linux/mfxparser.cpp
@@ -0,0 +1,175 @@
+// Copyright (c) 2017-2018 Intel Corporation
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in all
+// copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+// SOFTWARE.
+
+#include <ctype.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <list>
+
+#include "mfxloader.h"
+
+namespace MFX {
+
+static bool parseGUID(const char* src, mfxPluginUID* uid)
+{
+    mfxPluginUID plugin_uid{};
+    mfxU8* p = uid->Data;
+
+    int res = sscanf(src,
+        "%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx",
+        p, p + 1, p + 2, p + 3, p + 4, p + 5, p + 6, p + 7, 
+        p + 8, p + 9, p + 10, p + 11, p + 12, p + 13, p + 14, p + 15);
+
+    if (res != sizeof(uid)) {
+        return false;
+    }
+
+    *uid = plugin_uid;
+    return true;
+}
+
+void PluginInfo::Load(char* name, char* value)
+{
+#ifdef LINUX64
+    #define FIELD_FileName "FileName64"
+#else
+    #define FIELD_FileName "FileName32"
+#endif
+
+    if (!strcmp(name, "Type")) {
+        Type = atoi(value);
+        m_parsed |= PARSED_TYPE;
+    } else if (!strcmp(name, "CodecID")) {
+        const int fourccLen = 4;
+        if (strlen(value) == 0 || strlen(value) > fourccLen)
+            return;
+
+        CodecId = MFX_MAKEFOURCC(' ',' ',' ',' ');
+        char* id = reinterpret_cast<char*>(&CodecId);
+        for (size_t i = 0; i < strlen(value); ++i)
+            id[i] = value[i];
+
+        m_parsed |= PARSED_CODEC_ID;
+    } else if (!strcmp(name, "GUID")) {
+        if (!parseGUID(value, &PluginUID))
+            return;
+
+        m_parsed |= PARSED_UID;
+    } else if (!strcmp(name, "Path") || !strcmp(name, FIELD_FileName)) {
+        // strip quotes
+        char* p = value + strlen(value) - 1;
+        if (*value == '"' && *p == '"') {
+            *p = '\0';
+            ++value;
+        }
+        if (strlen(m_path) + strlen("/") + strlen(value) >= PATH_MAX)
+            return;
+        strcpy(m_path + strlen(m_path), "/"); // TODO: looks to be wrong
+        strcpy(m_path + strlen(m_path), value);
+        m_parsed |= PARSED_PATH;
+    } else if (0 == strcmp(name, "Default")) {
+        m_default = (0 != atoi(value));
+        m_parsed |= PARSED_DEFAULT;
+    } else if (0 == strcmp(name, "PluginVersion")) {
+        PluginVersion = atoi(value);
+        m_parsed |= PARSED_VERSION;
+    } else if (0 == strcmp(name, "APIVersion")) {
+        APIVersion.Version = atoi(value);
+        m_parsed |= PARSED_API_VERSION;
+    }
+}
+
+void PluginInfo::Print()
+{
+  printf("[%s]\n", printUID(PluginUID).c_str());
+  printf("  GUID=%s\n", printUID(PluginUID).c_str());
+  printf("  PluginVersion=%d\n", PluginVersion);
+  printf("  APIVersion=%d\n", APIVersion.Version);
+  printf("  Path=%s\n", m_path);
+  printf("  Type=%d\n", Type);
+  printf("  CodecID=%s\n", printCodecId(CodecId).c_str());
+  printf("  Default=%d\n", m_default);
+}
+
+// strip tailing spaces
+static inline char* strip(char* s)
+{
+    char* p = s + strlen(s);
+    while (p > s && isspace(*--p)) *p = 0;
+    return s;
+}
+
+// skip initial spaces
+static inline char* skip(char* s)
+{
+    while (*s && isspace(*s)) ++s;
+    return s;
+}
+
+void parse(const char* file_name, std::list<PluginInfo>& plugins)
+{
+  char line[PATH_MAX];
+  PluginInfo plg;
+
+  FILE* file = fopen(file_name, "r");
+  if (!file)
+    return;
+
+  while(fgets(line, PATH_MAX, file)) {
+    char* p = skip(line);
+
+    if (strchr(";#", *p)) {
+      // skip comments
+    } else if (*p == '[') {
+      if (plg.isValid()) {
+        plugins.push_back(std::move(plg));
+        plg = PluginInfo{};
+      }
+    } else {
+      char* name = p;
+      char* value = p;
+
+      while(*value && !strchr("=:;#", *value)) ++value;
+      if (*value && strchr("=:", *value)) {
+        *value++ = '\0';
+      }
+
+      p = value;
+      while (*p && !strchr(";#", *p)) ++p;
+      if (*p != '\0') {
+        *p = '\0';
+      }
+
+      name = strip(name);
+      value = skip(strip(value));
+
+      if (*name != '\0' && *value != '\0') {
+        plg.Load(name, value);
+      }
+    }
+  }
+  fclose(file);
+
+  //print(plugins); // for debug
+}
+
+} // namespace MFX
diff --git a/api/opensource/mfx_dispatch/include/mfx_exposed_functions_list.h b/api/mfx_dispatch/linux/mfxvideo_functions.h
similarity index 94%
rename from api/opensource/mfx_dispatch/include/mfx_exposed_functions_list.h
rename to api/mfx_dispatch/linux/mfxvideo_functions.h
index dc22c54..06b7fad 100644
--- a/api/opensource/mfx_dispatch/include/mfx_exposed_functions_list.h
+++ b/api/mfx_dispatch/linux/mfxvideo_functions.h
@@ -1,15 +1,15 @@
 // Copyright (c) 2017 Intel Corporation
-// 
+//
 // Permission is hereby granted, free of charge, to any person obtaining a copy
 // of this software and associated documentation files (the "Software"), to deal
 // in the Software without restriction, including without limitation the rights
 // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 // copies of the Software, and to permit persons to whom the Software is
 // furnished to do so, subject to the following conditions:
-// 
+//
 // The above copyright notice and this permission notice shall be included in all
 // copies or substantial portions of the Software.
-// 
+//
 // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
@@ -38,6 +38,9 @@
 // API version where a function is added. Minor value should precedes the major value
 #define API_VERSION {{0, 1}}
 
+FUNCTION(mfxStatus, MFXQueryIMPL, (mfxSession session, mfxIMPL *impl), (session, impl))
+FUNCTION(mfxStatus, MFXQueryVersion, (mfxSession session, mfxVersion *version), (session, version))
+
 // CORE interface functions
 FUNCTION(mfxStatus, MFXVideoCORE_SetBufferAllocator, (mfxSession session, mfxBufferAllocator *allocator), (session, allocator))
 FUNCTION(mfxStatus, MFXVideoCORE_SetFrameAllocator, (mfxSession session, mfxFrameAllocator *allocator), (session, allocator))
@@ -90,6 +93,10 @@ FUNCTION(mfxStatus, MFXVideoVPP_RunFrameVPPAsync, (mfxSession session, mfxFrameS
 
 #define API_VERSION {{1, 1}}
 
+FUNCTION(mfxStatus, MFXDisjoinSession, (mfxSession session), (session))
+FUNCTION(mfxStatus, MFXSetPriority, (mfxSession session, mfxPriority priority), (session, priority))
+FUNCTION(mfxStatus, MFXGetPriority, (mfxSession session, mfxPriority *priority), (session, priority))
+
 FUNCTION(mfxStatus, MFXVideoUSER_Register, (mfxSession session, mfxU32 type, const mfxPlugin *par), (session, type, par))
 FUNCTION(mfxStatus, MFXVideoUSER_Unregister, (mfxSession session, mfxU32 type), (session, type))
 FUNCTION(mfxStatus, MFXVideoUSER_ProcessFrameAsync, (mfxSession session, const mfxHDL *in, mfxU32 in_num, const mfxHDL *out, mfxU32 out_num, mfxSyncPoint *syncp), (session, in, in_num, out, out_num, syncp))
@@ -138,4 +145,4 @@ FUNCTION(mfxStatus, MFXVideoPAK_GetVideoParam, (mfxSession session, mfxVideoPara
 FUNCTION(mfxStatus, MFXVideoCORE_QueryPlatform, (mfxSession session, mfxPlatform* platform), (session, platform))
 FUNCTION(mfxStatus, MFXVideoUSER_GetPlugin, (mfxSession session, mfxU32 type, mfxPlugin *par), (session, type, par))
 
-#undef API_VERSION
\ No newline at end of file
+#undef API_VERSION
diff --git a/api/opensource/mfx_dispatch/pkg-config-shared.pc.cmake b/api/mfx_dispatch/linux/pkg-config-shared.pc.cmake
similarity index 100%
rename from api/opensource/mfx_dispatch/pkg-config-shared.pc.cmake
rename to api/mfx_dispatch/linux/pkg-config-shared.pc.cmake
diff --git a/api/opensource/mfx_dispatch/pkg-config.pc.cmake b/api/mfx_dispatch/linux/pkg-config.pc.cmake
similarity index 100%
rename from api/opensource/mfx_dispatch/pkg-config.pc.cmake
rename to api/mfx_dispatch/linux/pkg-config.pc.cmake
diff --git a/api/opensource/mfx_dispatch/include/intel_api_factory.h b/api/opensource/mfx_dispatch/include/intel_api_factory.h
deleted file mode 100644
index 0be5dcb..0000000
--- a/api/opensource/mfx_dispatch/include/intel_api_factory.h
+++ /dev/null
@@ -1,33 +0,0 @@
-// Copyright (c) 2018 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#pragma once
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif /* __cplusplus */
-
-HRESULT APIENTRY InitialiseMediaSession(_Out_ HANDLE* handle, _In_ LPVOID lpParam, _Reserved_ LPVOID lpReserved);
-HRESULT APIENTRY DisposeMediaSession(_In_ const HANDLE handle);
-
-#ifdef __cplusplus
-}
-#endif /* __cplusplus */
diff --git a/api/opensource/mfx_dispatch/include/mfx_critical_section.h b/api/opensource/mfx_dispatch/include/mfx_critical_section.h
deleted file mode 100644
index 376dd30..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_critical_section.h
+++ /dev/null
@@ -1,66 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#if !defined(__MFX_CRITICAL_SECTION_H)
-#define __MFX_CRITICAL_SECTION_H
-
-#include <mfxdefs.h>
-
-namespace MFX
-{
-
-// Just set "critical section" instance to zero for initialization.
-typedef volatile mfxL32 mfxCriticalSection;
-
-// Enter the global critical section.
-void mfxEnterCriticalSection(mfxCriticalSection *pCSection);
-
-// Leave the global critical section.
-void mfxLeaveCriticalSection(mfxCriticalSection *pCSection);
-
-class MFXAutomaticCriticalSection
-{
-public:
-    // Constructor
-    explicit MFXAutomaticCriticalSection(mfxCriticalSection *pCSection)
-    {
-        m_pCSection = pCSection;
-        mfxEnterCriticalSection(m_pCSection);
-    }
-
-    // Destructor
-    ~MFXAutomaticCriticalSection()
-    {
-        mfxLeaveCriticalSection(m_pCSection);
-    }
-
-protected:
-    // Pointer to a critical section
-    mfxCriticalSection *m_pCSection;
-
-private:
-    // unimplemented by intent to make this class non-copyable
-    MFXAutomaticCriticalSection(const MFXAutomaticCriticalSection &);
-    void operator=(const MFXAutomaticCriticalSection &);
-};
-
-} // namespace MFX
-
-#endif // __MFX_CRITICAL_SECTION_H
diff --git a/api/opensource/mfx_dispatch/include/mfx_dispatcher.h b/api/opensource/mfx_dispatch/include/mfx_dispatcher.h
deleted file mode 100644
index f20d465..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_dispatcher.h
+++ /dev/null
@@ -1,219 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#if !defined(__MFX_DISPATCHER_H)
-#define __MFX_DISPATCHER_H
-
-#include <mfxvideo.h>
-#include <mfxaudio.h>
-#include <mfxplugin.h>
-#include <stddef.h>
-#include "mfx_dispatcher_defs.h"
-#include "mfx_load_plugin.h"
-#include "mfxenc.h"
-#include "mfxpak.h"
-
-#define INTEL_VENDOR_ID 0x8086
-
-mfxStatus MFXQueryVersion(mfxSession session, mfxVersion *version);
-
-enum
-{
-    // to avoid code changing versions are just inherited
-    // from the API header file.
-    DEFAULT_API_VERSION_MAJOR   = MFX_VERSION_MAJOR,
-    DEFAULT_API_VERSION_MINOR   = MFX_VERSION_MINOR
-};
-
-//
-// declare functions' integer identifiers.
-//
-
-#undef FUNCTION
-#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list) \
-    e##func_name,
-
-enum eFunc
-{
-    eMFXInit,
-    eMFXClose,
-    eMFXQueryIMPL,
-    eMFXQueryVersion,
-    eMFXJoinSession,
-    eMFXDisjoinSession,
-    eMFXCloneSession,
-    eMFXSetPriority,
-    eMFXGetPriority,
-    eMFXInitEx,
-#include "mfx_exposed_functions_list.h"
-    eVideoFuncTotal
-};
-
-enum ePluginFunc
-{
-    eMFXVideoUSER_Load,
-    eMFXVideoUSER_LoadByPath,
-    eMFXVideoUSER_UnLoad,
-    eMFXAudioUSER_Load,
-    eMFXAudioUSER_UnLoad,
-    ePluginFuncTotal
-};
-
-enum eAudioFunc
-{
-    eFakeAudioEnum = eMFXGetPriority,
-#include "mfxaudio_exposed_functions_list.h"
-    eAudioFuncTotal
-};
-
-// declare max buffer length for regsitry key name
-enum
-{
-    MFX_MAX_REGISTRY_KEY_NAME = 256
-};
-
-// declare the maximum DLL path
-enum
-{
-    MFX_MAX_DLL_PATH = 1024
-};
-
-// declare library's implementation types
-enum eMfxImplType
-{
-    MFX_LIB_HARDWARE            = 0,
-    MFX_LIB_SOFTWARE            = 1,
-    MFX_LIB_PSEUDO              = 2,
-
-    MFX_LIB_IMPL_TYPES
-};
-
-// declare dispatcher's version
-enum
-{
-    MFX_DISPATCHER_VERSION_MAJOR = 1,
-    MFX_DISPATCHER_VERSION_MINOR = 2
-};
-
-struct _mfxSession
-{
-    // A real handle from MFX engine passed to a called function
-    mfxSession session;
-
-    mfxFunctionPointer callTable[eVideoFuncTotal];
-    mfxFunctionPointer callPlugInsTable[ePluginFuncTotal];
-    mfxFunctionPointer callAudioTable[eAudioFuncTotal];
-
-    // Current library's implementation (exact implementation)
-    mfxIMPL impl;
-};
-
-// declare a dispatcher's handle
-struct MFX_DISP_HANDLE : public _mfxSession
-{
-    // Default constructor
-    MFX_DISP_HANDLE(const mfxVersion requiredVersion);
-    // Destructor
-    ~MFX_DISP_HANDLE(void);
-
-    // Load the library's module
-    mfxStatus LoadSelectedDLL(const msdk_disp_char *pPath, eMfxImplType implType, mfxIMPL impl, mfxIMPL implInterface, mfxInitParam &par);
-    // Unload the library's module
-    mfxStatus UnLoadSelectedDLL(void);
-
-    // Close the handle
-    mfxStatus Close(void);
-
-    // NOTE: changing order of struct's members can make different version of
-    // dispatchers incompatible. Think of different modules (e.g. MFT filters)
-    // within a single application.
-
-    // Library's implementation type (hardware or software)
-    eMfxImplType implType;
-    // Current library's VIA interface
-    mfxIMPL implInterface;
-    // Dispatcher's version. If version is 1.1 or lower, then old dispatcher's
-    // architecture is used. Otherwise it means current dispatcher's version.
-    mfxVersion dispVersion;
-    // Required API version of session initialized
-    const mfxVersion apiVersion;
-    // Actual library API version
-    mfxVersion actualApiVersion;
-    // Status of loaded dll
-    mfxStatus loadStatus;
-    // Resgistry subkey name for windows version
-    msdk_disp_char subkeyName[MFX_MAX_REGISTRY_KEY_NAME];
-    // Storage ID for windows version
-    int storageID;
-
-    // Library's module handle
-    mfxModuleHandle hModule;
-
-    MFX::MFXPluginStorage pluginHive;
-    MFX::MFXPluginFactory pluginFactory;
-
-private:
-    // Declare assignment operator and copy constructor to prevent occasional assignment
-    MFX_DISP_HANDLE(const MFX_DISP_HANDLE &);
-    MFX_DISP_HANDLE & operator = (const MFX_DISP_HANDLE &);
-
-};
-
-// declare comparison operator
-inline
-bool operator == (const mfxVersion &one, const mfxVersion &two)
-{
-    return (one.Version == two.Version);
-
-} // bool operator == (const mfxVersion &one, const mfxVersion &two)
-
-inline
-bool operator < (const mfxVersion &one, const mfxVersion &two)
-{
-    return (one.Major == two.Major) && (one.Minor < two.Minor);
-
-} // bool operator < (const mfxVersion &one, const mfxVersion &two)
-
-inline
-bool operator <= (const mfxVersion &one, const mfxVersion &two)
-{
-    return (one == two) || (one < two);
-} // bool operator <= (const mfxVersion &one, const mfxVersion &two)
-
-
-//
-// declare a table with functions descriptions
-//
-
-typedef
-struct FUNCTION_DESCRIPTION
-{
-    // Literal function's name
-    const char *pName;
-    // API version when function appeared first time
-    mfxVersion apiVersion;
-} FUNCTION_DESCRIPTION;
-
-extern const
-FUNCTION_DESCRIPTION APIFunc[eVideoFuncTotal];
-
-extern const
-FUNCTION_DESCRIPTION APIAudioFunc[eAudioFuncTotal];
-#endif // __MFX_DISPATCHER_H
diff --git a/api/opensource/mfx_dispatch/include/mfx_dispatcher_defs.h b/api/opensource/mfx_dispatch/include/mfx_dispatcher_defs.h
deleted file mode 100644
index 1b0c1ed..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_dispatcher_defs.h
+++ /dev/null
@@ -1,64 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#pragma once
-#include "mfxdefs.h"
-#include <cstring>
-#include <cstdio>
-
-#if defined(MFX_DISPATCHER_LOG)
-#include <string>
-#include <string.h>
-#endif
-
-#define MAX_PLUGIN_PATH 4096
-#define MAX_PLUGIN_NAME 4096
-
-typedef char msdk_disp_char;
-//#define msdk_disp_char_cpy_s(to, to_size, from) strcpy(to, from)
-
-inline void msdk_disp_char_cpy_s(char * to, size_t to_size, const char * from)
-{
-    snprintf(to, to_size, "%s", from);
-}
-
-#if defined(MFX_DISPATCHER_LOG)
-#define MSDK2WIDE(x) getWideString(x).c_str()
-
-inline std::wstring getWideString(const char * string)
-{
-    size_t len = strlen(string);
-    return std::wstring(string, string + len);
-}
-#else
-    #define MSDK2WIDE(x) x  
-#endif
-
-
-#if defined(__GNUC__)
-#define  sscanf_s  sscanf
-#define  swscanf_s swscanf
-#endif
-
-
-// declare library module's handle
-typedef void * mfxModuleHandle;
-
-typedef void (MFX_CDECL * mfxFunctionPointer)(void);
diff --git a/api/opensource/mfx_dispatch/include/mfx_dispatcher_log.h b/api/opensource/mfx_dispatch/include/mfx_dispatcher_log.h
deleted file mode 100644
index d67598f..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_dispatcher_log.h
+++ /dev/null
@@ -1,240 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#if !defined(__MFX_DISPATCHER_LOG_H)
-#define __MFX_DISPATCHER_LOG_H
-
-//////////////////////////////////////////////////////////////////////////
-//dispatcher log (DL) level
-#define DL_INFO                               1
-#define DL_WRN                                2
-#define DL_ERROR                              4
-#define DL_LOADED_LIBRARY                     8
-//////////////////////////////////////////////////////////////////////////
-//opcodes used only in events
-enum
-{
-    DL_EVENT_START  = 1,
-    DL_EVENT_STOP,
-    DL_EVENT_MSG
-};
-//////////////////////////////////////////////////////////////////////////
-#define DL_SINK_NULL         0
-#define DL_SINK_PRINTF       1
-#define DL_SINK_IMsgHandler  2
-
-#define MFXFOURCCTYPE() "%c%c%c%c"
-#define ZERO_OR_SPACE(value) ((0==(value)) ? '0' : (value))
-#define MFXU32TOFOURCC(mfxu32)\
-    ZERO_OR_SPACE((char)(mfxu32 & 0xFF)), \
-    ZERO_OR_SPACE((char)((mfxu32 >> 8) & 0xFF)),\
-    ZERO_OR_SPACE((char)((mfxu32 >> 16) & 0xFF)),\
-    ZERO_OR_SPACE((char)((mfxu32 >> 24) & 0xFF))
-
-#define MFXGUIDTYPE() "%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X-%X"
-
-#define MFXGUIDTOHEX(guid)\
-    (guid)->Data[0],\
-    (guid)->Data[1],\
-    (guid)->Data[2],\
-    (guid)->Data[3],\
-    (guid)->Data[4],\
-    (guid)->Data[5],\
-    (guid)->Data[6],\
-    (guid)->Data[7],\
-    (guid)->Data[8],\
-    (guid)->Data[9],\
-    (guid)->Data[10],\
-    (guid)->Data[11],\
-    (guid)->Data[12],\
-    (guid)->Data[13],\
-    (guid)->Data[14],\
-    (guid)->Data[15]
-
-#if defined(MFX_DISPATCHER_LOG)
-
-//---------------------------setup section------------------------
-//using of formating instead of variadic macro with NULL end, 
-//leads to more flexibility in format, however constructing string 
-//with vsprintf_s is a time wasting
-#define DISPATCHER_LOG_USE_FORMATING 1
-
-//creates unique object, event guid registration, factories on heap
-//heap reduce stack allocation and reduce reservation time at startup
-//is a vital if mediasdk wont use
-#define DISPATCHER_LOG_HEAP_SINGLETONES
-
-
-#include <stdio.h>
-#include <stdarg.h>
-
-//callback interface for intercept logging messages
-class IMsgHandler
-{
-public:
-    virtual ~IMsgHandler(){}
-    virtual void Write(int level, int opcode, const char * msg, va_list argptr) = 0;
-};
-
-#define DISPATCHER_LOG(lvl, opcode, str)
-#define DISPATCHER_LOG_OPERATION(operation)
-
-#define __name_from_line( name, line ) name ## line
-#define _name_from_line( name , line) __name_from_line( name, line ) 
-#define name_from_line( name ) _name_from_line( name, __LINE__) 
-
-
-#define DISPATCHER_LOG_AUTO(lvl, msg)\
-    DispatchLogBlockHelper name_from_line(__auto_log_)(lvl); name_from_line(__auto_log_).Write msg;
-
-#include <memory>
-#include <map>
-#include <list>
-#include <string>
-
-template <class T> 
-class DSSingleTone
-{
-public:
-    template <class TParam1>
-    inline static T & get(TParam1 par1)
-    {
-        T * pstored;
-        if (NULL == (pstored = store_or_load()))
-        {
-            return *store_or_load(new T(par1));
-        }
-        return *pstored;    
-    }
-
-    inline static T & get()
-    {
-        T * pstored;
-        if (NULL == (pstored = store_or_load()))
-        {
-            return *store_or_load(new T());
-        }
-        return *pstored;
-    }
-private:
-    //if obj == NULL, then it load 
-    //if obj != NULL then it store obj
-    inline static T * store_or_load(T * obj = NULL)
-    {
-        static std::unique_ptr<T> instance;
-        if (NULL != obj)
-        {
-            instance.reset(obj);
-        }
-        return instance.get();
-    }
-};
-
-class DispatchLog 
-    : public DSSingleTone<DispatchLog>
-{
-    friend class DSSingleTone<DispatchLog>;
-    std::list<IMsgHandler*>m_Recepients;
-    int m_DispatcherLogSink;
-
-public:
-    //sets current sink
-    void   SetSink(int nsink, IMsgHandler *pHandler);
-    void   AttachSink(int nsink, IMsgHandler *pHandler);
-    void   DetachSink(int nsink, IMsgHandler *pHandler);
-    void   ExchangeSink(int nsink, IMsgHandler *pOld, IMsgHandler *pNew);
-    void   DetachAllSinks();
-    void   Write(int level, int opcode, const char * msg, va_list argptr);
-    
-protected:
-    DispatchLog();
-};
-
-//allows to push arguments on the stack without declaring them as function parameters
-struct  DispatcherLogBracketsHelper
-{
-    int  m_level;
-    int  m_opcode;
-    DispatcherLogBracketsHelper(int level, int opcode)
-        :m_level(level)
-        ,m_opcode(opcode)
-    {
-    }
-    void Write(const char * str, ...);
-} ;
-
-//auto log on ctor dtor
-struct DispatchLogBlockHelper
-{
-    int  m_level;
-    void Write(const char * str, ...);
-    DispatchLogBlockHelper (int level)
-        : m_level(level)
-    {
-    }
-    ~DispatchLogBlockHelper();
-};
-
-//----utility sinks-----
-
-#if defined(DISPATCHER_LOG_REGISTER_FILE_WRITER)
-class FileSink 
-    : public DSSingleTone<FileSink>
-    , public IMsgHandler
-{
-    friend class DSSingleTone<FileSink>;
-public:
-    virtual void Write(int level, int opcode, const char * msg, va_list argptr);
-    ~FileSink()
-    {
-        if (NULL != m_hdl)
-            fclose(m_hdl);
-    }
-private:
-    FILE * m_hdl;
-    FileSink(const std::string & log_file)
-    {
-        m_hdl = fopen(log_file.c_str(), "a");
-    }
-    
-};
-#endif
-
-//-----utility functions
-//since they are not called outside of macro we can define them here
-std::string DispatcherLog_GetMFXImplString(int impl);
-const char *DispatcherLog_GetMFXStatusString(int sts);
-
-#else // !defined(MFX_DISPATCHER_LOG)
-
-    #define DISPATCHER_LOG(level, opcode, message)
-    #define DISPATCHER_LOG_AUTO(level, message)
-    #define DISPATCHER_LOG_OPERATION(operation) 
-
-#endif// !defined(MFX_DISPATCHER_LOG)
-
-
-#define DISPATCHER_LOG_INFO(msg)    DISPATCHER_LOG(DL_INFO, DL_EVENT_MSG, msg)
-#define DISPATCHER_LOG_WRN(msg)     DISPATCHER_LOG(DL_WRN, DL_EVENT_MSG, msg)
-#define DISPATCHER_LOG_ERROR(msg)   DISPATCHER_LOG(DL_ERROR, DL_EVENT_MSG, msg)
-#define DISPATCHER_LOG_LIBRARY(msg) DISPATCHER_LOG(DL_LOADED_LIBRARY, DL_EVENT_MSG, msg)
-#define DISPATCHER_LOG_BLOCK(msg)   DISPATCHER_LOG_AUTO(DL_INFO, msg)
-
-#endif // !defined(__MFX_DISPATCHER_LOG_H)
diff --git a/api/opensource/mfx_dispatch/include/mfx_dxva2_device.h b/api/opensource/mfx_dispatch/include/mfx_dxva2_device.h
deleted file mode 100644
index 38face2..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_dxva2_device.h
+++ /dev/null
@@ -1,142 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#if !defined(__MFX_DXVA2_DEVICE_H)
-#define __MFX_DXVA2_DEVICE_H
-
-
-#include <mfxdefs.h>
-
-#ifdef DXVA2DEVICE_LOG
-#include <stdio.h>
-#define DXVA2DEVICE_TRACE(expr) printf expr;
-#define DXVA2DEVICE_TRACE_OPERATION(expr) expr;
-#else
-#define DXVA2DEVICE_TRACE(expr)
-#define DXVA2DEVICE_TRACE_OPERATION(expr)
-#endif
-
-namespace MFX
-{
-
-class DXDevice
-{
-public:
-    // Default constructor
-    DXDevice(void);
-    // Destructor
-    virtual
-    ~DXDevice(void) = 0;
-
-    // Initialize device using DXGI 1.1 or VAAPI interface
-    virtual
-    bool Init(const mfxU32 adapterNum) = 0;
-
-    // Obtain graphic card's parameter
-    mfxU32 GetVendorID(void) const;
-    mfxU32 GetDeviceID(void) const;
-    mfxU64 GetDriverVersion(void) const;
-    mfxU64 GetLUID(void) const;
-
-    // Provide the number of available adapters
-    mfxU32 GetAdapterCount(void) const;
-
-    // Close the object
-    virtual
-    void Close(void);
-
-    // Load the required DLL module
-    void LoadDLLModule(const wchar_t *pModuleName);
-
-protected:
-
-    // Free DLL module
-    void UnloadDLLModule(void);
-
-
-    // Number of adapters available
-    mfxU32 m_numAdapters;
-
-    // Vendor ID
-    mfxU32 m_vendorID;
-    // Device ID
-    mfxU32 m_deviceID;
-    // x.x.x.x each x of two bytes
-    mfxU64 m_driverVersion;
-    // LUID
-    mfxU64 m_luid;
-
-private:
-    // unimplemented by intent to make this class and its descendants non-copyable
-    DXDevice(const DXDevice &);
-    void operator=(const DXDevice &);
-};
-
-
-
-class DXVA2Device
-{
-public:
-    // Default constructor
-    DXVA2Device(void);
-    // Destructor
-    ~DXVA2Device(void);
-
-    // Initialize device using D3D v9 interface
-    bool InitD3D9(const mfxU32 adapterNum);
-
-    // Initialize device using DXGI 1.1 interface
-    bool InitDXGI1(const mfxU32 adapterNum);
-
-    // Obtain graphic card's parameter
-    mfxU32 GetVendorID(void) const;
-    mfxU32 GetDeviceID(void) const;
-    mfxU64 GetDriverVersion(void) const;
-
-    // Provide the number of available adapters
-    mfxU32 GetAdapterCount(void) const;
-
-    void Close(void);
-
-protected:
-
-#ifdef MFX_D3D9_ENABLED
-    // Get vendor & device IDs by alternative way (D3D9 in Remote Desktop sessions)
-    void UseAlternativeWay(const D3D9Device *pD3D9Device);
-#endif // MFX_D3D9_ENABLED
-    // Number of adapters available
-    mfxU32 m_numAdapters;
-
-    // Vendor ID
-    mfxU32 m_vendorID;
-    // Device ID
-    mfxU32 m_deviceID;
-    //x.x.x.x
-    mfxU64 m_driverVersion;
-
-private:
-    // unimplemented by intent to make this class non-copyable
-    DXVA2Device(const DXVA2Device &);
-    void operator=(const DXVA2Device &);
-};
-
-} // namespace MFX
-
-#endif // __MFX_DXVA2_DEVICE_H
diff --git a/api/opensource/mfx_dispatch/include/mfx_library_iterator.h b/api/opensource/mfx_dispatch/include/mfx_library_iterator.h
deleted file mode 100644
index 354fa24..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_library_iterator.h
+++ /dev/null
@@ -1,130 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#if !defined(__MFX_LIBRARY_ITERATOR_H)
-#define __MFX_LIBRARY_ITERATOR_H
-
-
-#include <mfxvideo.h>
-
-#if !defined(MEDIASDK_UWP_LOADER) && !defined(MEDIASDK_UWP_PROCTABLE)
-#include "mfx_win_reg_key.h"
-#endif
-
-#include "mfx_dispatcher.h"
-
-struct mfx_disp_adapters
-{
-    mfxU32 vendor_id;
-    mfxU32 device_id;
-};
-
-#define MFX_SO_BASE_NAME_LEN 15 // sizeof("libmfxhw32-p.so") = 15
-
-#define MFX_MIN_REAL_LIBNAME MFX_SO_BASE_NAME_LEN + 4 // sizeof("libmfxhw32-p.so.0.0") >= 19
-#define MFX_MAX_REAL_LIBNAME MFX_MIN_REAL_LIBNAME + 8 // sizeof("libmfxhw32-p.so.<mj>.<mn>") <= 27, max(sizeof(<mj>))=sizeof(0xFFFF) = sizeof(65535) = 5
-
-struct mfx_libs
-{
-    char name[MFX_MAX_REAL_LIBNAME+1];
-    mfxVersion version;
-};
-
-namespace MFX
-{
-
-// declare desired storage ID
-enum
-{
-    MFX_UNKNOWN_KEY     = -1,
-    MFX_STORAGE_ID_OPT  = 0, // storage is: MFX_MODULES_DIR
-    MFX_APP_FOLDER      = 1,
-
-    MFX_STORAGE_ID_FIRST   =  MFX_STORAGE_ID_OPT,
-    MFX_STORAGE_ID_LAST    = MFX_STORAGE_ID_OPT
-};
-
-// Try to initialize using given implementation type. Select appropriate type automatically in case of MFX_IMPL_VIA_ANY.
-// Params: adapterNum - in, pImplInterface - in/out, pVendorID - out, pDeviceID - out
-mfxStatus SelectImplementationType(const mfxU32 adapterNum, mfxIMPL *pImplInterface, mfxU32 *pVendorID, mfxU32 *pDeviceID);
-
-const mfxU32 msdk_disp_path_len = 1024;
-
-class MFXLibraryIterator
-{
-public:
-    // Default constructor
-    MFXLibraryIterator(void);
-    // Destructor
-    ~MFXLibraryIterator(void);
-
-    // Initialize the iterator
-    mfxStatus Init(eMfxImplType implType, mfxIMPL implInterface, const mfxU32 adapterNum, int storageID);
-
-    // Get the next library path
-    mfxStatus SelectDLLVersion(msdk_disp_char *pPath, size_t pathSize,
-                               eMfxImplType *pImplType, mfxVersion minVersion);
-
-    // Return interface type on which Intel adapter was found (if any): D3D9 or D3D11
-    mfxIMPL GetImplementationType();
-
-    // Retrun registry subkey name on which dll was selected after sucesfull call to selectDllVesion
-    bool GetSubKeyName(msdk_disp_char *subKeyName, size_t length) const;
-
-    int  GetStorageID() const { return m_StorageID; }
-protected:
-
-    // Release the iterator
-    void Release(void);
-
-    // Initialize the registry iterator
-    mfxStatus InitRegistry(eMfxImplType implType, mfxIMPL implInterface, const mfxU32 adapterNum, int storageID);
-    // Initialize the app folder iterator
-    mfxStatus InitFolder(eMfxImplType implType, mfxIMPL implInterface, const mfxU32 adapterNum, const msdk_disp_char * path);
-
-
-    eMfxImplType m_implType;                                    // Required library implementation
-    mfxIMPL m_implInterface;                                    // Required interface (D3D9, D3D11)
-
-    mfxU32 m_vendorID;                                          // (mfxU32) property of used graphic card
-    mfxU32 m_deviceID;                                          // (mfxU32) property of used graphic card
-    bool   m_bIsSubKeyValid;
-    wchar_t m_SubKeyName[MFX_MAX_REGISTRY_KEY_NAME];            // registry subkey for selected module loaded
-    int    m_StorageID;
-
-    int                       m_lastLibIndex;                   // (mfxU32) index of previously returned library
-
-    mfxU32                    m_adapters_num;
-    struct mfx_disp_adapters* m_adapters;
-    int                       m_selected_adapter;
-    mfxU32                    m_libs_num;
-    struct mfx_libs*          m_libs;
-
-    msdk_disp_char  m_path[msdk_disp_path_len];
-
-private:
-    // unimplemented by intent to make this class non-copyable
-    MFXLibraryIterator(const MFXLibraryIterator &);
-    void operator=(const MFXLibraryIterator &);
-};
-
-} // namespace MFX
-
-#endif // __MFX_LIBRARY_ITERATOR_H
diff --git a/api/opensource/mfx_dispatch/include/mfx_load_dll.h b/api/opensource/mfx_dispatch/include/mfx_load_dll.h
deleted file mode 100644
index 81d227c..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_load_dll.h
+++ /dev/null
@@ -1,49 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#if !defined(__MFX_LOAD_DLL_H)
-#define __MFX_LOAD_DLL_H
-
-#include "mfx_dispatcher.h"
-
-namespace MFX
-{
-
-
-    //
-    // declare DLL loading routines
-    //
-
-    mfxStatus mfx_get_rt_dll_name(msdk_disp_char *pPath, size_t pathSize);
-    mfxStatus mfx_get_default_dll_name(msdk_disp_char *pPath, size_t pathSize, eMfxImplType implType);
-    mfxStatus mfx_get_default_plugin_name(msdk_disp_char *pPath, size_t pathSize, eMfxImplType implType);
-
-    mfxStatus mfx_get_default_audio_dll_name(msdk_disp_char *pPath, size_t pathSize, eMfxImplType implType);
-    
-
-    mfxModuleHandle mfx_dll_load(const msdk_disp_char *file_name);
-    //increments reference counter
-    mfxModuleHandle mfx_get_dll_handle(const msdk_disp_char *file_name);
-    mfxFunctionPointer mfx_dll_get_addr(mfxModuleHandle handle, const char *func_name);
-    bool mfx_dll_free(mfxModuleHandle handle);
-
-} // namespace MFX
-
-#endif  // __MFX_LOAD_DLL_H
diff --git a/api/opensource/mfx_dispatch/include/mfx_load_plugin.h b/api/opensource/mfx_dispatch/include/mfx_load_plugin.h
deleted file mode 100644
index fe866a4..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_load_plugin.h
+++ /dev/null
@@ -1,85 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#pragma once
-#include "mfxplugin.h"
-#include "mfx_dispatcher_defs.h"
-#include "mfx_plugin_hive.h"
-
-namespace MFX
-{
-    typedef mfxStatus (MFX_CDECL *CreatePluginPtr_t)(mfxPluginUID uid, mfxPlugin* plugin);
-
-    class PluginModule
-    {
-        mfxModuleHandle mHmodule;
-        CreatePluginPtr_t mCreatePluginPtr;
-        msdk_disp_char mPath[MAX_PLUGIN_PATH];
-        
-    public:
-        PluginModule();
-        PluginModule(const msdk_disp_char * path);
-        PluginModule(const PluginModule & that) ;
-        PluginModule & operator = (const PluginModule & that);
-        bool Create(mfxPluginUID guid, mfxPlugin&);
-        ~PluginModule(void);
-
-    private:
-        void Tidy();
-    };
-
-    class MFXPluginFactory {
-        struct FactoryRecord {
-            mfxPluginParam plgParams;
-            PluginModule module;
-            mfxPlugin plugin;
-            FactoryRecord ()
-                : plgParams(), plugin()
-            {}
-            FactoryRecord(const mfxPluginParam &plgParams,
-                          PluginModule &module,
-                          mfxPlugin plugin) 
-                : plgParams(plgParams) 
-                , module(module)
-                , plugin(plugin) {
-            }
-        };
-        MFXVector<FactoryRecord> mPlugins;
-        mfxU32 nPlugins;
-        mfxSession mSession;
-    public:
-        MFXPluginFactory(mfxSession session);
-        void Close();
-        mfxStatus Create(const PluginDescriptionRecord &);
-        bool Destroy(const mfxPluginUID &);
-        
-        ~MFXPluginFactory();
-    protected:
-        void DestroyPlugin( FactoryRecord & );
-        static bool RunVerification( const mfxPlugin & plg, const PluginDescriptionRecord &dsc, mfxPluginParam &pluginParams );
-        static bool VerifyEncoder( const mfxVideoCodecPlugin &videoCodec );
-        static bool VerifyAudioEncoder( const mfxAudioCodecPlugin &audioCodec );
-        static bool VerifyEnc( const mfxVideoCodecPlugin &videoEnc );
-        static bool VerifyVpp( const mfxVideoCodecPlugin &videoCodec );
-        static bool VerifyDecoder( const mfxVideoCodecPlugin &videoCodec );
-        static bool VerifyAudioDecoder( const mfxAudioCodecPlugin &audioCodec );
-        static bool VerifyCodecCommon( const mfxVideoCodecPlugin & Video );
-    };
-}
diff --git a/api/opensource/mfx_dispatch/include/mfx_plugin_cfg_parser.h b/api/opensource/mfx_dispatch/include/mfx_plugin_cfg_parser.h
deleted file mode 100644
index 1e92a5a..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_plugin_cfg_parser.h
+++ /dev/null
@@ -1,83 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#if !defined(__MFX_PLUGIN_CFG_PARSER_H)
-#define __MFX_PLUGIN_CFG_PARSER_H
-
-#include "mfx_dispatcher_defs.h"
-#include "mfxplugin.h"
-#include "mfx_vector.h"
-#include "mfx_plugin_hive.h"
-#include <string.h>
-#include <memory>
-#include <stdio.h>
-
-#pragma once
-
-namespace MFX
-{
-    class PluginConfigParser
-    {
-    public:
-
-        enum 
-        {
-            PARSED_TYPE        = 1,
-            PARSED_CODEC_ID    = 2,
-            PARSED_UID         = 4,
-            PARSED_PATH        = 8,
-            PARSED_DEFAULT     = 16,
-            PARSED_VERSION     = 32,
-            PARSED_API_VERSION = 64,
-            PARSED_NAME        = 128,
-        };
-
-        explicit PluginConfigParser(const char * name);
-        ~PluginConfigParser();
-
-        // Returns current section name if any
-        bool GetCurrentPluginName(char * pluginName, int nChars);
-
-        template <size_t N>
-        bool GetCurrentPluginName(char (& pluginName)[N])
-        {
-            return this->GetCurrentPluginName(pluginName, N);
-        }
-
-        // Tries to advance to the next section in config file
-        bool AdvanceToNextPlugin();
-        // Return to first line of the file
-        bool Rewind();
-        // Enumerates sections in currect file (no section headers - 1 section)
-        int GetPluginCount();
-        // Parses plugin parameters from current section
-        bool ParsePluginParams(PluginDescriptionRecord & dst, mfxU32 & parsedFields);
-
-    private:
-        FILE * cfgFile;
-        fpos_t sectionStart;
-
-        bool ParseSingleParameter(const char * name, char * value, PluginDescriptionRecord & dst, mfxU32 & parsedFields);
-    };
-
-    bool parseGUID(const char* src, mfxU8* guid);
-}
-
-#endif // __MFX_PLUGIN_CFG_PARSER_H
\ No newline at end of file
diff --git a/api/opensource/mfx_dispatch/include/mfx_plugin_hive.h b/api/opensource/mfx_dispatch/include/mfx_plugin_hive.h
deleted file mode 100644
index 5d0520f..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_plugin_hive.h
+++ /dev/null
@@ -1,109 +0,0 @@
-// Copyright (c) 2018 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#pragma once
-
-#include "mfx_dispatcher_defs.h"
-#include "mfxplugin.h"
-#include "mfx_win_reg_key.h"
-#include "mfx_vector.h"
-#include <string.h>
-#include <memory>
-#include <stdio.h>
-
-struct MFX_DISP_HANDLE;
-
-namespace MFX {
-
-    inline bool operator == (const mfxPluginUID &lhs, const mfxPluginUID & rhs) 
-    {
-        return !memcmp(lhs.Data, rhs.Data, sizeof(mfxPluginUID));
-    }
-    
-    inline bool operator != (const mfxPluginUID &lhs, const mfxPluginUID & rhs) 
-    {
-        return !(lhs == rhs);
-    }
-    class PluginDescriptionRecord :  public mfxPluginParam 
-    {
-    public:
-        msdk_disp_char sPath[MAX_PLUGIN_PATH];
-        char sName[MAX_PLUGIN_NAME];
-        //used for FS plugins that has poor description
-        bool onlyVersionRegistered;
-        bool Default;
-        PluginDescriptionRecord()
-            : mfxPluginParam()
-            , sPath()
-            , sName()
-            , onlyVersionRegistered()
-            , Default()
-        {
-        }
-    };
-
-    typedef MFXVector<PluginDescriptionRecord> MFXPluginStorage;
-
-    class  MFXPluginStorageBase : public MFXPluginStorage 
-    {
-    protected:
-        mfxVersion mCurrentAPIVersion;
-    protected:
-        MFXPluginStorageBase(mfxVersion currentAPIVersion) 
-            : mCurrentAPIVersion(currentAPIVersion)
-        {
-        }
-        void ConvertAPIVersion( mfxU32 APIVersion, PluginDescriptionRecord &descriptionRecord) const
-        {
-            descriptionRecord.APIVersion.Minor = static_cast<mfxU16> (APIVersion & 0x0ff);
-            descriptionRecord.APIVersion.Major = static_cast<mfxU16> (APIVersion >> 8);
-        }
-    };
-
-    //populated from registry
-    class MFXPluginsInHive : public MFXPluginStorageBase
-    {
-    public:
-        MFXPluginsInHive(int mfxStorageID, const msdk_disp_char *msdkLibSubKey, mfxVersion currentAPIVersion);
-    };
-
-#if defined(MEDIASDK_USE_CFGFILES) || (!defined(MEDIASDK_UWP_LOADER) && !defined(MEDIASDK_UWP_PROCTABLE))
-    //plugins are loaded from FS close to executable
-    class MFXPluginsInFS : public MFXPluginStorageBase
-    {
-        bool mIsVersionParsed;
-        bool mIsAPIVersionParsed;
-    public:
-        MFXPluginsInFS(mfxVersion currentAPIVersion);
-    private:
-        bool ParseFile(FILE * f, PluginDescriptionRecord & des);
-        bool ParseKVPair( msdk_disp_char *key, msdk_disp_char * value, PluginDescriptionRecord & des);
-    };
-#endif //#if defined(MEDIASDK_USE_CFGFILES) || (!defined(MEDIASDK_UWP_LOADER) && !defined(MEDIASDK_UWP_PROCTABLE))
-
-    //plugins are loaded from FS close to Runtime library
-    class MFXDefaultPlugins : public MFXPluginStorageBase
-    {
-    public:
-        MFXDefaultPlugins(mfxVersion currentAPIVersion, MFX_DISP_HANDLE * hdl, int implType);
-    private:
-    };
-
-}
diff --git a/api/opensource/mfx_dispatch/include/mfx_vector.h b/api/opensource/mfx_dispatch/include/mfx_vector.h
deleted file mode 100644
index b320532..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_vector.h
+++ /dev/null
@@ -1,210 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#pragma once
-#include "mfxstructures.h"
-#include <exception>
-
-namespace MFX 
-{
-    template <class T>
-    class iterator_tmpl 
-    {
-        template <class U> friend class MFXVector;
-        mfxU32 mIndex;
-        T* mRecords;
-        iterator_tmpl(mfxU32 index , T * records) 
-            : mIndex (index)
-            , mRecords(records)
-        {}
-    public:
-        iterator_tmpl() 
-            : mIndex ()
-            , mRecords() 
-        {}
-        bool  operator ==(const iterator_tmpl<T> & that )const 
-        {
-            return mIndex == that.mIndex;
-        }
-        bool  operator !=(const iterator_tmpl<T> & that )const 
-        {
-            return mIndex != that.mIndex;
-        }
-        mfxU32 operator - (const iterator_tmpl<T> &that) const 
-        {
-            return mIndex - that.mIndex;
-        }
-        iterator_tmpl<T> & operator ++() 
-        {
-            mIndex++;
-            return * this;
-        }
-        iterator_tmpl<T> & operator ++(int) 
-        {
-            mIndex++;
-            return * this;
-        }
-        T & operator *() 
-        {
-            return mRecords[mIndex];
-        }
-        T * operator ->() 
-        {
-            return mRecords + mIndex;
-        }
-    };
-
-    class MFXVectorRangeError : public std::exception
-    {
-    };
-
-    template <class T>
-    class MFXVector  
-    {
-        T*      mRecords;
-        mfxU32  mNrecords;
-    public:
-        MFXVector()
-            : mRecords()
-            , mNrecords()
-        {}
-        MFXVector(const MFXVector & rhs)
-            : mRecords()
-            , mNrecords()
-        {
-            insert(end(), rhs.begin(), rhs.end());
-        }
-        MFXVector & operator = (const MFXVector & rhs)
-        {
-            if (this != &rhs) 
-            {
-                clear();
-                insert(end(), rhs.begin(), rhs.end());
-            }
-            return *this;
-        }
-        virtual ~MFXVector ()
-        {
-            clear();
-        }
-        typedef iterator_tmpl<T> iterator;
-
-        iterator begin() const 
-        {
-            return iterator(0u, mRecords);
-        }
-        iterator end() const 
-        {
-            return iterator(mNrecords, mRecords);
-        }
-        void insert(iterator where, iterator beg_iter, iterator end_iter) 
-        {
-            mfxU32 elementsToInsert = (end_iter - beg_iter);
-            if (!elementsToInsert)
-            {
-                return;
-            }
-            if (where.mIndex > mNrecords)
-            {
-                throw MFXVectorRangeError();
-            }
-
-            T *newRecords = new T[mNrecords + elementsToInsert]();
-            mfxU32 i = 0;
-            
-            // save left
-            for (; i < where.mIndex; i++) 
-            {
-                newRecords[i] = mRecords[i];
-            }
-            // insert
-            for (; beg_iter != end_iter; beg_iter++, i++) 
-            {
-                newRecords[i] = *beg_iter;
-            }
-    
-            //save right
-            for (; i < mNrecords + elementsToInsert; i++) 
-            {
-                newRecords[i] = mRecords[i - elementsToInsert];
-            }
-
-            delete [] mRecords;
-
-            mRecords = newRecords;
-            mNrecords = i;
-        }
-        T& operator [] (mfxU32 idx) 
-        {
-          return mRecords[idx];
-        }
-        void push_back(const T& obj) 
-        {
-            T *newRecords = new T[mNrecords + 1]();
-            mfxU32 i = 0;
-            for (; i <mNrecords; i++) 
-            {
-                newRecords[i] = mRecords[i];
-            }
-            newRecords[i] = obj;
-            delete [] mRecords;
-
-            mRecords = newRecords;
-            mNrecords = i + 1;
-            
-        }
-        void erase (iterator at) 
-        {
-            if (at.mIndex >= mNrecords)
-            {
-                throw MFXVectorRangeError();
-            }
-            mNrecords--; 
-            mfxU32 i = at.mIndex;
-            for (; i != mNrecords; i++)
-            {
-                mRecords[i] = mRecords[i+1];
-            }
-            //destroy last element
-            mRecords[i] = T();
-        }
-        void resize(mfxU32 nSize) 
-        {
-            T * newRecords = new T[nSize]();
-            for (mfxU32 i = 0; i <mNrecords; i++) 
-            {
-                newRecords[i] = mRecords[i];
-            }
-            delete [] mRecords;
-            mRecords = newRecords;
-            mNrecords = nSize;
-        }
-        mfxU32 size() const 
-        {
-            return mNrecords;
-        }
-        void clear() 
-        {
-            delete [] mRecords;
-            mRecords = 0;
-            mNrecords = 0;
-        }
-    };
-}
diff --git a/api/opensource/mfx_dispatch/include/mfx_win_reg_key.h b/api/opensource/mfx_dispatch/include/mfx_win_reg_key.h
deleted file mode 100644
index 0c0382b..0000000
--- a/api/opensource/mfx_dispatch/include/mfx_win_reg_key.h
+++ /dev/null
@@ -1,25 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#if !defined(__MFX_WIN_REG_KEY_H)
-#define __MFX_WIN_REG_KEY_H
-
-
-#endif // __MFX_WIN_REG_KEY_H
diff --git a/api/opensource/mfx_dispatch/src/main.cpp b/api/opensource/mfx_dispatch/src/main.cpp
deleted file mode 100644
index d1ef989..0000000
--- a/api/opensource/mfx_dispatch/src/main.cpp
+++ /dev/null
@@ -1,1030 +0,0 @@
-// Copyright (c) 2018 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#include <new>
-#include <memory>
-
-#include "mfx_dispatcher.h"
-#include "mfx_load_dll.h"
-#include "mfx_dispatcher_log.h"
-#include "mfx_library_iterator.h"
-#include "mfx_critical_section.h"
-
-#include <string.h> /* for memset on Linux */
-
-#include <stdlib.h> /* for qsort on Linux */
-#include "mfx_load_plugin.h"
-#include "mfx_plugin_hive.h"
-
-// module-local definitions
-namespace
-{
-
-    const
-    struct
-    {
-        // instance implementation type
-        eMfxImplType implType;
-        // real implementation
-        mfxIMPL impl;
-        // adapter numbers
-        mfxU32 adapterID;
-
-    } implTypes[] =
-    {
-        // MFX_IMPL_AUTO case
-        {MFX_LIB_HARDWARE, MFX_IMPL_HARDWARE,  0},
-        {MFX_LIB_SOFTWARE, MFX_IMPL_SOFTWARE,  0},
-
-        // MFX_IMPL_ANY case
-        {MFX_LIB_HARDWARE, MFX_IMPL_HARDWARE,  0},
-        {MFX_LIB_HARDWARE, MFX_IMPL_HARDWARE2, 1},
-        {MFX_LIB_HARDWARE, MFX_IMPL_HARDWARE3, 2},
-        {MFX_LIB_HARDWARE, MFX_IMPL_HARDWARE4, 3},
-        {MFX_LIB_SOFTWARE, MFX_IMPL_SOFTWARE,  0},
-        {MFX_LIB_SOFTWARE, MFX_IMPL_SOFTWARE | MFX_IMPL_AUDIO,  0},
-    };
-
-    const
-    struct
-    {
-        // start index in implTypes table for specified implementation
-        mfxU32 minIndex;
-        // last index in implTypes table for specified implementation
-        mfxU32 maxIndex;
-
-    } implTypesRange[] =
-    {
-        {0, 1},  // MFX_IMPL_AUTO
-        {1, 1},  // MFX_IMPL_SOFTWARE
-        {0, 0},  // MFX_IMPL_HARDWARE
-        {2, 6},  // MFX_IMPL_AUTO_ANY
-        {2, 5},  // MFX_IMPL_HARDWARE_ANY
-        {3, 3},  // MFX_IMPL_HARDWARE2
-        {4, 4},  // MFX_IMPL_HARDWARE3
-        {5, 5},  // MFX_IMPL_HARDWARE4
-        {2, 6},  // MFX_IMPL_RUNTIME, same as MFX_IMPL_HARDWARE_ANY
-        {7, 7}   // MFX_IMPL_AUDIO
-    };
-
-    MFX::mfxCriticalSection dispGuard = 0;
-
-} // namespace
-
-using namespace MFX;
-
-#if defined(MEDIASDK_UWP_LOADER)
-
-#ifdef __cplusplus
-extern "C" {
-#endif /* __cplusplus */
-
-    //
-    // intel_gfx_api-*.dll calls these functions to do not mix MFXInitEx exposed 
-    // from dispatcher_proc_table.lib with the libmfx[hw/sw] engines' call MFXInitEx
-    //
-
-    mfxStatus InitMediaSDKSession(mfxInitParam par, mfxSession* session)
-    {
-        return MFXInitEx(par, session);
-    }
-
-    mfxStatus DisposeMediaSDKSession(mfxSession session)
-    {
-        return MFXClose(session);
-    }
-
-#ifdef __cplusplus
-}; //extern "C"
-#endif /* __cplusplus */
-
-#endif // defined(MEDIASDK_UWP_LOADER)
-
-#if !defined(MEDIASDK_UWP_PROCTABLE)
-
-//
-// Implement DLL exposed functions. MFXInit and MFXClose have to do
-// slightly more than other. They require to be implemented explicitly.
-// All other functions are implemented implicitly.
-//
-
-typedef MFXVector<MFX_DISP_HANDLE*> HandleVector;
-typedef MFXVector<mfxStatus>        StatusVector;
-
-struct VectorHandleGuard
-{
-    VectorHandleGuard(HandleVector& aVector): m_vector(aVector) {}
-    ~VectorHandleGuard()
-    {
-        HandleVector::iterator it = m_vector.begin(),
-                               et = m_vector.end();
-        for ( ; it != et; ++it)
-        {
-            delete *it;
-        }
-    }
-
-    HandleVector& m_vector;
-private:
-    void operator=(const VectorHandleGuard&);
-};
-
-
-int HandleSort (const void * plhs, const void * prhs)
-{
-    const MFX_DISP_HANDLE * lhs = *(const MFX_DISP_HANDLE **)plhs;
-    const MFX_DISP_HANDLE * rhs = *(const MFX_DISP_HANDLE **)prhs;
-
-    if (lhs->actualApiVersion < rhs->actualApiVersion)
-    {
-        return -1;
-    }
-    if (rhs->actualApiVersion < lhs->actualApiVersion)
-    {
-        return 1;
-    }
-
-    // if versions are equal prefer library with HW
-    if (lhs->loadStatus == MFX_WRN_PARTIAL_ACCELERATION && rhs->loadStatus == MFX_ERR_NONE)
-    {
-        return 1;
-    }
-    if (lhs->loadStatus == MFX_ERR_NONE && rhs->loadStatus == MFX_WRN_PARTIAL_ACCELERATION)
-    {
-        return -1;
-    }
-
-    return 0;
-}
-
-// for LEGACY and UWP_LOADER purposes implementation of MFXinitEx is traditionally loading
-// required libmfx*.dll and fill the array of API functions' with corresponded pointers to instantiated libmfx*.dll
-
-mfxStatus MFXInitEx(mfxInitParam par, mfxSession *session)
-{
-    MFX::MFXAutomaticCriticalSection guard(&dispGuard);
-
-    DISPATCHER_LOG_BLOCK( ("MFXInitEx (impl=%s, pVer=%d.%d, ExternalThreads=%d session=0x%p\n"
-        , DispatcherLog_GetMFXImplString(par.Implementation).c_str()
-        , par.Version.Major
-        , par.Version.Minor
-        , par.ExternalThreads
-        , session));
-
-    mfxStatus mfxRes;
-    HandleVector allocatedHandle;
-    VectorHandleGuard handleGuard(allocatedHandle);
-
-    MFX_DISP_HANDLE *pHandle;
-    msdk_disp_char dllName[MFX_MAX_DLL_PATH] = { 0 };
-    MFX::MFXLibraryIterator libIterator;
-
-    // there iterators are used only if the caller specified implicit type like AUTO
-    mfxU32 curImplIdx, maxImplIdx;
-    // particular implementation value
-    mfxIMPL curImpl;
-    // implementation method masked from the input parameter
-    // special case for audio library
-    const mfxIMPL implMethod = (par.Implementation & MFX_IMPL_AUDIO) ? (sizeof(implTypesRange) / sizeof(implTypesRange[0]) - 1) : (par.Implementation & (MFX_IMPL_VIA_ANY - 1));
-
-    // implementation interface masked from the input parameter
-    mfxIMPL implInterface = par.Implementation & -MFX_IMPL_VIA_ANY;
-    mfxIMPL implInterfaceOrig = implInterface;
-    mfxVersion requiredVersion = {{MFX_VERSION_MINOR, MFX_VERSION_MAJOR}};
-
-    // check error(s)
-    if (NULL == session)
-    {
-        return MFX_ERR_NULL_PTR;
-    }
-    if (((MFX_IMPL_AUTO > implMethod) || (MFX_IMPL_RUNTIME < implMethod)) && !(par.Implementation & MFX_IMPL_AUDIO))
-    {
-        return MFX_ERR_UNSUPPORTED;
-    }
-
-    // set the minimal required version
-    requiredVersion = par.Version;
-
-    try
-    {
-        // reset the session value
-        *session = 0;
-
-        // allocate the dispatching handle and call-table
-        pHandle = new MFX_DISP_HANDLE(requiredVersion);
-    }
-    catch(...)
-    {
-        return MFX_ERR_MEMORY_ALLOC;
-    }
-
-    DISPATCHER_LOG_INFO((("Required API version is %u.%u\n"), requiredVersion.Major, requiredVersion.Minor));
-
-    // Load HW library or RT from system location
-    curImplIdx = implTypesRange[implMethod].minIndex;
-    maxImplIdx = implTypesRange[implMethod].maxIndex;
-    do
-    {
-        int currentStorage = MFX::MFX_STORAGE_ID_FIRST;
-        implInterface = implInterfaceOrig;
-        do
-        {
-            // initialize the library iterator
-            mfxRes = libIterator.Init(implTypes[curImplIdx].implType,
-                implInterface,
-                implTypes[curImplIdx].adapterID,
-                currentStorage);
-
-            // look through the list of installed SDK version,
-            // looking for a suitable library with higher merit value.
-            if (MFX_ERR_NONE == mfxRes)
-            {
-
-                if (
-                    MFX_LIB_HARDWARE == implTypes[curImplIdx].implType
-                    && (!implInterface
-                    || MFX_IMPL_VIA_ANY == implInterface))
-                {
-                    implInterface = libIterator.GetImplementationType();
-                }
-
-                do
-                {
-                    eMfxImplType implType = implTypes[curImplIdx].implType;
-
-                    // select a desired DLL
-                    mfxRes = libIterator.SelectDLLVersion(dllName,
-                        sizeof(dllName) / sizeof(dllName[0]),
-                        &implType,
-                        pHandle->apiVersion);
-                    if (MFX_ERR_NONE != mfxRes)
-                    {
-                        break;
-                    }
-                    DISPATCHER_LOG_INFO((("loading library %S\n"), MSDK2WIDE(dllName)));
-                    // try to load the selected DLL
-                    curImpl = implTypes[curImplIdx].impl;
-                    mfxRes = pHandle->LoadSelectedDLL(dllName, implType, curImpl, implInterface, par);
-                    // unload the failed DLL
-                    if (MFX_ERR_NONE != mfxRes)
-                    {
-                        pHandle->Close();
-                    }
-                    else
-                    {
-                        libIterator.GetSubKeyName(pHandle->subkeyName, sizeof(pHandle->subkeyName) / sizeof(pHandle->subkeyName[0]));
-                        pHandle->storageID = libIterator.GetStorageID();
-                        allocatedHandle.push_back(pHandle);
-                        pHandle = new MFX_DISP_HANDLE(requiredVersion);
-                    }
-
-                } while (MFX_ERR_NONE != mfxRes);
-            }
-
-            // select another place for loading engine
-            currentStorage += 1;
-
-        } while ((MFX_ERR_NONE != mfxRes) && (MFX::MFX_STORAGE_ID_LAST >= currentStorage));
-
-    } while ((MFX_ERR_NONE != mfxRes) && (++curImplIdx <= maxImplIdx));
-
-
-    curImplIdx = implTypesRange[implMethod].minIndex;
-    maxImplIdx = implTypesRange[implMethod].maxIndex;
-
-    // SOLID dispatcher checks if there are other available media sdk engines implementations in working dir
-    // UWP dispatcher does not use libraries other than in System32 folder
-#if !defined(MEDIASDK_UWP_LOADER)
-    // Load RT from app folder (libmfxsw64 with API >= 1.10)
-    do
-    {
-        implInterface = implInterfaceOrig;
-        // initialize the library iterator
-        mfxRes = libIterator.Init(implTypes[curImplIdx].implType,
-            implInterface,
-            implTypes[curImplIdx].adapterID,
-            MFX::MFX_APP_FOLDER);
-
-        if (MFX_ERR_NONE == mfxRes)
-        {
-
-            if (
-                MFX_LIB_HARDWARE == implTypes[curImplIdx].implType
-                && (!implInterface
-                || MFX_IMPL_VIA_ANY == implInterface))
-            {
-                implInterface = libIterator.GetImplementationType();
-            }
-
-            do
-            {
-                eMfxImplType implType;
-
-                // select a desired DLL
-                mfxRes = libIterator.SelectDLLVersion(dllName,
-                    sizeof(dllName) / sizeof(dllName[0]),
-                    &implType,
-                    pHandle->apiVersion);
-                if (MFX_ERR_NONE != mfxRes)
-                {
-                    break;
-                }
-                DISPATCHER_LOG_INFO((("loading library %S\n"), MSDK2WIDE(dllName)));
-
-                // try to load the selected DLL
-                curImpl = implTypes[curImplIdx].impl;
-                mfxRes = pHandle->LoadSelectedDLL(dllName, implType, curImpl, implInterface, par);
-                // unload the failed DLL
-                if (MFX_ERR_NONE != mfxRes)
-                {
-                    pHandle->Close();
-                }
-                else
-                {
-                    if (pHandle->actualApiVersion.Major == 1 && pHandle->actualApiVersion.Minor <= 9)
-                    {
-                        // this is not RT, skip it
-                        mfxRes = MFX_ERR_ABORTED;
-                        break;
-                    }
-                    pHandle->storageID = MFX::MFX_UNKNOWN_KEY;
-                    allocatedHandle.push_back(pHandle);
-                    pHandle = new MFX_DISP_HANDLE(requiredVersion);
-                }
-
-            } while (MFX_ERR_NONE != mfxRes);
-        }
-    } while ((MFX_ERR_NONE != mfxRes) && (++curImplIdx <= maxImplIdx));
-
-#endif // !defined(MEDIASDK_UWP_LOADER)
-
-    // Load HW and SW libraries using legacy default DLL search mechanism
-    // set current library index again
-    curImplIdx = implTypesRange[implMethod].minIndex;
-    do
-    {
-        implInterface = implInterfaceOrig;
-
-        if (par.Implementation & MFX_IMPL_AUDIO)
-        {
-            mfxRes = MFX::mfx_get_default_audio_dll_name(dllName,
-                sizeof(dllName) / sizeof(dllName[0]),
-                implTypes[curImplIdx].implType);
-        }
-        else
-        {
-            mfxRes = MFX::mfx_get_default_dll_name(dllName,
-                sizeof(dllName) / sizeof(dllName[0]),
-                implTypes[curImplIdx].implType);
-        }
-
-        if (MFX_ERR_NONE == mfxRes)
-        {
-            DISPATCHER_LOG_INFO((("loading default library %S\n"), MSDK2WIDE(dllName)))
-
-                // try to load the selected DLL using default DLL search mechanism
-                if (MFX_LIB_HARDWARE == implTypes[curImplIdx].implType)
-                {
-                    if (!implInterface)
-                    {
-                        implInterface = MFX_IMPL_VIA_ANY;
-                    }
-                    mfxU32 curVendorID = 0, curDeviceID = 0;
-                    mfxRes = MFX::SelectImplementationType(implTypes[curImplIdx].adapterID, &implInterface, &curVendorID, &curDeviceID);
-                    if (curVendorID != INTEL_VENDOR_ID)
-                        mfxRes = MFX_ERR_UNKNOWN;
-                }
-                if (MFX_ERR_NONE == mfxRes)
-                {
-                    // try to load the selected DLL using default DLL search mechanism
-                    mfxRes = pHandle->LoadSelectedDLL(dllName,
-                        implTypes[curImplIdx].implType,
-                        implTypes[curImplIdx].impl,
-                        implInterface,
-                        par);
-                }
-                // unload the failed DLL
-                if ((MFX_ERR_NONE != mfxRes) &&
-                    (MFX_WRN_PARTIAL_ACCELERATION != mfxRes))
-                {
-                    pHandle->Close();
-                }
-                else
-                {
-                    pHandle->storageID = MFX::MFX_UNKNOWN_KEY;
-                    allocatedHandle.push_back(pHandle);
-                    pHandle = new MFX_DISP_HANDLE(requiredVersion);
-                }
-        }
-    }
-    while ((MFX_ERR_NONE > mfxRes) && (++curImplIdx <= maxImplIdx));
-    delete pHandle;
-
-    if (allocatedHandle.size() == 0)
-        return MFX_ERR_UNSUPPORTED;
-
-    { // sort candidate list
-        bool NeedSort = false;
-        HandleVector::iterator first = allocatedHandle.begin(),
-            it = allocatedHandle.begin(),
-            et = allocatedHandle.end();
-        for (it++; it != et; ++it)
-            if (HandleSort(&(*first), &(*it)) != 0)
-                NeedSort = true;
-
-        // select dll with version with lowest version number still greater or equal to requested
-        if (NeedSort)
-            qsort(&(*allocatedHandle.begin()), allocatedHandle.size(), sizeof(MFX_DISP_HANDLE*), &HandleSort);
-    }
-    HandleVector::iterator candidate = allocatedHandle.begin();
-    // check the final result of loading
-    try
-    {
-        pHandle = *candidate;
-        //pulling up current mediasdk version, that required to match plugin version
-        mfxVersion apiVerActual = { { 0, 0 } };
-        mfxStatus stsQueryVersion = MFXQueryVersion((mfxSession)pHandle, &apiVerActual);
-
-        if (MFX_ERR_NONE !=  stsQueryVersion)
-        {
-            DISPATCHER_LOG_ERROR((("MFXQueryVersion returned: %d, cannot load plugins\n"), mfxRes))
-        }
-        else
-        {
-            MFX::MFXPluginStorage & hive = pHandle->pluginHive;
-
-            HandleVector::iterator it = allocatedHandle.begin(),
-                                   et = allocatedHandle.end();
-            for (; it != et; ++it)
-            {
-                // Registering default plugins set
-                MFX::MFXDefaultPlugins defaultPugins(apiVerActual, *it, (*it)->implType);
-                hive.insert(hive.end(), defaultPugins.begin(), defaultPugins.end());
-
-                if ((*it)->storageID != MFX::MFX_UNKNOWN_KEY)
-                {
-                    // Scan HW plugins in subkeys of registry library
-                    MFX::MFXPluginsInHive plgsInHive((*it)->storageID, (*it)->subkeyName, apiVerActual);
-                    hive.insert(hive.end(), plgsInHive.begin(), plgsInHive.end());
-                }
-            }
-
-            //setting up plugins records
-            for(int i = MFX::MFX_STORAGE_ID_FIRST; i <= MFX::MFX_STORAGE_ID_LAST; i++)
-            {
-                MFX::MFXPluginsInHive plgsInHive(i, NULL, apiVerActual);
-                hive.insert(hive.end(), plgsInHive.begin(), plgsInHive.end());
-            }
-
-#if defined(MEDIASDK_USE_CFGFILES) || !defined(MEDIASDK_UWP_LOADER)
-            // SOLID dispatcher also loads plug-ins from file system
-            MFX::MFXPluginsInFS plgsInFS(apiVerActual);
-            hive.insert(hive.end(), plgsInFS.begin(), plgsInFS.end());
-#endif // defined(MEDIASDK_USE_CFGFILES) || !defined(MEDIASDK_UWP_LOADER)
-        }
-
-        // UWP dispatcher uses stubs
-        pHandle->callPlugInsTable[eMFXVideoUSER_Load] = (mfxFunctionPointer)MFXVideoUSER_Load;
-        pHandle->callPlugInsTable[eMFXVideoUSER_LoadByPath] = (mfxFunctionPointer)MFXVideoUSER_LoadByPath;
-        pHandle->callPlugInsTable[eMFXVideoUSER_UnLoad] = (mfxFunctionPointer)MFXVideoUSER_UnLoad;
-        pHandle->callPlugInsTable[eMFXAudioUSER_Load] = (mfxFunctionPointer)MFXAudioUSER_Load;
-        pHandle->callPlugInsTable[eMFXAudioUSER_UnLoad] = (mfxFunctionPointer)MFXAudioUSER_UnLoad;
-
-    }
-    catch(...)
-    {
-        DISPATCHER_LOG_ERROR((("unknown exception while loading plugins\n")))
-    }
-
-    // everything is OK. Save pointers to the output variable
-    *candidate = 0; // keep this one safe from guard destructor
-    *((MFX_DISP_HANDLE **) session) = pHandle;
-
-    return pHandle->loadStatus;
-
-} // mfxStatus MFXInitEx(mfxIMPL impl, mfxVersion *ver, mfxSession *session)
-
-mfxStatus MFXClose(mfxSession session)
-{
-    MFX::MFXAutomaticCriticalSection guard(&dispGuard);
-
-    mfxStatus mfxRes = MFX_ERR_INVALID_HANDLE;
-    MFX_DISP_HANDLE *pHandle = (MFX_DISP_HANDLE *) session;
-
-    // check error(s)
-    if (pHandle)
-    {
-        try
-        {
-            // unload the DLL library
-            mfxRes = pHandle->Close();
-
-            // it is possible, that there is an active child session.
-            // can't unload library in that case.
-            if (MFX_ERR_UNDEFINED_BEHAVIOR != mfxRes)
-            {
-                // release the handle
-                delete pHandle;
-            }
-        }
-        catch(...)
-        {
-            mfxRes = MFX_ERR_INVALID_HANDLE;
-        }
-    }
-
-    return mfxRes;
-
-} // mfxStatus MFXClose(mfxSession session)
-
-mfxStatus MFXVideoUSER_Load(mfxSession session, const mfxPluginUID *uid, mfxU32 version)
-{
-    mfxStatus sts = MFX_ERR_NONE;
-    bool ErrFlag = false;
-    if (!session) {
-        DISPATCHER_LOG_ERROR((("MFXVideoUSER_Load: session=NULL\n")));
-        return MFX_ERR_NULL_PTR;
-    }
-    MFX_DISP_HANDLE &pHandle = *(MFX_DISP_HANDLE *) session;
-
-    if (!uid)
-    {
-        DISPATCHER_LOG_ERROR((("MFXVideoUSER_Load: uid=NULL\n")));
-        return MFX_ERR_NULL_PTR;
-    }
-    DISPATCHER_LOG_INFO((("MFXVideoUSER_Load: uid=" MFXGUIDTYPE()" version=%d\n")
-        , MFXGUIDTOHEX(uid)
-        , version))
-        size_t pluginsChecked = 0;
-
-    for (MFX::MFXPluginStorage::iterator i = pHandle.pluginHive.begin();i != pHandle.pluginHive.end(); i++, pluginsChecked++)
-    {
-        if (i->PluginUID != *uid)
-        {
-            continue;
-        }
-        //check rest in records
-        if (i->PluginVersion < version)
-        {
-            DISPATCHER_LOG_INFO((("MFXVideoUSER_Load: registered \"Plugin Version\" for GUID=" MFXGUIDTYPE()" is %d, that is smaller that requested\n")
-                , MFXGUIDTOHEX(uid)
-                , i->PluginVersion))
-                continue;
-        }
-        try
-        {
-            sts = pHandle.pluginFactory.Create(*i);
-            if( MFX_ERR_NONE != sts)
-            {
-                ErrFlag = (ErrFlag || (sts == MFX_ERR_UNDEFINED_BEHAVIOR));
-                continue;
-            }
-            return MFX_ERR_NONE;
-        }
-        catch(...)
-        {
-            continue;
-        }
-    }
-
-    // Specified UID was not found among individually registed plugins, now try load it from default sets if any
-    for (MFX::MFXPluginStorage::iterator i = pHandle.pluginHive.begin();i != pHandle.pluginHive.end(); i++, pluginsChecked++)
-    {
-        if (!i->Default)
-            continue;
-
-        i->PluginUID = *uid;
-        i->PluginVersion = (mfxU16)version;
-        try
-        {
-            sts = pHandle.pluginFactory.Create(*i);
-            if( MFX_ERR_NONE != sts)
-            {
-                ErrFlag = (ErrFlag || (sts == MFX_ERR_UNDEFINED_BEHAVIOR));
-                continue;
-            }
-            return MFX_ERR_NONE;
-        }
-        catch(...)
-        {
-            continue;
-        }
-    }
-
-    DISPATCHER_LOG_ERROR((("MFXVideoUSER_Load: cannot find registered plugin with requested UID, total plugins available=%d\n"), pHandle.pluginHive.size()));
-    if (ErrFlag)
-        return MFX_ERR_UNDEFINED_BEHAVIOR;
-    else
-        return MFX_ERR_NOT_FOUND;
-}
-
-
-mfxStatus MFXVideoUSER_LoadByPath(mfxSession session, const mfxPluginUID *uid, mfxU32 version, const mfxChar *path, mfxU32 len)
-{
-    if (!session)
-    {
-        DISPATCHER_LOG_ERROR((("MFXVideoUSER_LoadByPath: session=NULL\n")));
-        return MFX_ERR_NULL_PTR;
-    }
-    MFX_DISP_HANDLE &pHandle = *(MFX_DISP_HANDLE *) session;
-    if (!uid)
-    {
-        DISPATCHER_LOG_ERROR((("MFXVideoUSER_LoadByPath: uid=NULL\n")));
-        return MFX_ERR_NULL_PTR;
-    }
-
-    DISPATCHER_LOG_INFO((("MFXVideoUSER_LoadByPath: %S uid=" MFXGUIDTYPE()" version=%d\n")
-        , MSDK2WIDE(path)
-        , MFXGUIDTOHEX(uid)
-        , version))
-
-    PluginDescriptionRecord record;
-    record.sName[0] = 0;
-
-    msdk_disp_char_cpy_s(record.sPath, MAX_PLUGIN_PATH, path);
-
-    record.PluginUID = *uid;
-    record.PluginVersion = (mfxU16)version;
-    record.Default = true;
-
-    try
-    {
-        return pHandle.pluginFactory.Create(record);
-    }
-    catch(...)
-    {
-        return MFX_ERR_NOT_FOUND;
-    }
-}
-
-
-mfxStatus MFXVideoUSER_UnLoad(mfxSession session, const mfxPluginUID *uid)
-{
-    if (!session)
-    {
-        DISPATCHER_LOG_ERROR((("MFXVideoUSER_UnLoad: session=NULL\n")));
-        return MFX_ERR_NULL_PTR;
-    }
-    MFX_DISP_HANDLE &rHandle = *(MFX_DISP_HANDLE *) session;
-    if (!uid)
-    {
-        DISPATCHER_LOG_ERROR((("MFXVideoUSER_UnLoad: uid=NULL\n")));
-        return MFX_ERR_NULL_PTR;
-    }
-
-    bool bDestroyed = rHandle.pluginFactory.Destroy(*uid);
-    if (bDestroyed)
-    {
-        DISPATCHER_LOG_INFO((("MFXVideoUSER_UnLoad : plugin with GUID=" MFXGUIDTYPE()" unloaded\n"), MFXGUIDTOHEX(uid)));
-    } else
-    {
-        DISPATCHER_LOG_ERROR((("MFXVideoUSER_UnLoad : plugin with GUID=" MFXGUIDTYPE()" not found\n"), MFXGUIDTOHEX(uid)));
-    }
-
-    return bDestroyed ? MFX_ERR_NONE : MFX_ERR_NOT_FOUND;
-}
-
-mfxStatus MFXAudioUSER_Load(mfxSession session, const mfxPluginUID *uid, mfxU32 version)
-{
-    if (!session)
-    {
-        DISPATCHER_LOG_ERROR((("MFXAudioUSER_Load: session=NULL\n")));
-        return MFX_ERR_NULL_PTR;
-    }
-    MFX_DISP_HANDLE &pHandle = *(MFX_DISP_HANDLE *) session;
-    if (!uid)
-    {
-        DISPATCHER_LOG_ERROR((("MFXAudioUSER_Load: uid=NULL\n")));
-        return MFX_ERR_NULL_PTR;
-    }
-    DISPATCHER_LOG_INFO((("MFXAudioUSER_Load: uid=" MFXGUIDTYPE()" version=%d\n")
-        , MFXGUIDTOHEX(uid)
-        , version))
-        size_t pluginsChecked = 0;
-    PluginDescriptionRecord defaultPluginRecord;
-    for (MFX::MFXPluginStorage::iterator i = pHandle.pluginHive.begin();i != pHandle.pluginHive.end(); i++, pluginsChecked++)
-    {
-        if (i->PluginUID != *uid)
-        {
-            if (i->Default) // PluginUID == 0 for default set
-            {
-                defaultPluginRecord = *i;
-            }
-            continue;
-        }
-        //check rest in records
-        if (i->PluginVersion < version)
-        {
-            DISPATCHER_LOG_INFO((("MFXAudioUSER_Load: registered \"Plugin Version\" for GUID=" MFXGUIDTYPE()" is %d, that is smaller that requested\n")
-                , MFXGUIDTOHEX(uid)
-                , i->PluginVersion))
-                continue;
-        }
-        try {
-            return pHandle.pluginFactory.Create(*i);
-        }
-        catch(...) {
-            return MFX_ERR_UNKNOWN;
-        }
-    }
-
-    // Specified UID was not found among individually registed plugins, now try load it from default set if any
-    if (defaultPluginRecord.Default)
-    {
-        defaultPluginRecord.PluginUID = *uid;
-        defaultPluginRecord.onlyVersionRegistered = true;
-        defaultPluginRecord.PluginVersion = (mfxU16)version;
-        try {
-            return pHandle.pluginFactory.Create(defaultPluginRecord);
-        }
-        catch(...) {
-            return MFX_ERR_UNKNOWN;
-        }
-    }
-
-    DISPATCHER_LOG_ERROR((("MFXAudioUSER_Load: cannot find registered plugin with requested UID, total plugins available=%d\n"), pHandle.pluginHive.size()));
-    return MFX_ERR_NOT_FOUND;
-}
-
-mfxStatus MFXAudioUSER_UnLoad(mfxSession session, const mfxPluginUID *uid)
-{
-    if (!session)
-    {
-        DISPATCHER_LOG_ERROR((("MFXAudioUSER_UnLoad: session=NULL\n")));
-        return MFX_ERR_NULL_PTR;
-    }
-    MFX_DISP_HANDLE &rHandle = *(MFX_DISP_HANDLE *) session;
-    if (!uid)
-    {
-        DISPATCHER_LOG_ERROR((("MFXAudioUSER_Load: uid=NULL\n")));
-        return MFX_ERR_NULL_PTR;
-    }
-
-    bool bDestroyed = rHandle.pluginFactory.Destroy(*uid);
-    if (bDestroyed)
-    {
-        DISPATCHER_LOG_INFO((("MFXAudioUSER_UnLoad : plugin with GUID=" MFXGUIDTYPE()" unloaded\n"), MFXGUIDTOHEX(uid)));
-    } else
-    {
-        DISPATCHER_LOG_ERROR((("MFXAudioUSER_UnLoad : plugin with GUID=" MFXGUIDTYPE()" not found\n"), MFXGUIDTOHEX(uid)));
-    }
-
-    return bDestroyed ? MFX_ERR_NONE : MFX_ERR_NOT_FOUND;
-}
-#else // relates to !defined (MEDIASDK_UWP_PROCTABLE) from line 137, i.e. #else part as if MEDIASDK_UWP_PROCTABLE defined
-
-#include <windows.h>
-#include "intel_api_factory.h"
-
-// for the UWP_PROCTABLE purposes implementation of MFXinitEx is calling
-// InitializeInstance() implemented in intel_uwp-api.dll
-mfxStatus MFXInitEx(mfxInitParam par, mfxSession *session)
-{
-    HRESULT hr = InitialiseMediaSession((HANDLE*)session, &par, nullptr);
-    return (hr == S_OK) ? mfxStatus::MFX_ERR_NONE : (mfxStatus)hr;
-}
-
-// for the UWP_PROCTABLE purposes implementation of MFXClose is calling
-// DisposeInstance() implemented in intel_uwp-api.dll
-mfxStatus MFXClose(mfxSession session)
-{
-    if (nullptr == session) {
-        return MFX_ERR_INVALID_HANDLE;
-    }
-
-    HRESULT hr = DisposeMediaSession(HANDLE(session));
-    session = (mfxSession)NULL;
-    return (hr == S_OK) ? MFX_ERR_NONE : mfxStatus(hr);
-}
-
-#undef FUNCTION
-#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list) \
-    return_value func_name formal_param_list \
-{ \
-    mfxStatus mfxRes = MFX_ERR_INVALID_HANDLE; \
-\
-    _mfxSession *pHandle = (_mfxSession *) session; \
-\
-    /* get the function's address and make a call */ \
-    if (pHandle) \
-{ \
-    mfxFunctionPointer pFunc = pHandle->callPlugInsTable[e##func_name]; \
-    if (pFunc) \
-{ \
-    /* pass down the call */ \
-    mfxRes = (*(mfxStatus (MFX_CDECL  *) formal_param_list) pFunc) actual_param_list; \
-} \
-} \
-    return mfxRes; \
-}
-
-FUNCTION(mfxStatus, MFXVideoUSER_Load, (mfxSession session, const mfxPluginUID *uid, mfxU32 version), (session, uid, version))
-FUNCTION(mfxStatus, MFXVideoUSER_LoadByPath, (mfxSession session, const mfxPluginUID *uid, mfxU32 version, const mfxChar *path, mfxU32 len), (session, uid, version, path, len))
-FUNCTION(mfxStatus, MFXVideoUSER_UnLoad, (mfxSession session, const mfxPluginUID *uid), (session, uid))
-FUNCTION(mfxStatus, MFXAudioUSER_Load, (mfxSession session, const mfxPluginUID *uid, mfxU32 version), (session, uid, version))
-FUNCTION(mfxStatus, MFXAudioUSER_UnLoad, (mfxSession session, const mfxPluginUID *uid), (session, uid))
-
-#endif //!defined(MEDIASDK_UWP_PROCTABLE)
-
-
-#if !defined(MEDIASDK_UWP_LOADER)
-
-mfxStatus MFXJoinSession(mfxSession session, mfxSession child_session)
-{
-    mfxStatus mfxRes = MFX_ERR_INVALID_HANDLE;
-    MFX_DISP_HANDLE *pHandle = (MFX_DISP_HANDLE *)session;
-    MFX_DISP_HANDLE *pChildHandle = (MFX_DISP_HANDLE *)child_session;
-
-    // get the function's address and make a call
-    if ((pHandle) && (pChildHandle) && (pHandle->apiVersion == pChildHandle->apiVersion))
-    {
-        /* check whether it is audio session or video */
-        int tableIndex = eMFXJoinSession;
-        mfxFunctionPointer pFunc;
-        if (pHandle->impl & MFX_IMPL_AUDIO)
-        {
-            pFunc = pHandle->callAudioTable[tableIndex];
-        }
-        else
-        {
-            pFunc = pHandle->callTable[tableIndex];
-        }
-
-        if (pFunc)
-        {
-            // pass down the call
-            mfxRes = (*(mfxStatus(MFX_CDECL *) (mfxSession, mfxSession)) pFunc) (pHandle->session,
-                pChildHandle->session);
-        }
-    }
-
-    return mfxRes;
-
-} // mfxStatus MFXJoinSession(mfxSession session, mfxSession child_session)
-
-mfxStatus MFXCloneSession(mfxSession session, mfxSession *clone)
-{
-    mfxStatus mfxRes = MFX_ERR_INVALID_HANDLE;
-    MFX_DISP_HANDLE *pHandle = (MFX_DISP_HANDLE *)session;
-    mfxVersion apiVersion;
-    mfxIMPL impl;
-
-    // check error(s)
-    if (pHandle)
-    {
-        // initialize the clone session
-        apiVersion = pHandle->apiVersion;
-        impl = pHandle->impl | pHandle->implInterface;
-        mfxRes = MFXInit(impl, &apiVersion, clone);
-        if (MFX_ERR_NONE != mfxRes)
-        {
-            return mfxRes;
-        }
-
-        // join the sessions
-        mfxRes = MFXJoinSession(session, *clone);
-        if (MFX_ERR_NONE != mfxRes)
-        {
-            MFXClose(*clone);
-            *clone = NULL;
-            return mfxRes;
-        }
-    }
-
-    return mfxRes;
-
-} // mfxStatus MFXCloneSession(mfxSession session, mfxSession *clone)
-
-#endif // !defined(MEDIASDK_UWP_LOADER)
-
-mfxStatus MFXInit(mfxIMPL impl, mfxVersion *pVer, mfxSession *session)
-{
-    mfxInitParam par = {};
-
-    par.Implementation = impl;
-    if (pVer)
-    {
-        par.Version = *pVer;
-    }
-    else
-    {
-        par.Version.Major = DEFAULT_API_VERSION_MAJOR;
-        par.Version.Minor = DEFAULT_API_VERSION_MINOR;
-    }
-    par.ExternalThreads = 0;
-
-    return MFXInitEx(par, session);
-}
-
-//
-//
-// implement all other calling functions.
-// They just call a procedure of DLL library from the table.
-//
-
-// define for common functions (from mfxsession.h)
-#undef FUNCTION
-#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list) \
-    return_value func_name formal_param_list \
-{ \
-    mfxStatus mfxRes = MFX_ERR_INVALID_HANDLE; \
-     _mfxSession *pHandle = (_mfxSession *) session; \
-    /* get the function's address and make a call */ \
-    if (pHandle) \
-{ \
-    /* check whether it is audio session or video */ \
-    int tableIndex = e##func_name; \
-    mfxFunctionPointer pFunc; \
-    if (pHandle->impl & MFX_IMPL_AUDIO) \
-{ \
-    pFunc = pHandle->callAudioTable[tableIndex]; \
-} \
-        else \
-{ \
-    pFunc = pHandle->callTable[tableIndex]; \
-} \
-    if (pFunc) \
-{ \
-    /* get the real session pointer */ \
-    session = pHandle->session; \
-    /* pass down the call */ \
-    mfxRes = (*(mfxStatus (MFX_CDECL  *) formal_param_list) pFunc) actual_param_list; \
-} \
-} \
-    return mfxRes; \
-}
-
-FUNCTION(mfxStatus, MFXQueryIMPL, (mfxSession session, mfxIMPL *impl), (session, impl))
-FUNCTION(mfxStatus, MFXQueryVersion, (mfxSession session, mfxVersion *version), (session, version))
-
-#if !defined(MEDIASDK_UWP_LOADER)
-// these functions are not necessary in LOADER part of dispatcher and
-// need to be included only in in SOLID dispatcher or PROCTABLE part of dispatcher
-
-FUNCTION(mfxStatus, MFXDisjoinSession, (mfxSession session), (session))
-FUNCTION(mfxStatus, MFXSetPriority, (mfxSession session, mfxPriority priority), (session, priority))
-FUNCTION(mfxStatus, MFXGetPriority, (mfxSession session, mfxPriority *priority), (session, priority))
-
-#endif // !defined(MEDIASDK_UWP_LOADER)
-
-#undef FUNCTION
-#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list) \
-    return_value func_name formal_param_list \
-{ \
-    mfxStatus mfxRes = MFX_ERR_INVALID_HANDLE; \
-     _mfxSession *pHandle = (_mfxSession *) session;\
-    /* get the function's address and make a call */ \
-    if (pHandle) \
-{ \
-    mfxFunctionPointer pFunc = pHandle->callTable[e##func_name]; \
-    if (pFunc) \
-{ \
-    /* get the real session pointer */ \
-    session = pHandle->session; \
-    /* pass down the call */ \
-    mfxRes = (*(mfxStatus (MFX_CDECL  *) formal_param_list) pFunc) actual_param_list; \
-} \
-} \
-    return mfxRes; \
-}
-
-#include "mfx_exposed_functions_list.h"
-#undef FUNCTION
-#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list) \
-    return_value func_name formal_param_list \
-{ \
-    mfxStatus mfxRes = MFX_ERR_INVALID_HANDLE; \
-     _mfxSession *pHandle = (_mfxSession *) session; \
-    /* get the function's address and make a call */ \
-    if (pHandle) \
-{ \
-    mfxFunctionPointer pFunc = pHandle->callAudioTable[e##func_name]; \
-    if (pFunc) \
-{ \
-    /* get the real session pointer */ \
-    session = pHandle->session; \
-    /* pass down the call */ \
-    mfxRes = (*(mfxStatus (MFX_CDECL  *) formal_param_list) pFunc) actual_param_list; \
-} \
-} \
-    return mfxRes; \
-}
-
-#include "mfxaudio_exposed_functions_list.h"
diff --git a/api/opensource/mfx_dispatch/src/mfx_critical_section.cpp b/api/opensource/mfx_dispatch/src/mfx_critical_section.cpp
deleted file mode 100644
index 2cbb8b5..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_critical_section.cpp
+++ /dev/null
@@ -1,22 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#include "mfx_critical_section.h"
-
diff --git a/api/opensource/mfx_dispatch/src/mfx_critical_section_linux.cpp b/api/opensource/mfx_dispatch/src/mfx_critical_section_linux.cpp
deleted file mode 100644
index 7748fae..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_critical_section_linux.cpp
+++ /dev/null
@@ -1,79 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-
-#include "mfx_critical_section.h"
-#include <sched.h>
-
-#define MFX_WAIT() sched_yield()
-
-// static section of the file
-namespace
-{
-
-enum
-{
-    MFX_SC_IS_FREE = 0,
-    MFX_SC_IS_TAKEN = 1
-};
-
-} // namespace
-
-namespace MFX
-{
-
-mfxU32 mfxInterlockedCas32(mfxCriticalSection *pCSection, mfxU32 value_to_exchange, mfxU32 value_to_compare)
-{
-    mfxU32 previous_value;
-
-    asm volatile ("lock; cmpxchgl %1,%2"
-                  : "=a" (previous_value)
-                  : "r" (value_to_exchange), "m" (*pCSection), "0" (value_to_compare)
-                  : "memory", "cc");
-    return previous_value;
-}
-
-mfxU32 mfxInterlockedXchg32(mfxCriticalSection *pCSection, mfxU32 value)
-{
-    mfxU32 previous_value = value;
-
-    asm volatile ("lock; xchgl %0,%1"
-                  : "=r" (previous_value), "+m" (*pCSection)
-                  : "0" (previous_value));
-    return previous_value;
-}
-
-void mfxEnterCriticalSection(mfxCriticalSection *pCSection)
-{
-    while (MFX_SC_IS_TAKEN == mfxInterlockedCas32(pCSection,
-                                                  MFX_SC_IS_TAKEN,
-                                                  MFX_SC_IS_FREE))
-    {
-        MFX_WAIT();
-    }
-} // void mfxEnterCriticalSection(mfxCriticalSection *pCSection)
-
-void mfxLeaveCriticalSection(mfxCriticalSection *pCSection)
-{
-    mfxInterlockedXchg32(pCSection, MFX_SC_IS_FREE);
-} // void mfxLeaveCriticalSection(mfxCriticalSection *pCSection)
-
-} // namespace MFX
-
diff --git a/api/opensource/mfx_dispatch/src/mfx_dispatcher.cpp b/api/opensource/mfx_dispatch/src/mfx_dispatcher.cpp
deleted file mode 100644
index cb92081..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_dispatcher.cpp
+++ /dev/null
@@ -1,328 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#include "mfx_dispatcher.h"
-#include "mfx_dispatcher_log.h"
-#include "mfx_load_dll.h"
-
-#include <assert.h>
-
-#include <string.h>
-    #include <dlfcn.h>
-    #include <iostream>
-
-
-MFX_DISP_HANDLE::MFX_DISP_HANDLE(const mfxVersion requiredVersion) :
-    _mfxSession()
-    ,apiVersion(requiredVersion)
-    ,pluginFactory((mfxSession)this)
-{
-    actualApiVersion.Version = 0;
-    implType = MFX_LIB_SOFTWARE;
-    impl = MFX_IMPL_SOFTWARE;
-    loadStatus = MFX_ERR_NOT_FOUND;
-    dispVersion.Major = MFX_DISPATCHER_VERSION_MAJOR;
-    dispVersion.Minor = MFX_DISPATCHER_VERSION_MINOR;
-    storageID = 0;
-    implInterface = MFX_IMPL_HARDWARE_ANY;
-
-    hModule = (mfxModuleHandle) 0;
-
-} // MFX_DISP_HANDLE::MFX_DISP_HANDLE(const mfxVersion requiredVersion)
-
-MFX_DISP_HANDLE::~MFX_DISP_HANDLE(void)
-{
-    Close();
-
-} // MFX_DISP_HANDLE::~MFX_DISP_HANDLE(void)
-
-mfxStatus MFX_DISP_HANDLE::Close(void)
-{
-    mfxStatus mfxRes;
-
-    mfxRes = UnLoadSelectedDLL();
-
-    // the library wasn't unloaded
-    if (MFX_ERR_NONE == mfxRes)
-    {
-        implType = MFX_LIB_SOFTWARE;
-        impl = MFX_IMPL_SOFTWARE;
-        loadStatus = MFX_ERR_NOT_FOUND;
-        dispVersion.Major = MFX_DISPATCHER_VERSION_MAJOR;
-        dispVersion.Minor = MFX_DISPATCHER_VERSION_MINOR;
-        *static_cast<_mfxSession*>(this) = _mfxSession();
-        hModule = (mfxModuleHandle) 0;
-    }
-
-    return mfxRes;
-
-} // mfxStatus MFX_DISP_HANDLE::Close(void)
-
-mfxStatus MFX_DISP_HANDLE::LoadSelectedDLL(const msdk_disp_char *pPath, eMfxImplType reqImplType,
-                                           mfxIMPL reqImpl, mfxIMPL reqImplInterface, mfxInitParam &par)
-{
-    mfxStatus mfxRes = MFX_ERR_NONE;
-
-    // check error(s)
-    if ((MFX_LIB_SOFTWARE != reqImplType) &&
-        (MFX_LIB_HARDWARE != reqImplType))
-    {
-        DISPATCHER_LOG_ERROR((("implType == %s, should be either MFX_LIB_SOFTWARE ot MFX_LIB_HARDWARE\n"), DispatcherLog_GetMFXImplString(reqImplType).c_str()));
-        loadStatus = MFX_ERR_ABORTED;
-        return loadStatus;
-    }
-    // only exact types of implementation is allowed
-    if (!(reqImpl & MFX_IMPL_AUDIO) &&
-        (MFX_IMPL_SOFTWARE != reqImpl) &&
-        (MFX_IMPL_HARDWARE != reqImpl) &&
-        (MFX_IMPL_HARDWARE2 != reqImpl) &&
-        (MFX_IMPL_HARDWARE3 != reqImpl) &&
-        (MFX_IMPL_HARDWARE4 != reqImpl))
-    {
-        DISPATCHER_LOG_ERROR((("invalid implementation impl == %s\n"), DispatcherLog_GetMFXImplString(impl).c_str()));
-        loadStatus = MFX_ERR_ABORTED;
-        return loadStatus;
-    }
-    // only mfxExtThreadsParam is allowed
-    if (par.NumExtParam)
-    {
-        if ((par.NumExtParam > 1) || !par.ExtParam)
-        {
-            loadStatus = MFX_ERR_ABORTED;
-            return loadStatus;
-        }
-        if ((par.ExtParam[0]->BufferId != MFX_EXTBUFF_THREADS_PARAM) ||
-            (par.ExtParam[0]->BufferSz != sizeof(mfxExtThreadsParam)))
-        {
-            loadStatus = MFX_ERR_ABORTED;
-            return loadStatus;
-        }
-    }
-
-    // close the handle before initialization
-    Close();
-
-    // save the library's type
-    this->implType = reqImplType;
-    this->impl = reqImpl;
-    this->implInterface = reqImplInterface;
-
-    {
-        assert(hModule == (mfxModuleHandle)0);
-        DISPATCHER_LOG_BLOCK(("invoking LoadLibrary(%S)\n", MSDK2WIDE(pPath)));
-
-        // load the DLL into the memory
-        hModule = MFX::mfx_dll_load(pPath);
-
-        if (hModule)
-        {
-            int i;
-
-            DISPATCHER_LOG_OPERATION({
-                msdk_disp_char modulePath[1024];
-                GetModuleFileNameW((HMODULE)hModule, modulePath, sizeof(modulePath)/sizeof(modulePath[0]));
-                DISPATCHER_LOG_INFO((("loaded module %S\n"), MSDK2WIDE(modulePath)))
-            });
-
-            if (impl & MFX_IMPL_AUDIO)
-            {
-                // load audio functions: pointers to exposed functions
-                for (i = 0; i < eAudioFuncTotal; i += 1)
-                {
-                    // construct correct name of the function - remove "_a" postfix
-
-                    mfxFunctionPointer pProc = (mfxFunctionPointer) MFX::mfx_dll_get_addr(hModule, APIAudioFunc[i].pName);
-    #ifdef ANDROID
-                    // on Android very first call to dlsym may fail
-                    if (!pProc) pProc = (mfxFunctionPointer) MFX::mfx_dll_get_addr(hModule, APIAudioFunc[i].pName);
-    #endif
-                    if (pProc)
-                    {
-                        // function exists in the library,
-                        // save the pointer.
-                        callAudioTable[i] = pProc;
-                    }
-                    else
-                    {
-                        // The library doesn't contain the function
-                        DISPATCHER_LOG_WRN((("Can't find API function \"%s\"\n"), APIAudioFunc[i].pName));
-                        if (apiVersion.Version >= APIAudioFunc[i].apiVersion.Version)
-                        {
-                            DISPATCHER_LOG_ERROR((("\"%s\" is required for API %u.%u\n"), APIAudioFunc[i].pName, apiVersion.Major, apiVersion.Minor));
-                            mfxRes = MFX_ERR_UNSUPPORTED;
-                            break;
-                        }
-                    }
-                }
-            }
-            else
-            {
-                // load video functions: pointers to exposed functions
-                for (i = 0; i < eVideoFuncTotal; i += 1)
-                {
-                    mfxFunctionPointer pProc = (mfxFunctionPointer) MFX::mfx_dll_get_addr(hModule, APIFunc[i].pName);
-    #ifdef ANDROID
-                    // on Android very first call to dlsym may fail
-                    if (!pProc) pProc = (mfxFunctionPointer) MFX::mfx_dll_get_addr(hModule, APIFunc[i].pName);
-    #endif
-                    if (pProc)
-                    {
-                        // function exists in the library,
-                        // save the pointer.
-                        callTable[i] = pProc;
-                    }
-                    else
-                    {
-                        // The library doesn't contain the function
-                        DISPATCHER_LOG_WRN((("Can't find API function \"%s\"\n"), APIFunc[i].pName));
-                        if (apiVersion.Version >= APIFunc[i].apiVersion.Version)
-                        {
-                            DISPATCHER_LOG_ERROR((("\"%s\" is required for API %u.%u\n"), APIFunc[i].pName, apiVersion.Major, apiVersion.Minor));
-                            mfxRes = MFX_ERR_UNSUPPORTED;
-                            break;
-                        }
-                    }
-                }
-            }
-        }
-        else
-        {
-            DISPATCHER_LOG_WRN((("can't find DLL: dlerror() = \"%s\"\n"), dlerror()));
-            mfxRes = MFX_ERR_UNSUPPORTED;
-        }
-    }
-
-    // initialize the loaded DLL
-    if (MFX_ERR_NONE == mfxRes)
-    {
-        mfxVersion version(apiVersion);
-
-        /* check whether it is audio session or video */
-        mfxFunctionPointer *actualTable = (impl & MFX_IMPL_AUDIO) ? callAudioTable : callTable;
-
-        // Call old-style MFXInit init for older libraries and audio library
-        bool callOldInit = (impl & MFX_IMPL_AUDIO) || !actualTable[eMFXInitEx]; // if true call eMFXInit, if false - eMFXInitEx
-        int tableIndex = (callOldInit) ? eMFXInit : eMFXInitEx;
-
-        mfxFunctionPointer pFunc = actualTable[tableIndex];
-
-        {
-            if (callOldInit)
-            {
-                DISPATCHER_LOG_BLOCK(("MFXInit(%s,ver=%u.%u,session=0x%p)\n"
-                                     , DispatcherLog_GetMFXImplString(impl | implInterface).c_str()
-                                     , apiVersion.Major
-                                     , apiVersion.Minor
-                                     , &session));
-
-                mfxRes = (*(mfxStatus(MFX_CDECL *) (mfxIMPL, mfxVersion *, mfxSession *)) pFunc) (impl | implInterface, &version, &session);
-            }
-            else
-            {
-                DISPATCHER_LOG_BLOCK(("MFXInitEx(%s,ver=%u.%u,ExtThreads=%d,session=0x%p)\n"
-                                     , DispatcherLog_GetMFXImplString(impl | implInterface).c_str()
-                                     , apiVersion.Major
-                                     , apiVersion.Minor
-                                     , par.ExternalThreads
-                                     , &session));
-
-                mfxInitParam initPar = par;
-                // adjusting user parameters
-                initPar.Implementation = impl | implInterface;
-                initPar.Version = version;
-                mfxRes = (*(mfxStatus(MFX_CDECL *) (mfxInitParam, mfxSession *)) pFunc) (initPar, &session);
-            }
-        }
-
-        if (MFX_ERR_NONE != mfxRes)
-        {
-            DISPATCHER_LOG_WRN((("library can't be load. MFXInit returned %s \n"), DispatcherLog_GetMFXStatusString(mfxRes)))
-        }
-        else
-        {
-            mfxRes = MFXQueryVersion((mfxSession) this, &actualApiVersion);
-
-            if (MFX_ERR_NONE != mfxRes)
-            {
-                DISPATCHER_LOG_ERROR((("MFXQueryVersion returned: %d, skiped this library\n"), mfxRes))
-            }
-            else
-            {
-                DISPATCHER_LOG_INFO((("MFXQueryVersion returned API: %d.%d\n"), actualApiVersion.Major, actualApiVersion.Minor))
-                //special hook for applications that uses sink api to get loaded library path
-                DISPATCHER_LOG_LIBRARY(("%p" , hModule));
-                DISPATCHER_LOG_INFO(("library loaded succesfully\n"))
-            }
-        }
-    }
-
-    loadStatus = mfxRes;
-    return mfxRes;
-
-} // mfxStatus MFX_DISP_HANDLE::LoadSelectedDLL(const msdk_disp_char *pPath, eMfxImplType implType, mfxIMPL impl)
-
-mfxStatus MFX_DISP_HANDLE::UnLoadSelectedDLL(void)
-{
-    mfxStatus mfxRes = MFX_ERR_NONE;
-
-    //unregistered plugins if any
-    pluginFactory.Close();
-
-    // close the loaded DLL
-    if (session)
-    {
-        /* check whether it is audio session or video */
-        int tableIndex = eMFXClose;
-        mfxFunctionPointer pFunc;
-        if (impl & MFX_IMPL_AUDIO)
-        {
-            pFunc = callAudioTable[tableIndex];
-        }
-        else
-        {
-            pFunc = callTable[tableIndex];
-        }
-
-        mfxRes = (*(mfxStatus (MFX_CDECL *) (mfxSession)) pFunc) (session);
-        if (MFX_ERR_NONE == mfxRes)
-        {
-            session = (mfxSession) 0;
-        }
-
-        DISPATCHER_LOG_INFO((("MFXClose(0x%x) returned %d\n"), session, mfxRes));
-        // actually, the return value is required to pass outside only.
-    }
-
-    // it is possible, that there is an active child session.
-    // can't unload library in that case.
-    if ((MFX_ERR_UNDEFINED_BEHAVIOR != mfxRes) &&
-        (hModule))
-    {
-        // unload the library.
-        if (!MFX::mfx_dll_free(hModule))
-        {
-            mfxRes = MFX_ERR_UNDEFINED_BEHAVIOR;
-        }
-        hModule = (mfxModuleHandle) 0;
-    }
-
-    return mfxRes;
-
-} // mfxStatus MFX_DISP_HANDLE::UnLoadSelectedDLL(void)
\ No newline at end of file
diff --git a/api/opensource/mfx_dispatch/src/mfx_dispatcher_log.cpp b/api/opensource/mfx_dispatch/src/mfx_dispatcher_log.cpp
deleted file mode 100644
index 010ba8a..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_dispatcher_log.cpp
+++ /dev/null
@@ -1,424 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#if defined(MFX_DISPATCHER_LOG)
-
-#include "mfx_dispatcher_log.h"
-#include "mfxstructures.h"
-#include <stdarg.h>
-#include <algorithm>
-#include <string>
-#include <sstream>
-
-struct CodeStringTable
-{
-    int code;
-    const char *string;
-} LevelStrings []= 
-{
-    {DL_INFO,  "INFO:   "},
-    {DL_WRN,   "WARNING:"},
-    {DL_ERROR, "ERROR:  "}
-};
-
-#define DEFINE_CODE(code)\
-    {code, #code}
-
-static CodeStringTable StringsOfImpl[] = {
-    DEFINE_CODE(MFX_IMPL_AUTO),       
-    DEFINE_CODE(MFX_IMPL_SOFTWARE),
-    DEFINE_CODE(MFX_IMPL_HARDWARE),     
-    DEFINE_CODE(MFX_IMPL_AUTO_ANY),     
-    DEFINE_CODE(MFX_IMPL_HARDWARE_ANY), 
-    DEFINE_CODE(MFX_IMPL_HARDWARE2), 
-    DEFINE_CODE(MFX_IMPL_HARDWARE3), 
-    DEFINE_CODE(MFX_IMPL_HARDWARE4), 
-
-    DEFINE_CODE(MFX_IMPL_UNSUPPORTED)
-};
-
-static CodeStringTable StringsOfImplVIA[] = {
-    DEFINE_CODE(MFX_IMPL_VIA_ANY),
-    DEFINE_CODE(MFX_IMPL_VIA_D3D9),
-    DEFINE_CODE(MFX_IMPL_VIA_D3D11),
-};
-
-static CodeStringTable StringsOfStatus[] =
-{
-    DEFINE_CODE(MFX_ERR_NONE                    ),
-    DEFINE_CODE(MFX_ERR_UNKNOWN                 ),
-    DEFINE_CODE(MFX_ERR_NULL_PTR                ),
-    DEFINE_CODE(MFX_ERR_UNSUPPORTED             ),
-    DEFINE_CODE(MFX_ERR_MEMORY_ALLOC            ),
-    DEFINE_CODE(MFX_ERR_NOT_ENOUGH_BUFFER       ),
-    DEFINE_CODE(MFX_ERR_INVALID_HANDLE          ),
-    DEFINE_CODE(MFX_ERR_LOCK_MEMORY             ),
-    DEFINE_CODE(MFX_ERR_NOT_INITIALIZED         ),
-    DEFINE_CODE(MFX_ERR_NOT_FOUND               ),
-    DEFINE_CODE(MFX_ERR_MORE_DATA               ),
-    DEFINE_CODE(MFX_ERR_MORE_SURFACE            ),
-    DEFINE_CODE(MFX_ERR_ABORTED                 ),
-    DEFINE_CODE(MFX_ERR_DEVICE_LOST             ),
-    DEFINE_CODE(MFX_ERR_INCOMPATIBLE_VIDEO_PARAM),
-    DEFINE_CODE(MFX_ERR_INVALID_VIDEO_PARAM     ),
-    DEFINE_CODE(MFX_ERR_UNDEFINED_BEHAVIOR      ),
-    DEFINE_CODE(MFX_ERR_DEVICE_FAILED           ),
-    DEFINE_CODE(MFX_WRN_IN_EXECUTION            ),
-    DEFINE_CODE(MFX_WRN_DEVICE_BUSY             ),
-    DEFINE_CODE(MFX_WRN_VIDEO_PARAM_CHANGED     ),
-    DEFINE_CODE(MFX_WRN_PARTIAL_ACCELERATION    ),
-    DEFINE_CODE(MFX_WRN_INCOMPATIBLE_VIDEO_PARAM),
-    DEFINE_CODE(MFX_WRN_VALUE_NOT_CHANGED       ),
-    DEFINE_CODE(MFX_WRN_OUT_OF_RANGE            ),
-    
-};
-
-#define CODE_TO_STRING(code,  array)\
-    CodeToString(code, array, sizeof(array)/sizeof(array[0]))
-
-const char* CodeToString(int code, CodeStringTable array[], int len )
-{
-    for (int i = 0 ; i < len; i++)
-    {
-        if (array[i].code == code)
-            return array[i].string;
-    }
-    return "undef";
-}
-
-std::string DispatcherLog_GetMFXImplString(int impl)
-{
-    std::string str1 = CODE_TO_STRING(impl & ~(-MFX_IMPL_VIA_ANY), StringsOfImpl);
-    std::string str2 = CODE_TO_STRING(impl & (-MFX_IMPL_VIA_ANY), StringsOfImplVIA);
-
-    return str1 + (str2 == "undef" ? "" : "|"+str2);
-}
-
-const char *DispatcherLog_GetMFXStatusString(int sts)
-{
-    return CODE_TO_STRING(sts, StringsOfStatus);
-}
-
-//////////////////////////////////////////////////////////////////////////
-
-
-void DispatcherLogBracketsHelper::Write(const char * str, ...)
-{
-    va_list argsptr;
-    va_start(argsptr, str);
-    DispatchLog::get().Write(m_level, m_opcode, str, argsptr);
-    va_end(argsptr);
-}
-
-void DispatchLogBlockHelper::Write(const char * str, ...)
-{
-    va_list argsptr;
-    va_start(argsptr, str);
-    DispatchLog::get().Write(m_level, DL_EVENT_START, str, argsptr);
-    va_end(argsptr);
-}
-
-DispatchLogBlockHelper::~DispatchLogBlockHelper()
-{
-    DispatchLog::get().Write(m_level, DL_EVENT_STOP, NULL, NULL);
-}
-
-//////////////////////////////////////////////////////////////////////////
-
-DispatchLog::DispatchLog()
- : m_DispatcherLogSink(DL_SINK_PRINTF)
-{
-
-}
-
-void   DispatchLog::SetSink(int nSink, IMsgHandler * pHandler)
-{
-    DetachAllSinks();
-    AttachSink(nSink, pHandler);
-}
-
-void   DispatchLog::AttachSink(int nsink, IMsgHandler *pHandler)
-{
-    m_DispatcherLogSink |= nsink;
-    if (NULL != pHandler)
-        m_Recepients.push_back(pHandler);
-}
-
-void   DispatchLog::DetachSink(int nsink, IMsgHandler *pHandler)
-{
-    if (nsink & DL_SINK_IMsgHandler)
-    {
-        m_Recepients.remove(pHandler);
-    }
-
-    m_DispatcherLogSink &= ~nsink;
-}
-
-void   DispatchLog::ExchangeSink(int nsink, IMsgHandler *oldHdl, IMsgHandler *newHdl)
-{
-    if (nsink & DL_SINK_IMsgHandler)
-    {
-        std::list<IMsgHandler*> :: iterator it = std::find(m_Recepients.begin(), m_Recepients.end(), oldHdl);
-        
-        //cannot exchange in that case
-        if (m_Recepients.end() == it)
-            return;
-
-        *it = newHdl;
-    }
-}
-
-
-void   DispatchLog::DetachAllSinks()
-{
-    m_Recepients.clear();
-    m_DispatcherLogSink = DL_SINK_NULL;
-}
-
-void   DispatchLog::Write(int level, int opcode, const char * msg, va_list argptr)
-{
-    int sinkTable[] =
-    {
-        DL_SINK_PRINTF,
-        DL_SINK_IMsgHandler,
-    };
-
-    for (size_t i = 0; i < sizeof(sinkTable) / sizeof(sinkTable[0]); i++)
-    {
-        switch(m_DispatcherLogSink & sinkTable[i])
-        {
-            case  DL_SINK_NULL:
-                break;
-            
-            case DL_SINK_PRINTF:
-            {
-                char msg_formated[8048] = {0};
-
-                if (NULL != msg && level != DL_LOADED_LIBRARY)
-                {
-                    vsnprintf(msg_formated, sizeof(msg_formated)/sizeof(msg_formated[0]), msg, argptr);
-                    //TODO: improve this , add opcode handling
-                    printf("%s %s", CODE_TO_STRING(level, LevelStrings), msg_formated);
-                }
-                break;
-            }
-
-            case DL_SINK_IMsgHandler:
-            {
-                std::list<IMsgHandler*>::iterator it;
-
-                for (it = m_Recepients.begin(); it != m_Recepients.end(); ++it)
-                {
-                    (*it)->Write(level, opcode, msg, argptr);
-                }
-                break;
-            }
-        }
-    }
-}
-
-#if defined(DISPATCHER_LOG_REGISTER_EVENT_PROVIDER)
-class ETWHandler : public IMsgHandler
-{
-public:
-    ETWHandler(const wchar_t * guid_str)
-      : m_bUseFormatter(DISPATCHER_LOG_USE_FORMATING)
-      , m_EventHandle()
-      , m_bProviderEnable()
-    {
-        GUID rguid = GUID_NULL;
-        if (FAILED(CLSIDFromString(guid_str, &rguid)))
-        {
-            return;
-        }
-        
-        EventRegister(&rguid, NULL, NULL, &m_EventHandle);
-
-        m_bProviderEnable = 0 != EventProviderEnabled(m_EventHandle, 1,0);
-    }
-
-    ~ETWHandler()
-    {
-        if (m_EventHandle)
-        {
-            EventUnregister(m_EventHandle);
-        }
-    }
-
-    virtual void Write(int level, int opcode, const char * msg, va_list argptr)
-    {
-        //event not registered
-        if (0==m_EventHandle)
-        {
-            return;
-        }
-        if (!m_bProviderEnable)
-        {
-            return;
-        }
-        if (level == DL_LOADED_LIBRARY)
-        {
-            return;
-        }
-
-        char msg_formated[1024];
-        EVENT_DESCRIPTOR descriptor;
-        EVENT_DATA_DESCRIPTOR data_descriptor;
-
-        EventDescZero(&descriptor);
-        
-        descriptor.Opcode = (UCHAR)opcode; 
-        descriptor.Level  = (UCHAR)level;
-        
-        if (m_bUseFormatter)
-        {
-            if (NULL != msg)
-            {
-                vsnprintf(msg_formated, sizeof (msg_formated) / sizeof (msg_formated[0]), msg, argptr);
-                EventDataDescCreate(&data_descriptor, msg_formated, (ULONG)(strlen(msg_formated) + 1));
-            }else
-            {
-                EventDataDescCreate(&data_descriptor, NULL, 0);
-            }
-        }else
-        {
-            //TODO: non formated events supports under zbb 
-        }
-
-        EventWrite(m_EventHandle, &descriptor, 1, &data_descriptor);
-    }
-
-protected:
-
-    //we may not use formatter in some cases described in dispatch_log macro
-    //it significantly increases performance by eliminating any vsprintf operations
-    bool      m_bUseFormatter;
-    //consumer is attached, dispatcher trace to reduce formating overhead 
-    //submits event only if consumer attached
-    bool      m_bProviderEnable;
-    REGHANDLE m_EventHandle;
-};
-//
-
-
-IMsgHandler *ETWHandlerFactory::GetSink(const wchar_t* sguid)
-{
-    _storage_type::iterator it;
-    it = m_storage.find(sguid);
-    if (it == m_storage.end())
-    {
-        ETWHandler * handler = new ETWHandler(sguid);
-        _storage_type::_Pairib it_bool = m_storage.insert(_storage_type::value_type(sguid, handler));
-        it = it_bool.first;
-    }
-
-   return it->second;
-}
-
-ETWHandlerFactory::~ETWHandlerFactory()
-{
-    for each(_storage_type::value_type val in m_storage)
-    {
-        delete val.second;
-    }
-}
-
-class EventRegistrator : public IMsgHandler
-{
-    const wchar_t * m_sguid;
-public:
-    EventRegistrator(const wchar_t* sguid = DISPATCHER_LOG_EVENT_GUID)
-        :m_sguid(sguid)
-    {
-        DispatchLog::get().AttachSink( DL_SINK_IMsgHandler
-                                      , this);
-    }
-
-    virtual void Write(int level, int opcode, const char * msg, va_list argptr)
-    {
-        //we cannot call attach sink since we may have been called from iteration
-        //we axchanging preserve that placeholding
-        IMsgHandler * pSink = NULL;
-        DispatchLog::get().ExchangeSink(DL_SINK_IMsgHandler,
-                                        this,
-                                        pSink = ETWHandlerFactory::get().GetSink(m_sguid));
-        //need to call only once here all next calls will be done inside dispatcherlog
-        if (NULL != pSink)
-        {
-            pSink->Write(level, opcode, msg, argptr);
-        }
-    }
-};
-#endif
-
-template <class TSink>
-class SinkRegistrator
-{
-};
-
-#if defined(DISPATCHER_LOG_REGISTER_EVENT_PROVIDER)
-template <>
-class SinkRegistrator<ETWHandlerFactory>
-{
-public:
-    SinkRegistrator(const wchar_t* sguid = DISPATCHER_LOG_EVENT_GUID)
-    {
-        DispatchLog::get().AttachSink( DL_SINK_IMsgHandler
-                                      , ETWHandlerFactory::get().GetSink(sguid));
-    }
-};
-#endif
-
-#if defined(DISPATCHER_LOG_REGISTER_FILE_WRITER)
-template <>
-class SinkRegistrator<FileSink>
-{
-public:
-    SinkRegistrator()
-    {
-        DispatchLog::get().AttachSink( DL_SINK_IMsgHandler, &FileSink::get(DISPACTHER_LOG_FW_PATH));
-    }
-};
-
-void FileSink::Write(int level, int /*opcode*/, const char * msg, va_list argptr)
-{
-    if (NULL != m_hdl && NULL != msg)
-    {
-        fprintf(m_hdl, "%s", CODE_TO_STRING(level, LevelStrings));
-        vfprintf(m_hdl, msg, argptr);
-    }
-}
-#endif
-
-//////////////////////////////////////////////////////////////////////////
-//singletons initialization section
-
-
-#ifdef  DISPATCHER_LOG_REGISTER_EVENT_PROVIDER
-    static SinkRegistrator<ETWHandlerFactory> g_registrator1;
-#endif
-
-
-#ifdef DISPATCHER_LOG_REGISTER_FILE_WRITER
-    static SinkRegistrator<FileSink> g_registrator2;
-#endif
-
-
-#endif//(MFX_DISPATCHER_LOG)
\ No newline at end of file
diff --git a/api/opensource/mfx_dispatch/src/mfx_dxva2_device.cpp b/api/opensource/mfx_dispatch/src/mfx_dxva2_device.cpp
deleted file mode 100644
index 95bcde7..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_dxva2_device.cpp
+++ /dev/null
@@ -1,20 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
diff --git a/api/opensource/mfx_dispatch/src/mfx_function_table.cpp b/api/opensource/mfx_dispatch/src/mfx_function_table.cpp
deleted file mode 100644
index 19568a0..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_function_table.cpp
+++ /dev/null
@@ -1,133 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#include "mfx_dispatcher.h"
-
-//
-// implement a table with functions names
-//
-
-#undef FUNCTION
-#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list) \
-    {#func_name, API_VERSION},
-
-const
-FUNCTION_DESCRIPTION APIFunc[eVideoFuncTotal] =
-{
-    {"MFXInit", {{0, 1}}},
-    {"MFXClose", {{0, 1}}},
-    {"MFXQueryIMPL", {{0, 1}}},
-    {"MFXQueryVersion", {{0, 1}}},
-
-    {"MFXJoinSession", {{1, 1}}},
-    {"MFXDisjoinSession", {{1, 1}}},
-    {"MFXCloneSession", {{1, 1}}},
-    {"MFXSetPriority", {{1, 1}}},
-    {"MFXGetPriority", {{1, 1}}},
-    
-    {"MFXInitEx", {{1, 14}}},
-
-#include "mfx_exposed_functions_list.h"
-};
-
-const
-FUNCTION_DESCRIPTION APIAudioFunc[eAudioFuncTotal] =
-{
-    {"MFXInit", {{8, 1}}},
-    {"MFXClose", {{8, 1}}},
-    {"MFXQueryIMPL", {{8, 1}}},
-    {"MFXQueryVersion", {{8, 1}}},
-
-    {"MFXJoinSession", {{8, 1}}},
-    {"MFXDisjoinSession", {{8, 1}}},
-    {"MFXCloneSession", {{8, 1}}},
-    {"MFXSetPriority", {{8, 1}}},
-    {"MFXGetPriority", {{8, 1}}},
-
-#include "mfxaudio_exposed_functions_list.h"
-};
-
-// static section of the file
-namespace
-{
-
-//
-// declare pseudo-functions.
-// they are used as default values for call-tables.
-//
-
-mfxStatus pseudoMFXInit(mfxIMPL impl, mfxVersion *ver, mfxSession *session)
-{
-    // touch unreferenced parameters
-    (void) impl;
-    (void) ver;
-    (void) session;
-
-    return MFX_ERR_UNKNOWN;
-
-} // mfxStatus pseudoMFXInit(mfxIMPL impl, mfxVersion *ver, mfxSession *session)
-
-mfxStatus pseudoMFXClose(mfxSession session)
-{
-    // touch unreferenced parameters
-    (void) session;
-
-    return MFX_ERR_UNKNOWN;
-
-} // mfxStatus pseudoMFXClose(mfxSession session)
-
-mfxStatus pseudoMFXJoinSession(mfxSession session, mfxSession child_session)
-{
-    // touch unreferenced parameters
-    (void) session;
-    (void) child_session;
-
-    return MFX_ERR_UNKNOWN;
-
-} // mfxStatus pseudoMFXJoinSession(mfxSession session, mfxSession child_session)
-
-mfxStatus pseudoMFXCloneSession(mfxSession session, mfxSession *clone)
-{
-    // touch unreferenced parameters
-    (void) session;
-    (void) clone;
-
-    return MFX_ERR_UNKNOWN;
-
-} // mfxStatus pseudoMFXCloneSession(mfxSession session, mfxSession *clone)
-
-void SuppressWarnings(...)
-{
-    // this functions is suppose to suppress warnings.
-    // Actually it does nothing.
-
-} // void SuppressWarnings(...)
-
-#undef FUNCTION
-#define FUNCTION(return_value, func_name, formal_param_list, actual_param_list) \
-return_value pseudo##func_name formal_param_list \
-{ \
-    SuppressWarnings actual_param_list; \
-    return MFX_ERR_UNKNOWN; \
-}
-
-#include "mfx_exposed_functions_list.h"
-
-} // namespace
diff --git a/api/opensource/mfx_dispatch/src/mfx_library_iterator.cpp b/api/opensource/mfx_dispatch/src/mfx_library_iterator.cpp
deleted file mode 100644
index b374ae5..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_library_iterator.cpp
+++ /dev/null
@@ -1,21 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-
diff --git a/api/opensource/mfx_dispatch/src/mfx_library_iterator_linux.cpp b/api/opensource/mfx_dispatch/src/mfx_library_iterator_linux.cpp
deleted file mode 100644
index cd1b6e9..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_library_iterator_linux.cpp
+++ /dev/null
@@ -1,373 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-
-
-#include <sys/types.h>
-#include <sys/stat.h>
-#include <dirent.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <unistd.h>
-
-#include <mfx_library_iterator.h>
-
-#include <mfx_dispatcher.h>
-#include <mfx_dispatcher_log.h>
-
-#define MFX_PCI_DIR "/sys/bus/pci/devices"
-#define MFX_PCI_DISPLAY_CONTROLLER_CLASS 0x03
-
-#if defined(LINUX64)
-    static const char mfx_so_hw_base_name[] = "libmfxhw64-p.so";
-    static const char mfx_so_sw_base_name[] = "libmfxsw64-p.so";
-#else
-    static const char mfx_so_hw_base_name[] = "libmfxhw32-p.so";
-    static const char mfx_so_sw_base_name[] = "libmfxsw32-p.so";
-#endif
-
-
-static int mfx_dir_filter(const struct dirent* dir_ent)
-{
-    if (!dir_ent) return 0;
-    if (!strcmp(dir_ent->d_name, ".")) return 0;
-    if (!strcmp(dir_ent->d_name, "..")) return 0;
-    return 1;
-}
-
-typedef int (*fsort)(const struct dirent**, const struct dirent**);
-
-static mfxU32 mfx_init_adapters(struct mfx_disp_adapters** p_adapters)
-{
-    mfxU32 adapters_num = 0;
-    int i = 0;
-    struct mfx_disp_adapters* adapters = NULL;
-    struct dirent** dir_entries = NULL;
-    int entries_num = scandir(MFX_PCI_DIR, &dir_entries, mfx_dir_filter, (fsort)alphasort);
-
-    // sizeof(MFX_PCI_DIR) = 20, sizeof(dirent::d_name) <= 256, sizeof("class"|"vendor"|"device") = 6
-    char file_name[300] = {};
-    // sizeof("0xzzzzzz") = 8
-    char str[16] = {0};
-    FILE* file = NULL;
-
-    for (i = 0; i < entries_num; ++i)
-    {
-        long int class_id = 0, vendor_id = 0, device_id = 0;
-
-        if (!dir_entries[i]) continue;
-        // obtaining device class id
-        snprintf(file_name, sizeof(file_name)/sizeof(file_name[0]), "%s/%s/%s", MFX_PCI_DIR, dir_entries[i]->d_name, "class");
-        file = fopen(file_name, "r");
-        if (file)
-        {
-            if (fgets(str, sizeof(str), file))
-            {
-                class_id = strtol(str, NULL, 16);
-            }
-            fclose(file);
-
-            if (MFX_PCI_DISPLAY_CONTROLLER_CLASS == (class_id >> 16))
-            {
-                // obtaining device vendor id
-                snprintf(file_name, sizeof(file_name)/sizeof(file_name[0]), "%s/%s/%s", MFX_PCI_DIR, dir_entries[i]->d_name, "vendor");
-                file = fopen(file_name, "r");
-                if (file)
-                {
-                    if (fgets(str, sizeof(str), file))
-                    {
-                        vendor_id = strtol(str, NULL, 16);
-                    }
-                    fclose(file);
-                }
-                // obtaining device id
-                snprintf(file_name, sizeof(file_name)/sizeof(file_name[0]), "%s/%s/%s", MFX_PCI_DIR, dir_entries[i]->d_name, "device");
-                file = fopen(file_name, "r");
-                if (file)
-                {
-                    if (fgets(str, sizeof(str), file))
-                    {
-                        device_id = strtol(str, NULL, 16);
-                    }
-                    fclose(file);
-                }
-                // adding valid adaptor to the list
-                if (vendor_id && device_id)
-                {
-                    struct mfx_disp_adapters* tmp_adapters = NULL;
-
-                    tmp_adapters = (mfx_disp_adapters*)realloc(adapters,
-                                                               (adapters_num+1)*sizeof(struct mfx_disp_adapters));
-
-                    if (tmp_adapters)
-                    {
-                        adapters = tmp_adapters;
-                        adapters[adapters_num].vendor_id = vendor_id;
-                        adapters[adapters_num].device_id = device_id;
-                        ++adapters_num;
-                    }
-                }
-            }
-        }
-        free(dir_entries[i]);
-    }
-    if (entries_num) free(dir_entries);
-    if (p_adapters) *p_adapters = adapters;
-    return adapters_num;
-}
-
-static mfxU32 mfx_list_libraries(const char* path, bool search_hw, struct mfx_libs** p_libs)
-{
-    mfxU32 libs_num = 0;
-    size_t len = 0;
-    int i = 0;
-    struct mfx_libs* libs = NULL;
-    struct dirent** dir_entries = NULL;
-    int entries_num = scandir(path, &dir_entries, mfx_dir_filter, (fsort)alphasort);
-
-    for (i = 0; i < entries_num; ++i)
-    {
-        unsigned long int major = 0, minor = 0;
-        char* p_major = NULL;
-        char* p_minor = NULL;
-        char* p = NULL;
-        bool b_skip = false;
-
-        if (!dir_entries[i]) continue;
-
-        len = strlen(dir_entries[i]->d_name);
-        if (len < MFX_MIN_REAL_LIBNAME) goto skip;
-        if (len > MFX_MAX_REAL_LIBNAME) goto skip;
-
-        if (search_hw)
-        {
-            if (strncmp(dir_entries[i]->d_name, mfx_so_hw_base_name, MFX_SO_BASE_NAME_LEN)) goto skip;
-        }
-        else
-        {
-            if (strncmp(dir_entries[i]->d_name, mfx_so_sw_base_name, MFX_SO_BASE_NAME_LEN)) goto skip;
-        }
-
-        for (p = &(dir_entries[i]->d_name[MFX_SO_BASE_NAME_LEN]); !b_skip && *p; ++p)
-        {
-            if ('.' == *p)
-            {
-                if (!p_major) p_major = p;
-                else if (!p_minor) p_minor = p;
-                else b_skip = true;
-            }
-            else if (!strchr("0123456789", *p))
-            {
-                b_skip = true;
-            }
-        }
-        if (b_skip) goto skip;
-
-        if (!p_major || !p_minor) goto skip;
-        if (p_major != &(dir_entries[i]->d_name[MFX_SO_BASE_NAME_LEN])) goto skip;
-        ++p_major;
-        if (p_major == p_minor) goto skip;
-        ++p_minor;
-        if (!(*p_minor)) goto skip;
-        
-        major = strtoul(p_major, NULL, 10);
-        minor = strtoul(p_minor, NULL, 10);
-        if ((major <= 0xFFFF) && (minor <= 0xFFFF))
-        {
-            struct mfx_libs* tmp_libs = NULL;
-            tmp_libs = (mfx_libs*)realloc(libs,
-                                          (libs_num+1)*sizeof(struct mfx_libs));
-            if (tmp_libs)
-            {
-                libs = tmp_libs;
-                strncpy(libs[libs_num].name, dir_entries[i]->d_name, MFX_MAX_REAL_LIBNAME);
-                libs[libs_num].name[MFX_MAX_REAL_LIBNAME] = 0;
-                libs[libs_num].version.Major = (mfxU16)major;
-                libs[libs_num].version.Minor = (mfxU16)minor;
-                ++libs_num;
-            }
-        }
-
-    skip:
-        free(dir_entries[i]);
-    }
-    if (entries_num) free(dir_entries);
-    if (p_libs) *p_libs = libs;
-    return libs_num;
-}
-
-namespace MFX
-{
-
-mfxStatus SelectImplementationType(const mfxU32 adapterNum, mfxIMPL *pImplInterface, mfxU32 *pVendorID, mfxU32 *pDeviceID)
-{
-    mfx_disp_adapters* adapters = NULL;
-    unsigned int adapters_num = mfx_init_adapters(&adapters);
-    if (pVendorID && pDeviceID && adapterNum < adapters_num)
-    {
-        *pVendorID = adapters[adapterNum].vendor_id;
-        *pDeviceID = adapters[adapterNum].device_id;
-    }
-    if (adapters_num) free(adapters);
-
-    if (adapterNum >= adapters_num)
-        return MFX_ERR_UNSUPPORTED;
-
-    if ((*pImplInterface != MFX_IMPL_VIA_ANY) &&
-        (*pImplInterface != MFX_IMPL_VIA_VAAPI) )
-        return MFX_ERR_UNSUPPORTED;
-
-    *pImplInterface = MFX_IMPL_VIA_VAAPI;
-    return MFX_ERR_NONE;
-}
-
-MFXLibraryIterator::MFXLibraryIterator(void)
-    : m_implType(MFX_LIB_PSEUDO)
-    , m_implInterface(MFX_IMPL_UNSUPPORTED)
-    , m_vendorID(0)
-    , m_deviceID(0)
-    , m_bIsSubKeyValid(false)
-    , m_StorageID(0)
-    , m_lastLibIndex(-1)
-    , m_adapters(NULL)
-    , m_selected_adapter(0)
-    , m_libs_num(0)
-    , m_libs(NULL)
-{
-    m_SubKeyName[0] = 0;
-    m_path[0] = 0;
-
-    m_adapters_num = mfx_init_adapters(&m_adapters);
-}
-
-MFXLibraryIterator::~MFXLibraryIterator(void)
-{
-    Release();
-    if (m_adapters_num) free(m_adapters);
-}
-
-void MFXLibraryIterator::Release(void)
-{
-    m_implType = MFX_LIB_PSEUDO;
-
-    m_vendorID = 0;
-    m_deviceID = 0;
-
-    m_lastLibIndex = -1;
-    if (m_libs)
-    {
-        free(m_libs);
-        m_libs = NULL;
-    }
-    m_libs_num = 0;
-}
-
-mfxStatus MFXLibraryIterator::Init(eMfxImplType implType, mfxIMPL impl, const mfxU32 adapter_num, int storageID)
-{
-    // release the object before initialization
-    Release();
-
-    // check error(s)
-    if (MFX_LIB_HARDWARE == implType)
-    {
-        if (!m_adapters_num || (adapter_num >= m_adapters_num))
-        {
-            return MFX_ERR_UNSUPPORTED;
-        }
-        m_selected_adapter = adapter_num;
-        m_vendorID = m_adapters[m_selected_adapter].vendor_id;
-        m_deviceID = m_adapters[m_selected_adapter].device_id;
-    }
-    else if (MFX_LIB_SOFTWARE != implType)
-    {
-        return MFX_ERR_UNSUPPORTED;
-    }
-    if (MFX_STORAGE_ID_OPT != storageID)
-    {
-        return MFX_ERR_UNSUPPORTED;
-    }
-
-    // set the required library's implementation type
-    m_implType = implType;
-
-    snprintf(m_path, sizeof(m_path)/sizeof(m_path[0]),
-             "%s", MFX_MODULES_DIR);
-
-    m_libs_num = mfx_list_libraries(m_path, (MFX_LIB_HARDWARE == implType), &m_libs);
-    
-    if (!m_libs_num)
-    {
-        Release();
-        return MFX_ERR_UNSUPPORTED;
-    }
-
-    return MFX_ERR_NONE;
-}
-
-mfxStatus MFXLibraryIterator::SelectDLLVersion(char *pPath, size_t pathSize,
-                                               eMfxImplType* pImplType, mfxVersion minVersion)
-{
-    if (m_lastLibIndex < 0)
-    {
-        for (int i = m_libs_num - 1; i >= 0; i--)
-        {
-            if (m_libs[i].version.Major == minVersion.Major && m_libs[i].version.Minor >= minVersion.Minor)
-            {
-                    m_lastLibIndex = i;
-                    break;
-            }
-        }
-    }
-    else
-        m_lastLibIndex--;
-
-    if (m_lastLibIndex < 0)
-        return MFX_ERR_NOT_FOUND;
-    
-    if (m_libs[m_lastLibIndex].version.Major != minVersion.Major ||
-        m_libs[m_lastLibIndex].version.Minor < minVersion.Minor)
-    {
-        m_lastLibIndex = -1;
-        return MFX_ERR_NOT_FOUND;
-    }
-
-    snprintf(pPath, pathSize, "%s/%s", m_path, m_libs[m_lastLibIndex].name);
-
-    if (pImplType) *pImplType = (!m_vendorID && !m_deviceID)? MFX_LIB_SOFTWARE: MFX_LIB_HARDWARE;
-
-    return MFX_ERR_NONE;
-}
-
-mfxIMPL MFXLibraryIterator::GetImplementationType()
-{
-    if (m_selected_adapter < 0 || static_cast<unsigned int>(m_selected_adapter) >= m_adapters_num)
-        return MFX_ERR_UNSUPPORTED;
-
-    return MFX_IMPL_VIA_VAAPI;
-}
-
-bool MFXLibraryIterator::GetSubKeyName(msdk_disp_char *subKeyName, size_t length) const
-{
-    return false;
-}
-
-} // namespace MFX
-
diff --git a/api/opensource/mfx_dispatch/src/mfx_load_dll.cpp b/api/opensource/mfx_dispatch/src/mfx_load_dll.cpp
deleted file mode 100644
index 95bcde7..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_load_dll.cpp
+++ /dev/null
@@ -1,20 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
diff --git a/api/opensource/mfx_dispatch/src/mfx_load_dll_linux.cpp b/api/opensource/mfx_dispatch/src/mfx_load_dll_linux.cpp
deleted file mode 100644
index 1c05d68..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_load_dll_linux.cpp
+++ /dev/null
@@ -1,121 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-
-#include "mfx_dispatcher.h"
-#include <dlfcn.h>
-#include <string.h>
-
-#if defined(LINUX64)
-const msdk_disp_char * defaultDLLName[2] = {"libmfxhw64.so",
-                                            "libmfxsw64.so"};
-const msdk_disp_char * defaultAudioDLLName[2] = {"libmfxaudiosw64.so",
-                                                 "libmfxaudiosw64.so"};
-
-const msdk_disp_char * defaultPluginDLLName[2] = {"libmfxplugin64_hw.so",
-                                                 "libmfxplugin64_sw.so"};
-
-
-#else // for Linux32 and Android
-const msdk_disp_char * defaultDLLName[2] = {"libmfxhw32.so",
-                                            "libmfxsw32.so"};
-const msdk_disp_char * defaultAudioDLLName[2] = {"libmfxaudiosw32.so",
-                                            "libmfxaudiosw32.so"};
-
-const msdk_disp_char * defaultPluginDLLName[2] = {"libmfxplugin32_hw.so",
-                                                  "libmfxplugin32_sw.so"};
-#endif
-
-namespace MFX
-{
-
-mfxStatus mfx_get_default_dll_name(msdk_disp_char *pPath, size_t /*pathSize*/, eMfxImplType implType)
-{
-    strcpy(pPath, defaultDLLName[implType & 1]);
-
-    return MFX_ERR_NONE;
-
-} // mfxStatus GetDefaultDLLName(wchar_t *pPath, size_t pathSize, eMfxImplType implType)
-
-
-mfxStatus mfx_get_default_plugin_name(msdk_disp_char *pPath, size_t pathSize, eMfxImplType implType)
-{
-    strcpy(pPath, defaultPluginDLLName[implType & 1]);
-
-    return MFX_ERR_NONE;
-}
-
-
-mfxStatus mfx_get_default_audio_dll_name(msdk_disp_char *pPath, size_t /*pathSize*/, eMfxImplType implType)
-{
-    strcpy(pPath, defaultAudioDLLName[implType & 1]);
-
-    return MFX_ERR_NONE;
-
-} // mfxStatus GetDefaultAudioDLLName(wchar_t *pPath, size_t pathSize, eMfxImplType implType)
-
-mfxModuleHandle mfx_dll_load(const msdk_disp_char *pFileName)
-{
-    mfxModuleHandle hModule = (mfxModuleHandle) 0;
-
-    // check error(s)
-    if (NULL == pFileName)
-    {
-        return NULL;
-    }
-    // load the module
-    hModule = dlopen(pFileName, RTLD_LOCAL|RTLD_NOW);
-
-    return hModule;
-} // mfxModuleHandle mfx_dll_load(const wchar_t *pFileName)
-
-mfxFunctionPointer mfx_dll_get_addr(mfxModuleHandle handle, const char *pFunctionName)
-{
-    if (NULL == handle)
-    {
-        return NULL;
-    }
-
-    mfxFunctionPointer addr = (mfxFunctionPointer) dlsym(handle, pFunctionName);
-    if (!addr)
-    {
-        return NULL;
-    }
-
-    return addr;
-} // mfxFunctionPointer mfx_dll_get_addr(mfxModuleHandle handle, const char *pFunctionName)
-
-bool mfx_dll_free(mfxModuleHandle handle)
-{
-    if (NULL == handle)
-    {
-        return true;
-    }
-    dlclose(handle);
-
-    return true;
-} // bool mfx_dll_free(mfxModuleHandle handle)
-
-mfxModuleHandle mfx_get_dll_handle(const msdk_disp_char *pFileName) {
-    return mfx_dll_load(pFileName);
-}
-
-} // namespace MFX
-
diff --git a/api/opensource/mfx_dispatch/src/mfx_load_plugin.cpp b/api/opensource/mfx_dispatch/src/mfx_load_plugin.cpp
deleted file mode 100644
index 74ec154..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_load_plugin.cpp
+++ /dev/null
@@ -1,453 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-#include "mfx_load_plugin.h"
-#include "mfx_load_dll.h"
-#include "mfx_dispatcher_log.h"
-
-#define TRACE_PLUGIN_ERROR(str, ...) DISPATCHER_LOG_ERROR((("[PLUGIN]: " str), __VA_ARGS__))
-#define TRACE_PLUGIN_INFO(str, ...) DISPATCHER_LOG_INFO((("[PLUGIN]: " str), __VA_ARGS__))
-
-#define CREATE_PLUGIN_FNC "CreatePlugin"
-
-MFX::PluginModule::PluginModule()
-    : mHmodule()
-    , mCreatePluginPtr()
-    , mPath()
-{
-}
-
-MFX::PluginModule::PluginModule(const PluginModule & that)
-    : mHmodule(mfx_dll_load(that.mPath))
-    , mCreatePluginPtr(that.mCreatePluginPtr)
-{
-    msdk_disp_char_cpy_s(mPath, sizeof(mPath) / sizeof(*mPath), that.mPath);
-}
-
-MFX::PluginModule & MFX::PluginModule::operator = (const MFX::PluginModule & that)
-{
-    if (this != &that)
-    {
-        Tidy();
-        mHmodule = mfx_dll_load(that.mPath);
-        mCreatePluginPtr = that.mCreatePluginPtr;
-        msdk_disp_char_cpy_s(mPath, sizeof(mPath) / sizeof(*mPath), that.mPath);
-    }
-    return *this;
-}
-
-MFX::PluginModule::PluginModule(const msdk_disp_char * path)
-    : mCreatePluginPtr()
-{
-    mHmodule = mfx_dll_load(path);
-    if (NULL == mHmodule) {
-        TRACE_PLUGIN_ERROR("Cannot load module: %S\n", MSDK2WIDE(path));
-        return ;
-    }
-    TRACE_PLUGIN_INFO("Plugin loaded at: %S\n", MSDK2WIDE(path));
-
-    mCreatePluginPtr = (CreatePluginPtr_t)mfx_dll_get_addr(mHmodule, CREATE_PLUGIN_FNC);
-    if (NULL == mCreatePluginPtr) {
-        TRACE_PLUGIN_ERROR("Cannot get procedure address: %s\n", CREATE_PLUGIN_FNC);
-        return ;
-    }
-
-    msdk_disp_char_cpy_s(mPath, sizeof(mPath) / sizeof(*mPath), path);
-}
-
-bool MFX::PluginModule::Create( mfxPluginUID uid, mfxPlugin& plg)
-{
-    bool result = false;
-    if (mCreatePluginPtr)
-    {
-        mfxStatus mfxResult = mCreatePluginPtr(uid, &plg);
-        result = (MFX_ERR_NONE == mfxResult);
-        if (!result) {
-            TRACE_PLUGIN_ERROR("\"%S::%s\" returned %d\n", MSDK2WIDE(mPath), CREATE_PLUGIN_FNC, mfxResult);
-        } else {
-            TRACE_PLUGIN_INFO("\"%S::%s\" SUCCEED\n", MSDK2WIDE(mPath), CREATE_PLUGIN_FNC);
-        }
-    }
-    return result;
-}
-
-void MFX::PluginModule::Tidy()
-{
-    mfx_dll_free(mHmodule);
-    mCreatePluginPtr = NULL;
-    mHmodule = NULL;
-}
-
-MFX::PluginModule::~PluginModule(void)
-{
-    Tidy();
-}
-
-#if !defined(MEDIASDK_UWP_PROCTABLE)
-
-bool MFX::MFXPluginFactory::RunVerification( const mfxPlugin & plg, const PluginDescriptionRecord &dsc, mfxPluginParam &pluginParams)
-{
-    if (plg.PluginInit == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->PluginInit = 0\n", 0);
-        return false;
-    }
-    if (plg.PluginClose == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->PluginClose = 0\n", 0);
-        return false;
-    }
-    if (plg.GetPluginParam == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->GetPluginParam = 0\n", 0);
-        return false;
-    }
-
-    if (plg.Execute == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Execute = 0\n", 0);
-        return false;
-    }
-    if (plg.FreeResources == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->FreeResources = 0\n", 0);
-        return false;
-    }
-
-    mfxStatus sts = plg.GetPluginParam(plg.pthis, &pluginParams);
-    if (sts != MFX_ERR_NONE)
-    {
-        TRACE_PLUGIN_ERROR("plg->GetPluginParam() returned %d\n", sts);
-        return false;
-    }
-
-    if (dsc.Default)
-    {
-        // for default plugins there is no description, dsc.APIVersion, dsc.PluginVersion and dsc.PluginUID were set by dispatcher
-        // dsc.PluginVersion == requested plugin version (parameter of MFXVideoUSER_Load); dsc.APIVersion == loaded library API
-        if (dsc.PluginVersion > pluginParams.PluginVersion)
-        {
-            TRACE_PLUGIN_ERROR("plg->GetPluginParam() returned PluginVersion=%d, but it is smaller than requested : %d\n", pluginParams.PluginVersion, dsc.PluginVersion);
-            return false;
-        }
-    }
-    else
-    {
-        if (!dsc.onlyVersionRegistered && pluginParams.CodecId != dsc.CodecId)
-        {
-            TRACE_PLUGIN_ERROR("plg->GetPluginParam() returned CodecId=" MFXFOURCCTYPE()", but registration has CodecId=" MFXFOURCCTYPE()"\n"
-                , MFXU32TOFOURCC(pluginParams.CodecId), MFXU32TOFOURCC(dsc.CodecId));
-            return false;
-        }
-
-        if (!dsc.onlyVersionRegistered && pluginParams.Type != dsc.Type)
-        {
-            TRACE_PLUGIN_ERROR("plg->GetPluginParam() returned Type=%d, but registration has Type=%d\n", pluginParams.Type, dsc.Type);
-            return false;
-        }
-
-        if (pluginParams.PluginUID !=  dsc.PluginUID)
-        {
-            TRACE_PLUGIN_ERROR("plg->GetPluginParam() returned UID=" MFXGUIDTYPE()", but registration has UID=" MFXGUIDTYPE()"\n"
-                , MFXGUIDTOHEX(&pluginParams.PluginUID), MFXGUIDTOHEX(&dsc.PluginUID));
-            return false;
-        }
-
-        if (pluginParams.PluginVersion != dsc.PluginVersion)
-        {
-            TRACE_PLUGIN_ERROR("plg->GetPluginParam() returned PluginVersion=%d, but registration has PlgVer=%d\n", pluginParams.PluginVersion, dsc.PluginVersion);
-            return false;
-        }
-
-        if (pluginParams.APIVersion.Version != dsc.APIVersion.Version)
-        {
-            TRACE_PLUGIN_ERROR("plg->GetPluginParam() returned APIVersion=%d.%d, but registration has APIVer=%d.%d\n"
-                , pluginParams.APIVersion.Major, pluginParams.APIVersion.Minor
-                , dsc.APIVersion.Major, dsc.APIVersion.Minor);
-            return false;
-        }
-    }
-
-    switch(pluginParams.Type)
-    {
-        case MFX_PLUGINTYPE_VIDEO_DECODE:
-        case MFX_PLUGINTYPE_VIDEO_ENCODE:
-        case MFX_PLUGINTYPE_VIDEO_VPP:
-        {
-            TRACE_PLUGIN_INFO("plugin type= %d\n", pluginParams.Type);
-            if (plg.Video == 0)
-            {
-                TRACE_PLUGIN_ERROR("plg->Video = 0\n", 0);
-                return false;
-            }
-
-            if (!VerifyCodecCommon(*plg.Video))
-                return false;
-            break;
-        }
-    }
-
-    switch(pluginParams.Type)
-    {
-        case MFX_PLUGINTYPE_VIDEO_DECODE:
-            return VerifyDecoder(*plg.Video);
-        case MFX_PLUGINTYPE_AUDIO_DECODE:
-            return VerifyAudioDecoder(*plg.Audio);
-        case MFX_PLUGINTYPE_VIDEO_ENCODE:
-            return VerifyEncoder(*plg.Video);
-        case MFX_PLUGINTYPE_AUDIO_ENCODE:
-            return VerifyAudioEncoder(*plg.Audio);
-        case MFX_PLUGINTYPE_VIDEO_VPP:
-            return VerifyVpp(*plg.Video);
-        case MFX_PLUGINTYPE_VIDEO_ENC:
-            return VerifyEnc(*plg.Video);
-        default:
-        {
-            TRACE_PLUGIN_ERROR("unsupported plugin type: %d\n", pluginParams.Type);
-            return false;
-        }
-    }
-}
-
-bool MFX::MFXPluginFactory::VerifyVpp( const mfxVideoCodecPlugin &vpp )
-{
-    if (vpp.VPPFrameSubmit == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->VPPFrameSubmit = 0\n", 0);
-        return false;
-    }
-
-    return true;
-
-}
-
-bool MFX::MFXPluginFactory::VerifyEncoder( const mfxVideoCodecPlugin &encoder )
-{
-    if (encoder.EncodeFrameSubmit == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->EncodeFrameSubmit = 0\n", 0);
-        return false;
-    }
-
-    return true;
-}
-
-bool MFX::MFXPluginFactory::VerifyAudioEncoder( const mfxAudioCodecPlugin &encoder )
-{
-    if (encoder.EncodeFrameSubmit == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Audio->EncodeFrameSubmit = 0\n", 0);
-        return false;
-    }
-
-    return true;
-}
-
-bool MFX::MFXPluginFactory::VerifyEnc( const mfxVideoCodecPlugin &videoEnc )
-{
-    if (videoEnc.ENCFrameSubmit == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->EncodeFrameSubmit = 0\n", 0);
-        return false;
-    }
-
-    return true;
-}
-
-bool MFX::MFXPluginFactory::VerifyDecoder( const mfxVideoCodecPlugin &decoder )
-{
-    if (decoder.DecodeHeader == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->DecodeHeader = 0\n", 0);
-        return false;
-    }
-    if (decoder.GetPayload == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->GetPayload = 0\n", 0);
-        return false;
-    }
-    if (decoder.DecodeFrameSubmit == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->DecodeFrameSubmit = 0\n", 0);
-        return false;
-    }
-
-    return true;
-}
-
-bool MFX::MFXPluginFactory::VerifyAudioDecoder( const mfxAudioCodecPlugin &decoder )
-{
-    if (decoder.DecodeHeader == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Audio->DecodeHeader = 0\n", 0);
-        return false;
-    }
-//    if (decoder.GetPayload == 0)
-    {
-  //      TRACE_PLUGIN_ERROR("plg->Audio->GetPayload = 0\n", 0);
-    //    return false;
-    }
-    if (decoder.DecodeFrameSubmit == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Audio->DecodeFrameSubmit = 0\n", 0);
-        return false;
-    }
-
-    return true;
-}
-
-bool MFX::MFXPluginFactory::VerifyCodecCommon( const mfxVideoCodecPlugin & videoCodec )
-{
-    if (videoCodec.Query == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->Query = 0\n", 0);
-        return false;
-    }
-    //todo: remove
-    if (videoCodec.Query == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->Query = 0\n", 0);
-        return false;
-    }
-    if (videoCodec.QueryIOSurf == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->QueryIOSurf = 0\n", 0);
-        return false;
-    }
-    if (videoCodec.Init == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->Init = 0\n", 0);
-        return false;
-    }
-    if (videoCodec.Reset == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->Reset = 0\n", 0);
-        return false;
-    }
-    if (videoCodec.Close == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->Close = 0\n", 0);
-        return false;
-    }
-    if (videoCodec.GetVideoParam == 0)
-    {
-        TRACE_PLUGIN_ERROR("plg->Video->GetVideoParam = 0\n", 0);
-        return false;
-    }
-
-    return true;
-}
-
-mfxStatus MFX::MFXPluginFactory::Create(const PluginDescriptionRecord & rec)
-{
-    PluginModule plgModule(rec.sPath);
-    mfxPlugin plg = {};
-    mfxPluginParam plgParams;
-
-    if (!plgModule.Create(rec.PluginUID, plg))
-    {
-        return MFX_ERR_UNKNOWN;
-    }
-
-    if (!RunVerification(plg, rec, plgParams))
-    {
-        //will do not call plugin close since it is not safe to do that until structure is corrected
-        return MFX_ERR_UNKNOWN;
-    }
-
-
-    if (rec.Type == MFX_PLUGINTYPE_AUDIO_DECODE ||
-        rec.Type == MFX_PLUGINTYPE_AUDIO_ENCODE)
-    {
-        mfxStatus sts = MFXAudioUSER_Register(mSession, plgParams.Type, &plg);
-        if (MFX_ERR_NONE != sts)
-        {
-            TRACE_PLUGIN_ERROR(" MFXAudioUSER_Register returned %d\n", sts);
-            return sts;
-        }
-    }
-    else
-    {
-        mfxStatus sts = MFXVideoUSER_Register(mSession, plgParams.Type, &plg);
-        if (MFX_ERR_NONE != sts)
-        {
-            TRACE_PLUGIN_ERROR(" MFXVideoUSER_Register returned %d\n", sts);
-            return sts;
-        }
-    }
-
-    mPlugins.push_back(FactoryRecord(plgParams, plgModule, plg));
-
-    return MFX_ERR_NONE;
-}
-
-MFX::MFXPluginFactory::~MFXPluginFactory()
-{
-    Close();
-}
-
-MFX::MFXPluginFactory::MFXPluginFactory( mfxSession session )
-{
-    mSession = session;
-    nPlugins = 0;
-}
-
-bool MFX::MFXPluginFactory::Destroy( const mfxPluginUID & uidToDestroy)
-{
-    for (MFXVector<FactoryRecord >::iterator i = mPlugins.begin(); i!= mPlugins.end(); i++)
-    {
-        if (i->plgParams.PluginUID == uidToDestroy)
-        {
-            DestroyPlugin(*i);
-            //dll unload should happen here
-            //todo: check that dll_free fail is traced
-            mPlugins.erase(i);
-            return  true;
-        }
-    }
-    return false;
-}
-
-void MFX::MFXPluginFactory::Close()
-{
-    for (MFXVector<FactoryRecord>::iterator i = mPlugins.begin(); i!= mPlugins.end(); i++)
-    {
-        DestroyPlugin(*i);
-    }
-    mPlugins.clear();
-}
-
-void MFX::MFXPluginFactory::DestroyPlugin( FactoryRecord & record)
-{
-    mfxStatus sts;
-    if (record.plgParams.Type == MFX_PLUGINTYPE_AUDIO_DECODE ||
-        record.plgParams.Type == MFX_PLUGINTYPE_AUDIO_ENCODE)
-    {
-        sts = MFXAudioUSER_Unregister(mSession, record.plgParams.Type);
-        TRACE_PLUGIN_INFO(" MFXAudioUSER_Unregister for Type=%d, returned %d\n", record.plgParams.Type, sts);
-    }
-    else
-    {
-        sts = MFXVideoUSER_Unregister(mSession, record.plgParams.Type);
-        TRACE_PLUGIN_INFO(" MFXVideoUSER_Unregister for Type=%d, returned %d\n", record.plgParams.Type, sts);
-    }
-}
-
-#endif //!defined(MEDIASDK_UWP_PROCTABLE)
diff --git a/api/opensource/mfx_dispatch/src/mfx_plugin_cfg_parser.cpp b/api/opensource/mfx_dispatch/src/mfx_plugin_cfg_parser.cpp
deleted file mode 100644
index 3a3a6fc..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_plugin_cfg_parser.cpp
+++ /dev/null
@@ -1,374 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-
-#include "mfx_plugin_cfg_parser.h"
-#include "mfx_dispatcher_log.h"
-#include <stdlib.h>
-#include <ctype.h>
-
-const int guidLen = 16;
-
-// In-place strip trailing whitespace chars
-static char* Strip(char* s)
-{
-    char* p = s + strlen(s);
-    while (p > s && isspace(*--p))
-    {
-        *p = 0;
-    }
-    return s;
-}
-
-// Search for the first non-whitespace char
-static char* SkipWhitespace(char* s)
-{
-    while (*s && isspace(*s))
-    {
-        s++;
-    }
-    return s;
-}
-
-// Return pointer to first char c or ';' comment in given string, or pointer to
-// null at end of string if neither found. ';' must be prefixed by a whitespace
-// character to register as a comment.
-static char* FindCharOrComment(char* s, char c)
-{
-    int whitespaceFound = 0;
-    while (*s && *s != c && !(whitespaceFound && *s == ';'))
-    {
-        whitespaceFound = isspace(*s);
-        s++;
-    }
-    return s;
-}
-
-// Version of strncpy that ensures dest (size bytes) is null-terminated.
-static char* strncpy0(char* dest, const char* src, size_t size)
-{
-    strncpy(dest, src, size);
-    dest[size - 1] = 0;
-    return dest;
-}
-
-enum
-{
-    MAX_SECTION = 4096
-};
-
-namespace MFX
-{
-
-bool parseGUID(const char* src, mfxU8* guid)
-{
-    mfxU32 p[guidLen];
-    int res = sscanf(src, 
-        "%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
-        p, p + 1, p + 2, p + 3, p + 4, p + 5, p + 6, p + 7, 
-        p + 8, p + 9, p + 10, p + 11, p + 12, p + 13, p + 14, p + 15);
-    if (res != guidLen)
-        return false;
-
-    for (int i = 0; i < guidLen; i++)
-        guid[i] = (mfxU8)p[i];
-    return true;
-}
-
-PluginConfigParser::PluginConfigParser(const char * name)
-    : sectionStart()
-{
-    cfgFile = fopen(name, "rt");
-}
-
-PluginConfigParser::~PluginConfigParser()
-{
-    if (cfgFile)
-    {
-        fclose(cfgFile);
-    }
-}
-
-// Returns current section name if any
-bool PluginConfigParser::GetCurrentPluginName(char * pluginName, int nChars)
-{
-    if (!cfgFile)
-        return false;
-
-    char line[MAX_PLUGIN_NAME];
-    char section[MAX_SECTION] = "";
-    bool foundSection = false;
-    char * start;
-    char * end;
-
-    if (fgets(line, MAX_PLUGIN_NAME, cfgFile))
-    {
-        start = SkipWhitespace(Strip(line));
-        if (*start == '[')
-        {
-            // A "[section]" line
-            end = FindCharOrComment(start + 1, ']');
-            if (*end == ']') {
-                *end = '\0';
-                strncpy0(pluginName, start + 1, nChars);
-                foundSection = true;
-            }
-        }
-    }
-    fsetpos(cfgFile, &sectionStart);
-
-    return foundSection;
-}
-
-// Tries to advance to the next section in config file
-bool PluginConfigParser::AdvanceToNextPlugin()
-{
-    if (!cfgFile)
-        return false;
-
-    char line[MAX_PLUGIN_NAME];
-    char section[MAX_SECTION] = "";
-    bool foundSection = false;
-    char * start;
-    char * end;
-
-    fgetpos(cfgFile, &sectionStart);
-    // advance one line from current section
-    if (!fgets(line, MAX_PLUGIN_NAME, cfgFile))
-        return false;
-    
-    fpos_t lastReadLine = sectionStart;
-    while (!foundSection && fgets(line, MAX_PLUGIN_NAME, cfgFile))
-    {
-        start = SkipWhitespace(Strip(line));
-
-        if (*start == '[')
-        {
-            // A "[section]" line            
-            end = FindCharOrComment(start + 1, ']');
-            if (*end == ']') {
-                foundSection = true;
-                sectionStart = lastReadLine;
-            }
-        }
-        fgetpos(cfgFile, &lastReadLine);
-    }
-
-    fsetpos(cfgFile, &sectionStart);
-    return foundSection;
-}
-
-// Return to first ini file section
-bool PluginConfigParser::Rewind()
-{
-    if (!cfgFile)
-        return false;
-
-    fseek(cfgFile, 0, SEEK_SET);
-    fgetpos(cfgFile, &sectionStart);
-
-    return true;
-}
-
-// Enumerates sections in currect file
-int PluginConfigParser::GetPluginCount()
-{
-    if (!cfgFile)
-        return -1;
-
-    Rewind();
-    
-    int counter = 0;
-
-    do 
-    { 
-        counter++;
-    } while (AdvanceToNextPlugin());
-
-    // special case - plugin.cfg without section header
-    if (counter == 0)
-    {
-        int size = fseek(cfgFile, 0, SEEK_END);
-        if (size > 0)
-            counter = 1;
-    }
-
-    Rewind();
-
-    return counter;
-}
-
-
-bool PluginConfigParser::ParseSingleParameter(const char * name, char * value, PluginDescriptionRecord & dst, mfxU32 & parsedFields)
-{
-    if (0 == strcmp(name, "Type"))
-    {
-        dst.Type = atoi(value);
-        parsedFields |= PARSED_TYPE;
-        return true;
-    }
-    if (0 == strcmp(name, "CodecID"))
-    {
-        const int fourccLen = 4;
-        if (strlen(value) == 0 || strlen(value) > fourccLen)
-            return false;
-
-        dst.CodecId = MFX_MAKEFOURCC(' ',' ',' ',' ');
-        char *codecID = reinterpret_cast<char*>(&dst.CodecId);
-        for (size_t i = 0; i < strlen(value); i++)
-            codecID[i] = value[i];
-
-        parsedFields |= PARSED_CODEC_ID;
-        return true;
-    }
-    if (0 == strcmp(name, "GUID"))
-    {
-        if (!parseGUID(value, dst.PluginUID.Data))
-            return false;
-
-        parsedFields |= PARSED_UID;
-        return true;
-    }
-    if (0 == strcmp(name, "Path") ||
-#ifdef LINUX64        
-        0 == strcmp(name, "FileName64"))
-#else
-        0 == strcmp(name, "FileName32"))
-#endif
-    {
-        // strip quotes
-        const int lastCharIndex = strlen(value) - 1;
-        if (value[0] == '"' && value[lastCharIndex] == '"')
-        {
-            value[lastCharIndex] = '\0';
-            value = value + 1;
-        }
-        if (strlen(dst.sPath) + strlen("/") + strlen(value) >= MAX_PLUGIN_PATH)
-            return false;
-        strcpy(dst.sPath + strlen(dst.sPath), "/");
-        strcpy(dst.sPath + strlen(dst.sPath), value);
-        parsedFields |= PARSED_PATH;
-        return true;
-    }
-    if (0 == strcmp(name, "Default"))
-    {
-        dst.Default = (0 != atoi(value));
-        parsedFields |= PARSED_DEFAULT;
-        return true;
-    }
-    if (0 == strcmp(name, "PluginVersion"))
-    {
-        dst.PluginVersion = atoi(value);        
-        parsedFields |= PARSED_VERSION;
-        return true;
-    }
-    if (0 == strcmp(name, "APIVersion"))
-    {
-        mfxU32 APIVersion = atoi(value);
-        dst.APIVersion.Minor = static_cast<mfxU16> (APIVersion & 0xff);
-        dst.APIVersion.Major = static_cast<mfxU16> (APIVersion >> 8);
-        parsedFields |= PARSED_API_VERSION;
-        return true;
-    }
-
-    return false;
-}
-
-bool PluginConfigParser::ParsePluginParams(PluginDescriptionRecord & dst, mfxU32 & parsedFields)
-{
-    if (!cfgFile)
-        return false;
-
-    char line[MAX_PLUGIN_NAME];
-
-    char* start;
-    char* end;
-    char* name;
-    char* value;
-    bool error = false;
-    
-    int parsedHeaders = 0;
-    fgetpos(cfgFile, &sectionStart);
-
-    // Scan through file line by line 
-    while (fgets(line, MAX_PLUGIN_NAME, cfgFile))
-    {
-        start = SkipWhitespace(Strip(line));
-
-        if (*start == ';' || *start == '#')
-        {
-            // Allow '#' and ';' comments at start of line
-        }
-        else if (*start == '[')
-        {
-            if (++parsedHeaders == 1)
-            {
-                // no interest in section header here
-                continue;
-            }
-            else
-            {
-                // we found next header
-                break;
-            }
-        }
-        else if (*start && *start != ';')
-        {
-            // do not allow header in the middle of plugin description
-            parsedHeaders = 1;
-            // Not a comment, must be a name[=:]value pair
-            end = FindCharOrComment(start, '=');
-            if (*end != '=')
-            {
-                end = FindCharOrComment(start, ':');
-            }
-            if (*end == '=' || *end == ':')
-            {
-                *end = 0;
-                name = Strip(start);
-                value = SkipWhitespace(end + 1);
-                end = FindCharOrComment(value, 0);
-                if (*end == ';')
-                {
-                    *end = 0;
-                }
-                Strip(value);
-
-                // Valid name[=:]value pair found, call handler
-                ParseSingleParameter(name, value, dst, parsedFields);
-            }
-            else if (!error) 
-            {
-                // No '=' or ':' found on name[=:]value line
-                error = true;
-            }
-        }
-        // Store section start for next iteration
-        // fgetpos(cfgFile, &sectionStart);
-    }
-
-    // restore previous position in file
-    fsetpos(cfgFile, &sectionStart);
-
-    return !error && (parsedFields != 0);
-}
-
-} // namespace MFX
-
diff --git a/api/opensource/mfx_dispatch/src/mfx_plugin_hive.cpp b/api/opensource/mfx_dispatch/src/mfx_plugin_hive.cpp
deleted file mode 100644
index 95bcde7..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_plugin_hive.cpp
+++ /dev/null
@@ -1,20 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
diff --git a/api/opensource/mfx_dispatch/src/mfx_plugin_hive_linux.cpp b/api/opensource/mfx_dispatch/src/mfx_plugin_hive_linux.cpp
deleted file mode 100644
index 24417bb..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_plugin_hive_linux.cpp
+++ /dev/null
@@ -1,391 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-
-#include "mfx_plugin_hive.h"
-#include "mfx_library_iterator.h"
-#include "mfx_dispatcher.h"
-#include "mfx_dispatcher_log.h"
-#include "mfx_load_dll.h"
-#include "mfx_plugin_cfg_parser.h"
-
-#include <dirent.h>
-#include <ctype.h>
-#include <stdlib.h>
-#include <unistd.h>
-#include <dlfcn.h>
-#include <sys/stat.h>
-
-#define TRACE_HIVE_ERROR(str, ...) DISPATCHER_LOG_ERROR((("[HIVE]: " str), __VA_ARGS__))
-#define TRACE_HIVE_INFO(str, ...) DISPATCHER_LOG_INFO((("[HIVE]: " str), __VA_ARGS__))
-#define TRACE_HIVE_WRN(str, ...) DISPATCHER_LOG_WRN((("[HIVE]: " str), __VA_ARGS__))
-
-namespace
-{
-#ifdef ANDROID
-
-#if (MFX_ANDROID_VERSION >= MFX_O)
-    const char rootPluginPath[] = "/vendor/etc/mediasdk_plugins.cfg";
-#else
-    const char rootPluginPath[] = "/etc/mediasdk_plugins.cfg";
-#endif
-
-#else
-    const char rootPluginPath[] = MFX_PLUGINS_DIR"/plugins.cfg";
-#endif
-    //const wchar_t rootDispatchPath[] = L"Software\\Intel\\MediaSDK\\Dispatch";
-    const char pluginSubkey[] = "Plugin";
-    const char TypeKeyName[] = "Type";
-    const char CodecIDKeyName[] = "CodecID";
-    const char GUIDKeyName[] = "GUID";
-    const char PathKeyName[] = "Path";
-    const char DefaultKeyName[] = "Default";
-    const char PlgVerKeyName[] = "PluginVersion";
-    const char APIVerKeyName[] = "APIVersion";
-}
-
-namespace
-{
-#ifdef LINXU64
-    const char pluginFileName[] = "FileName64";
-#else
-    const char pluginFileName[] = "FileName32";
-#endif // LINXU64
-    //do not allow store plugin in different hierarchy
-    const char pluginFileNameRestrictedCharacters[] = "\\/";
-    const char pluginCfgFileName[] = "plugin.cfg";
-    const char pluginSearchPattern[] = "????????????????????????????????";
-    const mfxU32 pluginCfgFileNameLen = 10;
-    const mfxU32 pluginDirNameLen = 32;
-    const mfxU32 defaultPluginNameLen = 25;
-    const mfxU32 charsPermfxU8 = 2;
-    const mfxU32 slashLen = 1;
-    enum
-    {
-        MAX_PLUGIN_FILE_LINE = 4096
-    };
-}
-
-
-#define alignStr() "%-14S"
-
-namespace MFX
-{
-
-static bool isFieldMissed(mfxU32 parseMask, mfxU32 reqMask, mfxU32 field)
-{
-    return !(((parseMask & field) != 0) || ((reqMask & field) == 0)); //  !( reqMask & field => parseMask & field )
-}
-
-static bool CheckPluginRecord(PluginDescriptionRecord & descriptionRecord, mfxU32 foundFields, mfxU32 requiredFields)
-{
-    if (isFieldMissed(foundFields, requiredFields, PluginConfigParser::PARSED_TYPE))
-    {
-        return false;
-    }
-    TRACE_HIVE_INFO(alignStr()" : %d\n", TypeKeyName, descriptionRecord.Type);
-
-    if (isFieldMissed(foundFields, requiredFields, PluginConfigParser::PARSED_CODEC_ID))
-    {
-        TRACE_HIVE_INFO(alignStr()" : " MFXFOURCCTYPE()" \n", CodecIDKeyName, MFXU32TOFOURCC(descriptionRecord.CodecId));
-    }
-    else
-    {
-        TRACE_HIVE_INFO(alignStr()" : \n", CodecIDKeyName, "NOT REGISTERED");
-    }
-
-    if (isFieldMissed(foundFields, requiredFields, PluginConfigParser::PARSED_UID))
-    {
-        return false;
-    }
-    TRACE_HIVE_INFO(alignStr()" : " MFXGUIDTYPE()"\n", GUIDKeyName, MFXGUIDTOHEX(&descriptionRecord.PluginUID));
-
-    if (isFieldMissed(foundFields, requiredFields, PluginConfigParser::PARSED_PATH))
-    {
-        TRACE_HIVE_WRN("no value for : %s\n", PathKeyName);
-        return false;
-    }
-    TRACE_HIVE_INFO(alignStr()" : %s\n", PathKeyName, descriptionRecord.sPath);
-
-    if (isFieldMissed(foundFields, requiredFields, PluginConfigParser::PARSED_DEFAULT))
-    {
-        return false;
-    }
-    TRACE_HIVE_INFO(alignStr()" : %s\n", DefaultKeyName, descriptionRecord.Default ? "true" : "false");
-
-    if (isFieldMissed(foundFields, requiredFields, PluginConfigParser::PARSED_VERSION))
-    {
-        TRACE_HIVE_ERROR(alignStr()" : %d, which is invalid\n", PlgVerKeyName, descriptionRecord.PluginVersion);
-        return false;
-    }
-    TRACE_HIVE_INFO(alignStr()" : %d\n", PlgVerKeyName, descriptionRecord.PluginVersion);
-
-    if (isFieldMissed(foundFields, requiredFields, PluginConfigParser::PARSED_API_VERSION))
-    {
-        TRACE_HIVE_ERROR(alignStr()" : %d.%d, which is invalid\n", APIVerKeyName, descriptionRecord.APIVersion.Major, descriptionRecord.APIVersion.Minor);
-        return false;
-    }
-    TRACE_HIVE_INFO(alignStr()" : %d.%d\n", APIVerKeyName, descriptionRecord.APIVersion.Major, descriptionRecord.APIVersion.Minor);
-
-    return true;
-}
-
-MFXPluginsInHive::MFXPluginsInHive(int, const msdk_disp_char* msdkLibSubKey, mfxVersion currentAPIVersion)
-    : MFXPluginStorageBase(currentAPIVersion)
-{
-    PluginConfigParser parser(rootPluginPath);
-    int numPlugins = parser.GetPluginCount();
-
-    if (numPlugins < 0)
-    {
-        TRACE_HIVE_ERROR("no plugin records found in %s\n", rootPluginPath);
-        return;
-    }
-
-    try
-    {
-        resize(numPlugins);
-    }
-    catch (...) {
-        TRACE_HIVE_ERROR("new PluginDescriptionRecord[%d] threw an exception: \n", numPlugins);
-        return;
-    }
-
-    for (int index = 0; index < numPlugins; index++, parser.AdvanceToNextPlugin())
-    {
-        PluginDescriptionRecord descriptionRecord;
-        try
-        {
-            char pluginName[MAX_PLUGIN_NAME];
-            bool nameRes = parser.GetCurrentPluginName(pluginName);
-
-            mfxU32 foundFields = 0;
-
-            bool infoRes = parser.ParsePluginParams(descriptionRecord, foundFields);
-            if (!nameRes || !infoRes)
-            {
-                TRACE_HIVE_WRN("unable to parse section # %d in %s\n", index, rootPluginPath);
-                continue;
-            }
-            TRACE_HIVE_INFO("Found Plugin: %s\n", pluginName);
-
-            mfxU32 reqs =  PluginConfigParser::PARSED_VERSION
-                         | PluginConfigParser::PARSED_API_VERSION
-                         | PluginConfigParser::PARSED_PATH
-                         | PluginConfigParser::PARSED_UID;
-//                       | PluginConfigParser::PARSED_NAME
-//                       | PluginConfigParser::PARSED_TYPE
-//                       | PluginConfigParser::PARSED_CODEC_ID
-//                       | PluginConfigParser::PARSED_DEFAULT;
-
-            if (CheckPluginRecord(descriptionRecord, foundFields, reqs))
-            {
-                (*this)[index] = descriptionRecord;
-            }
-            else
-            {
-                TRACE_HIVE_WRN("Registration of plugin %s found, but missed some fields (mask 0x%x)\n", pluginName, reqs ^ foundFields);
-            }
-        }
-        catch (...)
-        {
-            TRACE_HIVE_ERROR("operator[](%d) = descriptionRecord; - threw exception \n", index);
-        }
-    }
-}
-
-
-static int plugin_name_filter(const struct dirent * name)
-{
-    if (pluginDirNameLen != strlen(name->d_name))
-        return 0;
-    for (unsigned int i = 0; i < pluginDirNameLen; i++)
-    {
-        if (!isxdigit(name->d_name[i]))
-            return 0;
-    }
-
-    return 1;
-}
-
-
-MFXPluginsInFS::MFXPluginsInFS(mfxVersion currentAPIVersion)
-    : MFXPluginStorageBase(currentAPIVersion)
-    , mIsVersionParsed()
-    , mIsAPIVersionParsed()
-{
-    char selfName[MAX_PLUGIN_PATH];
-    ssize_t nRead = readlink("/proc/self/exe", selfName, sizeof(selfName) - 1);
-    if (nRead < 0)
-    {
-        TRACE_HIVE_ERROR("readlink(\"/proc/self/exe\") reported an error: %d\n", errno);
-        return;
-    }
-    selfName[nRead] = '\0';
-
-    char *lastSlashPos = strrchr(selfName, '/');
-    if (!lastSlashPos) {
-        lastSlashPos = selfName;
-    }
-    mfxU32 executableDirLen = (mfxU32)(lastSlashPos - selfName) + slashLen;
-    if (executableDirLen + pluginDirNameLen + pluginCfgFileNameLen >= MAX_PLUGIN_PATH)
-    {
-        TRACE_HIVE_ERROR("MAX_PLUGIN_PATH which is %d, not enough to locate plugin path\n", MAX_PLUGIN_PATH);
-        return;
-    }
-    // strncpy(lastSlashPos + slashLen, pluginSearchPattern, MAX_PLUGIN_PATH - executableDirLen);
-    *lastSlashPos = 0;
-
-
-    dirent **namelist;
-    int n = scandir(selfName, &namelist, plugin_name_filter, alphasort);
-    if (n < 0)
-    {
-        TRACE_HIVE_ERROR("Error %d scanning application directory %s\n", errno, selfName);
-    }
-    else
-    {
-        for (int i = 0; i < n; i++)
-        {
-            PluginDescriptionRecord descriptionRecord;
-            descriptionRecord.onlyVersionRegistered = true;
-            char cfgName[MAX_PLUGIN_PATH];
-            snprintf(cfgName, sizeof(cfgName), "%.512s/%.512s/%s", selfName, namelist[i]->d_name, pluginCfgFileName);
-            if ( strlen(selfName) + strlen("/") + strlen(namelist[i]->d_name) >= MAX_PLUGIN_PATH)
-            {
-                TRACE_HIVE_ERROR("buffer of MAX_PLUGIN_PATH characters which is %d, not enough to store plugin directory path: %s/%s\n",
-                    MAX_PLUGIN_PATH, selfName, namelist[i]->d_name);
-            }
-
-            strcpy(descriptionRecord.sPath, selfName);
-            strcpy(descriptionRecord.sPath + strlen(descriptionRecord.sPath), "/");
-            strcpy(descriptionRecord.sPath + strlen(descriptionRecord.sPath), namelist[i]->d_name);
-
-            if (!parseGUID(namelist[i]->d_name, descriptionRecord.PluginUID.Data))
-            {
-                TRACE_HIVE_ERROR("directory name %s is not valid guid\n", namelist[i]->d_name);
-                continue;
-            }
-            free(namelist[i]);
-
-            PluginConfigParser parser(cfgName);
-            int numPlugins = parser.GetPluginCount();
-
-            if (numPlugins < 0)
-            {
-                TRACE_HIVE_ERROR("no plugin records found in %s\n", cfgName);
-                continue;
-            }
-            if (numPlugins > 1)
-            {
-                TRACE_HIVE_ERROR("too many plugin records found in %s\n", cfgName);
-                continue;
-            }
-
-
-            try
-            {
-                char pluginName[MAX_PLUGIN_NAME];
-                bool nameRes = parser.GetCurrentPluginName(pluginName);
-                if (!nameRes)
-                {
-                    TRACE_HIVE_WRN("unable to parse plugin name from %s\n", cfgName);
-                }
-
-                mfxU32 foundFields = PluginConfigParser::PARSED_UID;
-
-                bool infoRes = parser.ParsePluginParams(descriptionRecord, foundFields);
-                if (!infoRes)
-                {
-                    TRACE_HIVE_WRN("unable to parse plugin information in %s\n", cfgName);
-                    continue;
-                }
-                TRACE_HIVE_INFO("Found Plugin: %s\n", pluginName);
-
-                mfxU32 reqs =  PluginConfigParser::PARSED_VERSION
-                             | PluginConfigParser::PARSED_API_VERSION
-                             | PluginConfigParser::PARSED_PATH
-                             | PluginConfigParser::PARSED_UID;
-
-                if (CheckPluginRecord(descriptionRecord, foundFields, reqs))
-                {
-                    push_back(descriptionRecord);
-                }
-            }
-            catch (...)
-            {
-                TRACE_HIVE_ERROR("push_back(descriptionRecord) - threw exception \n", index);
-            }
-
-        }
-        free(namelist);
-    }
-}
-
-MFXDefaultPlugins::MFXDefaultPlugins(mfxVersion currentAPIVersion, MFX_DISP_HANDLE * hdl, int implType)
-    : MFXPluginStorageBase(currentAPIVersion)
-{
-    msdk_disp_char libModuleName[MAX_PLUGIN_PATH];
-
-    Dl_info  DlInfo;
-    int  nRet;
-
-    if ((nRet = dladdr((const void *)hdl->callTable[eMFXInit], &DlInfo)) == 0)
-    {
-        TRACE_HIVE_ERROR("dladdr() reported an error: %s\n", dlerror());
-        return;
-    }
-    msdk_disp_char_cpy_s(libModuleName, sizeof(libModuleName), DlInfo.dli_fname);
-
-    msdk_disp_char *lastSlashPos = strrchr(libModuleName, '/');
-    if (!lastSlashPos) {
-        lastSlashPos = libModuleName;
-    }
-    mfxU32 executableDirLen = (mfxU32)(lastSlashPos - libModuleName) + slashLen;
-    if (executableDirLen + defaultPluginNameLen >= MAX_PLUGIN_PATH)
-    {
-        TRACE_HIVE_ERROR("MAX_PLUGIN_PATH which is %d, not enough to locate plugin path\n", MAX_PLUGIN_PATH);
-        return;
-    }
-
-    mfx_get_default_plugin_name(lastSlashPos + slashLen, MAX_PLUGIN_PATH - executableDirLen, (eMfxImplType)implType);
-
-    struct stat   buffer;
-    if (stat (libModuleName, &buffer) == 0)
-    {
-        // add single default plugin description
-        PluginDescriptionRecord descriptionRecord;
-        descriptionRecord.APIVersion = currentAPIVersion;
-        descriptionRecord.Default = true;
-
-        msdk_disp_char_cpy_s(descriptionRecord.sPath
-            , sizeof(descriptionRecord.sPath) / sizeof(*descriptionRecord.sPath), libModuleName);
-
-        push_back(descriptionRecord);
-    }
-    else
-    {
-        TRACE_HIVE_INFO("stat() unable to locate default plugin dll named %s\n", libModuleName);
-    }
-}
-
-} // namespace MFX
-
-
diff --git a/api/opensource/mfx_dispatch/src/mfx_win_reg_key.cpp b/api/opensource/mfx_dispatch/src/mfx_win_reg_key.cpp
deleted file mode 100644
index 95bcde7..0000000
--- a/api/opensource/mfx_dispatch/src/mfx_win_reg_key.cpp
+++ /dev/null
@@ -1,20 +0,0 @@
-// Copyright (c) 2017 Intel Corporation
-// 
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-// 
-// The above copyright notice and this permission notice shall be included in all
-// copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-// SOFTWARE.
-
-- 
2.17.2

