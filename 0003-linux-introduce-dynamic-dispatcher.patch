From 7b19090b916127b269e9c1b4163683d15116eca2 Mon Sep 17 00:00:00 2001
From: Dmitry Rogozhkin <dmitry.v.rogozhkin@intel.com>
Date: Fri, 5 Oct 2018 05:00:47 -0700
Subject: [PATCH 03/15] linux: introduce dynamic dispatcher

Dynamic dispatcher is prefarable since it permits to decouple
dispatcher fixes/changes from application updates. This is one
of the Linux community requests.

Dispatcher and library symbols are decoupled from each other:
 * libmfxhw64.so: MFXInit@LIBMFXHW_1.0
 * libmfx.so: MFXInit@LIBMFX_1.0

Signed-off-by: Dmitry Rogozhkin <dmitry.v.rogozhkin@intel.com>
---
 _studio/mfx_lib/Android.mk                   |   2 +-
 _studio/mfx_lib/CMakeLists.txt               |   2 +-
 _studio/mfx_lib/{libmfx.map => libmfxhw.map} |  22 ++--
 api/mfx_dispatch/linux/CMakeLists.txt        |  50 ++-------
 api/mfx_dispatch/linux/libmfx.map            | 111 +++++++++++++++++++
 5 files changed, 134 insertions(+), 53 deletions(-)
 rename _studio/mfx_lib/{libmfx.map => libmfxhw.map} (91%)
 create mode 100644 api/mfx_dispatch/linux/libmfx.map

diff --git a/_studio/mfx_lib/Android.mk b/_studio/mfx_lib/Android.mk
index 0e3a865..3572b50 100644
--- a/_studio/mfx_lib/Android.mk
+++ b/_studio/mfx_lib/Android.mk
@@ -57,7 +57,7 @@ MFX_LOCAL_STATIC_LIBRARIES_HW := \
 
 MFX_LOCAL_LDFLAGS_HW := \
     $(MFX_LDFLAGS) \
-    -Wl,--version-script=$(LOCAL_PATH)/mfx_lib/libmfx.map
+    -Wl,--version-script=$(LOCAL_PATH)/mfx_lib/libmfxhw.map
 
 # =============================================================================
 
diff --git a/_studio/mfx_lib/CMakeLists.txt b/_studio/mfx_lib/CMakeLists.txt
index d3a384a..cf3ed01 100644
--- a/_studio/mfx_lib/CMakeLists.txt
+++ b/_studio/mfx_lib/CMakeLists.txt
@@ -143,7 +143,7 @@ foreach( prefix ${MSDK_STUDIO_ROOT}/shared/src )
 endforeach()
 
 set( USE_STRICT_NAME TRUE )
-set( MFX_LDFLAGS "${MFX_ORIG_LDFLAGS} -Wl,--version-script=${MSDK_LIB_ROOT}/libmfx.map" )
+set( MFX_LDFLAGS "${MFX_ORIG_LDFLAGS} -Wl,--version-script=${MSDK_LIB_ROOT}/libmfxhw.map" )
 
 if( DEFINED MFX_LIBNAME )
   set( mfxlibname "${MFX_LIBNAME}")
diff --git a/_studio/mfx_lib/libmfx.map b/_studio/mfx_lib/libmfxhw.map
similarity index 91%
rename from _studio/mfx_lib/libmfx.map
rename to _studio/mfx_lib/libmfxhw.map
index 834eb29..a96309b 100644
--- a/_studio/mfx_lib/libmfx.map
+++ b/_studio/mfx_lib/libmfxhw.map
@@ -1,4 +1,4 @@
-LIBMFX_1.0 {
+LIBMFXHW_1.0 {
   global:
     MFXInit;
     MFXClose;
@@ -52,14 +52,14 @@ LIBMFX_1.0 {
     *;
 };
 
-LIBMFX_1.1 {
+LIBMFXHW_1.1 {
   global:
     MFXVideoUSER_Register;
     MFXVideoUSER_Unregister;
     MFXVideoUSER_ProcessFrameAsync;
-} LIBMFX_1.0;
+} LIBMFXHW_1.0;
 
-LIBMFX_1.10 {
+LIBMFXHW_1.10 {
   global:
     MFXVideoENC_Query;
     MFXVideoENC_QueryIOSurf;
@@ -69,9 +69,9 @@ LIBMFX_1.10 {
     MFXVideoENC_ProcessFrameAsync;
     MFXVideoVPP_RunFrameVPPAsyncEx;
 
-} LIBMFX_1.1;
+} LIBMFXHW_1.1;
 
-LIBMFX_1.13 {
+LIBMFXHW_1.13 {
   global:
     MFXVideoPAK_Query;
     MFXVideoPAK_QueryIOSurf;
@@ -79,18 +79,18 @@ LIBMFX_1.13 {
     MFXVideoPAK_Reset;
     MFXVideoPAK_Close;
     MFXVideoPAK_ProcessFrameAsync;
-} LIBMFX_1.10;
+} LIBMFXHW_1.10;
 
-LIBMFX_1.14 {
+LIBMFXHW_1.14 {
   global:
     MFXInitEx;
     MFXDoWork;
-} LIBMFX_1.13;
+} LIBMFXHW_1.13;
 
-LIBMFX_1.19 {
+LIBMFXHW_1.19 {
   global:
     MFXVideoENC_GetVideoParam;
     MFXVideoPAK_GetVideoParam;
     MFXVideoCORE_QueryPlatform;
     MFXVideoUSER_GetPlugin;
-} LIBMFX_1.14;
\ No newline at end of file
+} LIBMFXHW_1.14;
diff --git a/api/mfx_dispatch/linux/CMakeLists.txt b/api/mfx_dispatch/linux/CMakeLists.txt
index 050aeed..36d2695 100644
--- a/api/mfx_dispatch/linux/CMakeLists.txt
+++ b/api/mfx_dispatch/linux/CMakeLists.txt
@@ -33,7 +33,7 @@ function( get_api_version mfx_version_major mfx_version_minor )
   set(${mfx_version_minor} ${minor} PARENT_SCOPE)
 endfunction()
 
-set( CMAKE_LIB_DIR ${CMAKE_BINARY_DIR}/__lib )
+set( CMAKE_LIB_DIR ${CMAKE_BINARY_DIR}/__bin )
 
 # If user did not override CMAKE_INSTALL_PREFIX, then set the default prefix
 # to /opt/intel/mediasdk instead of cmake's default
@@ -94,53 +94,23 @@ include_directories (
   ${MFX_API_FOLDER}
 )
 
-function( append_property target property_name property )
-  get_target_property( property ${ARGV0} ${ARGV1} )
-  if( property MATCHES NOTFOUND)
-    set( property "" )
-  endif( )
-  string( REPLACE ";" " " property "${ARGV2} ${property}" )
-  set_target_properties( ${ARGV0} PROPERTIES ${ARGV1} "${property}" )
-endfunction( )
-
-function( make_static_library name )
-  if( sources.plus )
-    list( APPEND sources ${sources.plus} )
-  endif( )
-
-  set( target ${ARGV0} )
-
-  add_library( ${target} STATIC ${include} ${sources} )
-
-  set( link_flags_list "-Wl,--no-undefined,-z,relro,-z,now,-z,noexecstack")
-  append_property( ${target} LINK_FLAGS "${link_flags_list} -fstack-protector" )
+add_library(mfx SHARED ${sources})
+target_link_libraries(mfx dl)
 
-  if( defs )
-    append_property( ${target} COMPILE_FLAGS ${defs} )
-  endif( )
-
-  set_target_properties( ${target} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_LIB_DIR}/${CMAKE_BUILD_TYPE} FOLDER ${target} )
-endfunction( )
-
-set( defs "" )
-make_static_library( mfx )
+get_api_version(MFX_VERSION_MAJOR MFX_VERSION_MINOR)
 
-set( defs "-DMFX_DISPATCHER_EXPOSED_PREFIX" )
-make_static_library( dispatch_shared )
+set_target_properties( mfx PROPERTIES LINK_FLAGS
+  "-Wl,--no-undefined,-z,relro,-z,now,-z,noexecstack -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/libmfx.map -fstack-protector")
+set_target_properties( mfx PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIB_DIR}/${CMAKE_BUILD_TYPE} FOLDER mfx )
+set_target_properties( mfx PROPERTIES   VERSION ${MFX_VERSION_MAJOR}.${MFX_VERSION_MINOR})
+set_target_properties( mfx PROPERTIES SOVERSION ${MFX_VERSION_MAJOR})
 
-set( defs "-DMFX_DISPATCHER_LOG -DDXVA2DEVICE_LOG" )
-make_static_library( dispatch_trace )
+install(TARGETS mfx LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
-get_api_version(MFX_VERSION_MAJOR MFX_VERSION_MINOR)
 set( PKG_CONFIG_FNAME "${CMAKE_LIB_DIR}/${CMAKE_BUILD_TYPE}/lib${PROJECT_NAME}.pc")
-set( PKG_CONFIG_FNAME_SHARED "${CMAKE_LIB_DIR}/${CMAKE_BUILD_TYPE}/lib${PROJECT_NAME}-shared.pc")
 configure_file("${CMAKE_CURRENT_SOURCE_DIR}/pkg-config.pc.cmake" ${PKG_CONFIG_FNAME} @ONLY)
-configure_file("${CMAKE_CURRENT_SOURCE_DIR}/pkg-config-shared.pc.cmake" ${PKG_CONFIG_FNAME_SHARED} @ONLY)
 
-install( TARGETS mfx ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} )
-install( TARGETS dispatch_shared ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} )
 install( FILES ${PKG_CONFIG_FNAME} DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig )
-install( FILES ${PKG_CONFIG_FNAME_SHARED} DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig )
 install( DIRECTORY ${MFX_API_FOLDER}/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/mfx FILES_MATCHING PATTERN *.h )
 
 # For backwards compatibility, create a relative symbolic link without the "lib"
diff --git a/api/mfx_dispatch/linux/libmfx.map b/api/mfx_dispatch/linux/libmfx.map
new file mode 100644
index 0000000..3d8cfb3
--- /dev/null
+++ b/api/mfx_dispatch/linux/libmfx.map
@@ -0,0 +1,111 @@
+LIBMFX_1.0 {
+  global:
+    MFXInit;
+    MFXClose;
+    MFXQueryIMPL;
+    MFXQueryVersion;
+
+    MFXJoinSession;
+    MFXDisjoinSession;
+    MFXCloneSession;
+    MFXSetPriority;
+    MFXGetPriority;
+
+    MFXVideoCORE_SetBufferAllocator;
+    MFXVideoCORE_SetFrameAllocator;
+    MFXVideoCORE_SetHandle;
+    MFXVideoCORE_GetHandle;
+    MFXVideoCORE_SyncOperation;
+
+    MFXVideoENCODE_Query;
+    MFXVideoENCODE_QueryIOSurf;
+    MFXVideoENCODE_Init;
+    MFXVideoENCODE_Reset;
+    MFXVideoENCODE_Close;
+    MFXVideoENCODE_GetVideoParam;
+    MFXVideoENCODE_GetEncodeStat;
+    MFXVideoENCODE_EncodeFrameAsync;
+
+    MFXVideoDECODE_Query;
+    MFXVideoDECODE_DecodeHeader;
+    MFXVideoDECODE_QueryIOSurf;
+    MFXVideoDECODE_Init;
+    MFXVideoDECODE_Reset;
+    MFXVideoDECODE_Close;
+    MFXVideoDECODE_GetVideoParam;
+    MFXVideoDECODE_GetDecodeStat;
+    MFXVideoDECODE_SetSkipMode;
+    MFXVideoDECODE_GetPayload;
+    MFXVideoDECODE_DecodeFrameAsync;
+
+    MFXVideoVPP_Query;
+    MFXVideoVPP_QueryIOSurf;
+    MFXVideoVPP_Init;
+    MFXVideoVPP_Reset;
+    MFXVideoVPP_Close;
+
+    MFXVideoVPP_GetVideoParam;
+    MFXVideoVPP_GetVPPStat;
+    MFXVideoVPP_RunFrameVPPAsync;
+
+  local:
+    *;
+};
+
+LIBMFX_1.1 {
+  global:
+    MFXVideoUSER_Register;
+    MFXVideoUSER_Unregister;
+    MFXVideoUSER_ProcessFrameAsync;
+} LIBMFX_1.0;
+
+LIBMFX_1.8 {
+  global:
+    MFXVideoUSER_Load;
+    MFXVideoUSER_UnLoad;
+} LIBMFX_1.1;
+
+LIBMFX_1.10 {
+  global:
+    MFXVideoENC_Query;
+    MFXVideoENC_QueryIOSurf;
+    MFXVideoENC_Init;
+    MFXVideoENC_Reset;
+    MFXVideoENC_Close;
+    MFXVideoENC_ProcessFrameAsync;
+    MFXVideoVPP_RunFrameVPPAsyncEx;
+
+} LIBMFX_1.1;
+
+LIBMFX_1.13 {
+  global:
+    MFXVideoPAK_Query;
+    MFXVideoPAK_QueryIOSurf;
+    MFXVideoPAK_Init;
+    MFXVideoPAK_Reset;
+    MFXVideoPAK_Close;
+    MFXVideoPAK_ProcessFrameAsync;
+    MFXVideoUSER_LoadByPath;
+} LIBMFX_1.10;
+
+LIBMFX_1.14 {
+  global:
+    MFXInitEx;
+    MFXDoWork;
+} LIBMFX_1.13;
+
+LIBMFX_1.19 {
+  global:
+    MFXVideoENC_GetVideoParam;
+    MFXVideoPAK_GetVideoParam;
+    MFXVideoCORE_QueryPlatform;
+    MFXVideoUSER_GetPlugin;
+} LIBMFX_1.14;
+
+LIBMFXAUDIO_1.9 {
+  global:
+    MFXAudioUSER_Load;
+    MFXAudioUSER_UnLoad;
+  local:
+    *;
+};
-- 
2.17.2

