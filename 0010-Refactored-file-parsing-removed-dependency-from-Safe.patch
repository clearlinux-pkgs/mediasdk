From 45dc4b53488dc0190db1d24236f4ef8504928049 Mon Sep 17 00:00:00 2001
From: Miroslav Goncharenko <miroslav.goncharenko@intel.com>
Date: Fri, 12 Oct 2018 16:58:12 +0300
Subject: [PATCH 10/15] Refactored file parsing, removed dependency from
 SafeStrings lib

---
 .../mfx_trace/src/mfx_trace_utils_linux.cpp   | 136 +++++++++---------
 1 file changed, 66 insertions(+), 70 deletions(-)

diff --git a/_studio/shared/mfx_trace/src/mfx_trace_utils_linux.cpp b/_studio/shared/mfx_trace/src/mfx_trace_utils_linux.cpp
index 7cc9276..8654fa2 100644
--- a/_studio/shared/mfx_trace/src/mfx_trace_utils_linux.cpp
+++ b/_studio/shared/mfx_trace/src/mfx_trace_utils_linux.cpp
@@ -21,26 +21,58 @@
 
 #include "mfx_trace_utils.h"
 #include <sstream>
-#include <iomanip>
+#include <cstring>
 
 #ifdef MFX_TRACE_ENABLE
 #include "vm_sys_info.h"
 
-#if defined(ANDROID)
-#include "snprintf_s.h"
-#endif
+inline std::string& trim_string(std::string&& s)
+{
+    // Remove leading spaces, tabulation, = character
+    size_t pos = s.find_first_not_of(" =\t");
+    if (pos != std::string::npos)
+        s.erase(0, pos);
+
+    // Remove trailing spaces, tabulation, newline symbol, spaces
+    pos = s.find_last_not_of(" \t\n\r\f\v");
+    if (pos != std::string::npos)
+        s.erase(pos + 1);
+
+    return s;
+}
+
+std::string mfx_trace_get_value(FILE* file, const char* pName)
+{
+    if (!file || !pName)
+        return std::string("");
+
+    char line[MAX_PATH] = {0}, *s = nullptr;
+    std::string str, str_name(pName);
+
+    while ((s = fgets(line, MAX_PATH,  file)))
+    {
+        str = s;
+
+        size_t pos = str.find(str_name);
+        if (pos != std::string::npos)
+        {
+            pos += str_name.size();
+            return trim_string(str.substr(pos));
+        }
+    }
+
+    return std::string("");
+}
 
 extern "C"
 {
 
 #include <stdlib.h>
 
-/*------------------------------------------------------------------------------*/
-
 FILE* mfx_trace_open_conf_file(const char* name)
 {
-    FILE* file = NULL;
-    char file_name[MAX_PATH] = {0};
+    FILE* file = nullptr;
+    std::stringstream ss;
 
 #if defined(ANDROID)
     const char* home = "/data/data/com.intel.vtune/mediasdk";
@@ -50,73 +82,36 @@ FILE* mfx_trace_open_conf_file(const char* name)
 
     if (home)
     {
-        snprintf_s_ss(file_name, MAX_PATH-1, "%s/.%s", home, name);
-        file = fopen(file_name, "r");
+        ss << home << "/." << name;
+        file = fopen(ss.str().c_str(), "r");
     }
     if (!file)
     {
-        snprintf_s_ss(file_name, MAX_PATH-1, "%s/%s", MFX_TRACE_CONFIG_PATH, name);
-        file = fopen(file_name, "r");
+        ss << MFX_TRACE_CONFIG_PATH << "/" << name;
+        file = fopen(ss.str().c_str(), "r");
     }
     return file;
 }
 
-/*------------------------------------------------------------------------------*/
-
-mfxTraceU32 mfx_trace_get_value_pos(FILE* file,
-                                    const char* pName,
-                                    char* line, mfxTraceU32 line_size,
-                                    char** value_pos)
-{
-    char *str = NULL;
-    mfxTraceU32 n = 0;
-    bool bFound = false;
-
-    if (!file || ! pName || !value_pos) return 1;
-    while (NULL != (str = fgets(line, line_size-1,  file)))
-    {
-        n = strnlen_s(str, line_size-1);
-        if ((n > 0) && (str[n-1] == '\n')) str[n-1] = '\0';
-        for(; strchr(" \t", *str) && (*str); str++);
-        n = strnlen_s(pName, 256);
-        if (!strncmp(str, pName, n))
-        {
-            str += n;
-            if (!strchr(" =\t", *str)) continue;
-            for(; strchr(" =\t", *str) && (*str); str++);
-            bFound = true;
-            *value_pos = str;
-            break;
-        }
-    }
-    return (bFound)? 0: 1;
-}
-
-/*------------------------------------------------------------------------------*/
-
 mfxTraceU32 mfx_trace_get_conf_dword(FILE* file,
                                      const char* pName,
                                      mfxTraceU32* pValue)
 {
-    char line[MAX_PATH] = {0}, *value_pos = NULL;
-    
-    if (!mfx_trace_get_value_pos(file, pName, line, sizeof(line), &value_pos))
+    std::string value_from_file = mfx_trace_get_value(file, pName);
+
+    if (value_from_file.empty())
+        return 1;
+
+    if (!value_from_file.compare(0, 2, "0x"))
     {
-        if (!strncmp(value_pos, "0x", 2))
-        {
-            value_pos += 2;
-            std::stringstream ss(value_pos);
-            std::string s;
-            ss >> std::setw(8) >> s;
-            std::stringstream(s) >> std::hex >> *pValue;
-        }
-        else
-        {
-            *pValue = atoi(value_pos);
-        }
-        return 0;
+        std::stringstream(value_from_file.substr(2)) >> std::hex >> *pValue;
     }
-    return 1;
+    else
+    {
+        *pValue = std::stoi(value_from_file);
+    }
+
+    return 0;
 }
 
 
@@ -124,14 +119,15 @@ mfxTraceU32 mfx_trace_get_conf_string(FILE* file,
                                       const char* pName,
                                       mfxTraceChar* pValue, mfxTraceU32 cValueMaxSize)
 {
-    char line[MAX_PATH] = {0}, *value_pos = NULL;
-    
-    if (!mfx_trace_get_value_pos(file, pName, line, sizeof(line), &value_pos))
-    {
-        strncpy(pValue, value_pos, cValueMaxSize-1);
-        return 0;
-    }
-    return 1;
+    std::string value_from_file = mfx_trace_get_value(file, pName);
+
+    if (value_from_file.empty())
+        return 1;
+
+    if (cValueMaxSize > 0)
+        std::strncpy(pValue, value_from_file.c_str(), cValueMaxSize-1);
+
+    return 0;
 }
 
 } // extern "C"
-- 
2.17.2

